
PID_CONTROL_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008560  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08008670  08008670  00018670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008adc  08008adc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08008adc  08008adc  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008adc  08008adc  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008adc  08008adc  00018adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ae0  08008ae0  00018ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08008ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200001ec  08008cd0  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08008cd0  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116e0  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f6  00000000  00000000  000318f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00033ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  000350b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197e5  00000000  00000000  000360b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000124a8  00000000  00000000  0004f89d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092e5f  00000000  00000000  00061d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4ba4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000596c  00000000  00000000  000f4bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08008658 	.word	0x08008658

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08008658 	.word	0x08008658

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_frsub>:
 8000adc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ae0:	e002      	b.n	8000ae8 <__addsf3>
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_fsub>:
 8000ae4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae8 <__addsf3>:
 8000ae8:	0042      	lsls	r2, r0, #1
 8000aea:	bf1f      	itttt	ne
 8000aec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000af0:	ea92 0f03 	teqne	r2, r3
 8000af4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000afc:	d06a      	beq.n	8000bd4 <__addsf3+0xec>
 8000afe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b06:	bfc1      	itttt	gt
 8000b08:	18d2      	addgt	r2, r2, r3
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	4048      	eorgt	r0, r1
 8000b0e:	4041      	eorgt	r1, r0
 8000b10:	bfb8      	it	lt
 8000b12:	425b      	neglt	r3, r3
 8000b14:	2b19      	cmp	r3, #25
 8000b16:	bf88      	it	hi
 8000b18:	4770      	bxhi	lr
 8000b1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b26:	bf18      	it	ne
 8000b28:	4240      	negne	r0, r0
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4249      	negne	r1, r1
 8000b3a:	ea92 0f03 	teq	r2, r3
 8000b3e:	d03f      	beq.n	8000bc0 <__addsf3+0xd8>
 8000b40:	f1a2 0201 	sub.w	r2, r2, #1
 8000b44:	fa41 fc03 	asr.w	ip, r1, r3
 8000b48:	eb10 000c 	adds.w	r0, r0, ip
 8000b4c:	f1c3 0320 	rsb	r3, r3, #32
 8000b50:	fa01 f103 	lsl.w	r1, r1, r3
 8000b54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b58:	d502      	bpl.n	8000b60 <__addsf3+0x78>
 8000b5a:	4249      	negs	r1, r1
 8000b5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b64:	d313      	bcc.n	8000b8e <__addsf3+0xa6>
 8000b66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b6a:	d306      	bcc.n	8000b7a <__addsf3+0x92>
 8000b6c:	0840      	lsrs	r0, r0, #1
 8000b6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b72:	f102 0201 	add.w	r2, r2, #1
 8000b76:	2afe      	cmp	r2, #254	; 0xfe
 8000b78:	d251      	bcs.n	8000c1e <__addsf3+0x136>
 8000b7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b82:	bf08      	it	eq
 8000b84:	f020 0001 	biceq.w	r0, r0, #1
 8000b88:	ea40 0003 	orr.w	r0, r0, r3
 8000b8c:	4770      	bx	lr
 8000b8e:	0049      	lsls	r1, r1, #1
 8000b90:	eb40 0000 	adc.w	r0, r0, r0
 8000b94:	3a01      	subs	r2, #1
 8000b96:	bf28      	it	cs
 8000b98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b9c:	d2ed      	bcs.n	8000b7a <__addsf3+0x92>
 8000b9e:	fab0 fc80 	clz	ip, r0
 8000ba2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba6:	ebb2 020c 	subs.w	r2, r2, ip
 8000baa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bae:	bfaa      	itet	ge
 8000bb0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb4:	4252      	neglt	r2, r2
 8000bb6:	4318      	orrge	r0, r3
 8000bb8:	bfbc      	itt	lt
 8000bba:	40d0      	lsrlt	r0, r2
 8000bbc:	4318      	orrlt	r0, r3
 8000bbe:	4770      	bx	lr
 8000bc0:	f092 0f00 	teq	r2, #0
 8000bc4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc8:	bf06      	itte	eq
 8000bca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bce:	3201      	addeq	r2, #1
 8000bd0:	3b01      	subne	r3, #1
 8000bd2:	e7b5      	b.n	8000b40 <__addsf3+0x58>
 8000bd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bdc:	bf18      	it	ne
 8000bde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be2:	d021      	beq.n	8000c28 <__addsf3+0x140>
 8000be4:	ea92 0f03 	teq	r2, r3
 8000be8:	d004      	beq.n	8000bf4 <__addsf3+0x10c>
 8000bea:	f092 0f00 	teq	r2, #0
 8000bee:	bf08      	it	eq
 8000bf0:	4608      	moveq	r0, r1
 8000bf2:	4770      	bx	lr
 8000bf4:	ea90 0f01 	teq	r0, r1
 8000bf8:	bf1c      	itt	ne
 8000bfa:	2000      	movne	r0, #0
 8000bfc:	4770      	bxne	lr
 8000bfe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c02:	d104      	bne.n	8000c0e <__addsf3+0x126>
 8000c04:	0040      	lsls	r0, r0, #1
 8000c06:	bf28      	it	cs
 8000c08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c0c:	4770      	bx	lr
 8000c0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c12:	bf3c      	itt	cc
 8000c14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bxcc	lr
 8000c1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c26:	4770      	bx	lr
 8000c28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c2c:	bf16      	itet	ne
 8000c2e:	4608      	movne	r0, r1
 8000c30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c34:	4601      	movne	r1, r0
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	bf06      	itte	eq
 8000c3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3e:	ea90 0f01 	teqeq	r0, r1
 8000c42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_ui2f>:
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	e004      	b.n	8000c58 <__aeabi_i2f+0x8>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_i2f>:
 8000c50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c54:	bf48      	it	mi
 8000c56:	4240      	negmi	r0, r0
 8000c58:	ea5f 0c00 	movs.w	ip, r0
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c64:	4601      	mov	r1, r0
 8000c66:	f04f 0000 	mov.w	r0, #0
 8000c6a:	e01c      	b.n	8000ca6 <__aeabi_l2f+0x2a>

08000c6c <__aeabi_ul2f>:
 8000c6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c70:	bf08      	it	eq
 8000c72:	4770      	bxeq	lr
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e00a      	b.n	8000c90 <__aeabi_l2f+0x14>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_l2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c88:	d502      	bpl.n	8000c90 <__aeabi_l2f+0x14>
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	ea5f 0c01 	movs.w	ip, r1
 8000c94:	bf02      	ittt	eq
 8000c96:	4684      	moveq	ip, r0
 8000c98:	4601      	moveq	r1, r0
 8000c9a:	2000      	moveq	r0, #0
 8000c9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ca0:	bf08      	it	eq
 8000ca2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000caa:	fabc f28c 	clz	r2, ip
 8000cae:	3a08      	subs	r2, #8
 8000cb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb4:	db10      	blt.n	8000cd8 <__aeabi_l2f+0x5c>
 8000cb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cba:	4463      	add	r3, ip
 8000cbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cc0:	f1c2 0220 	rsb	r2, r2, #32
 8000cc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ccc:	eb43 0002 	adc.w	r0, r3, r2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f102 0220 	add.w	r2, r2, #32
 8000cdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_fmul>:
 8000cf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d00:	bf1e      	ittt	ne
 8000d02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d06:	ea92 0f0c 	teqne	r2, ip
 8000d0a:	ea93 0f0c 	teqne	r3, ip
 8000d0e:	d06f      	beq.n	8000df0 <__aeabi_fmul+0xf8>
 8000d10:	441a      	add	r2, r3
 8000d12:	ea80 0c01 	eor.w	ip, r0, r1
 8000d16:	0240      	lsls	r0, r0, #9
 8000d18:	bf18      	it	ne
 8000d1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1e:	d01e      	beq.n	8000d5e <__aeabi_fmul+0x66>
 8000d20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d38:	bf3e      	ittt	cc
 8000d3a:	0049      	lslcc	r1, r1, #1
 8000d3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d40:	005b      	lslcc	r3, r3, #1
 8000d42:	ea40 0001 	orr.w	r0, r0, r1
 8000d46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d4a:	2afd      	cmp	r2, #253	; 0xfd
 8000d4c:	d81d      	bhi.n	8000d8a <__aeabi_fmul+0x92>
 8000d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d56:	bf08      	it	eq
 8000d58:	f020 0001 	biceq.w	r0, r0, #1
 8000d5c:	4770      	bx	lr
 8000d5e:	f090 0f00 	teq	r0, #0
 8000d62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d66:	bf08      	it	eq
 8000d68:	0249      	lsleq	r1, r1, #9
 8000d6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d72:	3a7f      	subs	r2, #127	; 0x7f
 8000d74:	bfc2      	ittt	gt
 8000d76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7e:	4770      	bxgt	lr
 8000d80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	dc5d      	bgt.n	8000e48 <__aeabi_fmul+0x150>
 8000d8c:	f112 0f19 	cmn.w	r2, #25
 8000d90:	bfdc      	itt	le
 8000d92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d96:	4770      	bxle	lr
 8000d98:	f1c2 0200 	rsb	r2, r2, #0
 8000d9c:	0041      	lsls	r1, r0, #1
 8000d9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000da2:	f1c2 0220 	rsb	r2, r2, #32
 8000da6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000daa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dae:	f140 0000 	adc.w	r0, r0, #0
 8000db2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db6:	bf08      	it	eq
 8000db8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbc:	4770      	bx	lr
 8000dbe:	f092 0f00 	teq	r2, #0
 8000dc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc6:	bf02      	ittt	eq
 8000dc8:	0040      	lsleq	r0, r0, #1
 8000dca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dce:	3a01      	subeq	r2, #1
 8000dd0:	d0f9      	beq.n	8000dc6 <__aeabi_fmul+0xce>
 8000dd2:	ea40 000c 	orr.w	r0, r0, ip
 8000dd6:	f093 0f00 	teq	r3, #0
 8000dda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dde:	bf02      	ittt	eq
 8000de0:	0049      	lsleq	r1, r1, #1
 8000de2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de6:	3b01      	subeq	r3, #1
 8000de8:	d0f9      	beq.n	8000dde <__aeabi_fmul+0xe6>
 8000dea:	ea41 010c 	orr.w	r1, r1, ip
 8000dee:	e78f      	b.n	8000d10 <__aeabi_fmul+0x18>
 8000df0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df4:	ea92 0f0c 	teq	r2, ip
 8000df8:	bf18      	it	ne
 8000dfa:	ea93 0f0c 	teqne	r3, ip
 8000dfe:	d00a      	beq.n	8000e16 <__aeabi_fmul+0x11e>
 8000e00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e04:	bf18      	it	ne
 8000e06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	d1d8      	bne.n	8000dbe <__aeabi_fmul+0xc6>
 8000e0c:	ea80 0001 	eor.w	r0, r0, r1
 8000e10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e14:	4770      	bx	lr
 8000e16:	f090 0f00 	teq	r0, #0
 8000e1a:	bf17      	itett	ne
 8000e1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e20:	4608      	moveq	r0, r1
 8000e22:	f091 0f00 	teqne	r1, #0
 8000e26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e2a:	d014      	beq.n	8000e56 <__aeabi_fmul+0x15e>
 8000e2c:	ea92 0f0c 	teq	r2, ip
 8000e30:	d101      	bne.n	8000e36 <__aeabi_fmul+0x13e>
 8000e32:	0242      	lsls	r2, r0, #9
 8000e34:	d10f      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e36:	ea93 0f0c 	teq	r3, ip
 8000e3a:	d103      	bne.n	8000e44 <__aeabi_fmul+0x14c>
 8000e3c:	024b      	lsls	r3, r1, #9
 8000e3e:	bf18      	it	ne
 8000e40:	4608      	movne	r0, r1
 8000e42:	d108      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e44:	ea80 0001 	eor.w	r0, r0, r1
 8000e48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e54:	4770      	bx	lr
 8000e56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e5e:	4770      	bx	lr

08000e60 <__aeabi_fdiv>:
 8000e60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e68:	bf1e      	ittt	ne
 8000e6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6e:	ea92 0f0c 	teqne	r2, ip
 8000e72:	ea93 0f0c 	teqne	r3, ip
 8000e76:	d069      	beq.n	8000f4c <__aeabi_fdiv+0xec>
 8000e78:	eba2 0203 	sub.w	r2, r2, r3
 8000e7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e80:	0249      	lsls	r1, r1, #9
 8000e82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e86:	d037      	beq.n	8000ef8 <__aeabi_fdiv+0x98>
 8000e88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	428b      	cmp	r3, r1
 8000e9a:	bf38      	it	cc
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ea2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	bf24      	itt	cs
 8000eaa:	1a5b      	subcs	r3, r3, r1
 8000eac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eb0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb4:	bf24      	itt	cs
 8000eb6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ebe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ec2:	bf24      	itt	cs
 8000ec4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ecc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ed0:	bf24      	itt	cs
 8000ed2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eda:	011b      	lsls	r3, r3, #4
 8000edc:	bf18      	it	ne
 8000ede:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ee2:	d1e0      	bne.n	8000ea6 <__aeabi_fdiv+0x46>
 8000ee4:	2afd      	cmp	r2, #253	; 0xfd
 8000ee6:	f63f af50 	bhi.w	8000d8a <__aeabi_fmul+0x92>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ef0:	bf08      	it	eq
 8000ef2:	f020 0001 	biceq.w	r0, r0, #1
 8000ef6:	4770      	bx	lr
 8000ef8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000efc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f00:	327f      	adds	r2, #127	; 0x7f
 8000f02:	bfc2      	ittt	gt
 8000f04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f0c:	4770      	bxgt	lr
 8000f0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	3a01      	subs	r2, #1
 8000f18:	e737      	b.n	8000d8a <__aeabi_fmul+0x92>
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fdiv+0xc2>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fdiv+0xda>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e795      	b.n	8000e78 <__aeabi_fdiv+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d108      	bne.n	8000f68 <__aeabi_fdiv+0x108>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	f47f af7d 	bne.w	8000e56 <__aeabi_fmul+0x15e>
 8000f5c:	ea93 0f0c 	teq	r3, ip
 8000f60:	f47f af70 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f64:	4608      	mov	r0, r1
 8000f66:	e776      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f68:	ea93 0f0c 	teq	r3, ip
 8000f6c:	d104      	bne.n	8000f78 <__aeabi_fdiv+0x118>
 8000f6e:	024b      	lsls	r3, r1, #9
 8000f70:	f43f af4c 	beq.w	8000e0c <__aeabi_fmul+0x114>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e76e      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f7c:	bf18      	it	ne
 8000f7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f82:	d1ca      	bne.n	8000f1a <__aeabi_fdiv+0xba>
 8000f84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f88:	f47f af5c 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f90:	f47f af3c 	bne.w	8000e0c <__aeabi_fmul+0x114>
 8000f94:	e75f      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f96:	bf00      	nop

08000f98 <__gesf2>:
 8000f98:	f04f 3cff 	mov.w	ip, #4294967295
 8000f9c:	e006      	b.n	8000fac <__cmpsf2+0x4>
 8000f9e:	bf00      	nop

08000fa0 <__lesf2>:
 8000fa0:	f04f 0c01 	mov.w	ip, #1
 8000fa4:	e002      	b.n	8000fac <__cmpsf2+0x4>
 8000fa6:	bf00      	nop

08000fa8 <__cmpsf2>:
 8000fa8:	f04f 0c01 	mov.w	ip, #1
 8000fac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fbc:	bf18      	it	ne
 8000fbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fc2:	d011      	beq.n	8000fe8 <__cmpsf2+0x40>
 8000fc4:	b001      	add	sp, #4
 8000fc6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fca:	bf18      	it	ne
 8000fcc:	ea90 0f01 	teqne	r0, r1
 8000fd0:	bf58      	it	pl
 8000fd2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fd6:	bf88      	it	hi
 8000fd8:	17c8      	asrhi	r0, r1, #31
 8000fda:	bf38      	it	cc
 8000fdc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fe0:	bf18      	it	ne
 8000fe2:	f040 0001 	orrne.w	r0, r0, #1
 8000fe6:	4770      	bx	lr
 8000fe8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fec:	d102      	bne.n	8000ff4 <__cmpsf2+0x4c>
 8000fee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ff2:	d105      	bne.n	8001000 <__cmpsf2+0x58>
 8000ff4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ff8:	d1e4      	bne.n	8000fc4 <__cmpsf2+0x1c>
 8000ffa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ffe:	d0e1      	beq.n	8000fc4 <__cmpsf2+0x1c>
 8001000:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <__aeabi_cfrcmple>:
 8001008:	4684      	mov	ip, r0
 800100a:	4608      	mov	r0, r1
 800100c:	4661      	mov	r1, ip
 800100e:	e7ff      	b.n	8001010 <__aeabi_cfcmpeq>

08001010 <__aeabi_cfcmpeq>:
 8001010:	b50f      	push	{r0, r1, r2, r3, lr}
 8001012:	f7ff ffc9 	bl	8000fa8 <__cmpsf2>
 8001016:	2800      	cmp	r0, #0
 8001018:	bf48      	it	mi
 800101a:	f110 0f00 	cmnmi.w	r0, #0
 800101e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001020 <__aeabi_fcmpeq>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff fff4 	bl	8001010 <__aeabi_cfcmpeq>
 8001028:	bf0c      	ite	eq
 800102a:	2001      	moveq	r0, #1
 800102c:	2000      	movne	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmplt>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffea 	bl	8001010 <__aeabi_cfcmpeq>
 800103c:	bf34      	ite	cc
 800103e:	2001      	movcc	r0, #1
 8001040:	2000      	movcs	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmple>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffe0 	bl	8001010 <__aeabi_cfcmpeq>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpge>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffd2 	bl	8001008 <__aeabi_cfrcmple>
 8001064:	bf94      	ite	ls
 8001066:	2001      	movls	r0, #1
 8001068:	2000      	movhi	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmpgt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffc8 	bl	8001008 <__aeabi_cfrcmple>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <KalmanFilter_Init>:
#include "kalman.h"

void KalmanFilter_Init(KalmanFilter *kf, float Q, float R) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
    kf->x = 0.0f;      // Initial state estimate
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
    kf->P = 1.0f;      // Initial error covariance
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800109e:	605a      	str	r2, [r3, #4]
    kf->Q = Q;         // Process noise covariance
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	609a      	str	r2, [r3, #8]
    kf->R = R;         // Measurement noise covariance
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	60da      	str	r2, [r3, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr

080010b6 <KalmanFilter_Update>:

float KalmanFilter_Update(KalmanFilter *kf, float z) {
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	6039      	str	r1, [r7, #0]
    // Prediction update
    float x_pred = kf->x;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	617b      	str	r3, [r7, #20]
    float P_pred = kf->P + kf->Q;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	4619      	mov	r1, r3
 80010d0:	4610      	mov	r0, r2
 80010d2:	f7ff fd09 	bl	8000ae8 <__addsf3>
 80010d6:	4603      	mov	r3, r0
 80010d8:	613b      	str	r3, [r7, #16]

    // Measurement update (Kalman gain calculation)
    float K = P_pred / (P_pred + kf->R);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	6939      	ldr	r1, [r7, #16]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fd01 	bl	8000ae8 <__addsf3>
 80010e6:	4603      	mov	r3, r0
 80010e8:	4619      	mov	r1, r3
 80010ea:	6938      	ldr	r0, [r7, #16]
 80010ec:	f7ff feb8 	bl	8000e60 <__aeabi_fdiv>
 80010f0:	4603      	mov	r3, r0
 80010f2:	60fb      	str	r3, [r7, #12]

    // State update
    kf->x = x_pred + K * (z - x_pred);
 80010f4:	6979      	ldr	r1, [r7, #20]
 80010f6:	6838      	ldr	r0, [r7, #0]
 80010f8:	f7ff fcf4 	bl	8000ae4 <__aeabi_fsub>
 80010fc:	4603      	mov	r3, r0
 80010fe:	68f9      	ldr	r1, [r7, #12]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fdf9 	bl	8000cf8 <__aeabi_fmul>
 8001106:	4603      	mov	r3, r0
 8001108:	6979      	ldr	r1, [r7, #20]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fcec 	bl	8000ae8 <__addsf3>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	601a      	str	r2, [r3, #0]

    // Error covariance update
    kf->P = (1 - K) * P_pred;
 8001118:	68f9      	ldr	r1, [r7, #12]
 800111a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800111e:	f7ff fce1 	bl	8000ae4 <__aeabi_fsub>
 8001122:	4603      	mov	r3, r0
 8001124:	6939      	ldr	r1, [r7, #16]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fde6 	bl	8000cf8 <__aeabi_fmul>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	605a      	str	r2, [r3, #4]

    return kf->x;   // Return the filtered value
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <Send_UART>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Send_UART() {
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
//
//	  sprintf((char *)Setpoint_Temperature_UART, "Set: %.2f\n", Setpoint);
//	  // Send set point
//	  HAL_UART_Transmit(&huart1, (uint8_t *)Setpoint_Temperature_UART, strlen((char *)Setpoint_Temperature_UART), 100);

	  sprintf((char *)Current_Temperature_UART, "Temperature: %.2f\n", Current_Temperature);
 8001144:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <Send_UART+0x88>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f977 	bl	800043c <__aeabi_f2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	491e      	ldr	r1, [pc, #120]	; (80011cc <Send_UART+0x8c>)
 8001154:	481e      	ldr	r0, [pc, #120]	; (80011d0 <Send_UART+0x90>)
 8001156:	f004 fff1 	bl	800613c <siprintf>
	  // Send current TEMP
	  HAL_UART_Transmit(&huart1, (uint8_t *)Current_Temperature_UART, strlen((char *)Current_Temperature_UART), 100);
 800115a:	481d      	ldr	r0, [pc, #116]	; (80011d0 <Send_UART+0x90>)
 800115c:	f7ff f802 	bl	8000164 <strlen>
 8001160:	4603      	mov	r3, r0
 8001162:	b29a      	uxth	r2, r3
 8001164:	2364      	movs	r3, #100	; 0x64
 8001166:	491a      	ldr	r1, [pc, #104]	; (80011d0 <Send_UART+0x90>)
 8001168:	481a      	ldr	r0, [pc, #104]	; (80011d4 <Send_UART+0x94>)
 800116a:	f003 fd3b 	bl	8004be4 <HAL_UART_Transmit>

	  sprintf((char *)Setpoint_Temperature_UART, "Temperature Kalman: %.2f\n", Current_Temperature_Kalman);
 800116e:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <Send_UART+0x98>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f962 	bl	800043c <__aeabi_f2d>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4917      	ldr	r1, [pc, #92]	; (80011dc <Send_UART+0x9c>)
 800117e:	4818      	ldr	r0, [pc, #96]	; (80011e0 <Send_UART+0xa0>)
 8001180:	f004 ffdc 	bl	800613c <siprintf>
	  // Send set point
	  HAL_UART_Transmit(&huart1, (uint8_t *)Setpoint_Temperature_UART, strlen((char *)Setpoint_Temperature_UART), 100);
 8001184:	4816      	ldr	r0, [pc, #88]	; (80011e0 <Send_UART+0xa0>)
 8001186:	f7fe ffed 	bl	8000164 <strlen>
 800118a:	4603      	mov	r3, r0
 800118c:	b29a      	uxth	r2, r3
 800118e:	2364      	movs	r3, #100	; 0x64
 8001190:	4913      	ldr	r1, [pc, #76]	; (80011e0 <Send_UART+0xa0>)
 8001192:	4810      	ldr	r0, [pc, #64]	; (80011d4 <Send_UART+0x94>)
 8001194:	f003 fd26 	bl	8004be4 <HAL_UART_Transmit>

	  sprintf((char *)SET_UART, "Temperature MAX6675: %.2f\n", Current_Temperature_SPI);
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <Send_UART+0xa4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f94d 	bl	800043c <__aeabi_f2d>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4910      	ldr	r1, [pc, #64]	; (80011e8 <Send_UART+0xa8>)
 80011a8:	4810      	ldr	r0, [pc, #64]	; (80011ec <Send_UART+0xac>)
 80011aa:	f004 ffc7 	bl	800613c <siprintf>
	  // Send SET
	  HAL_UART_Transmit(&huart1, (uint8_t *)SET_UART, strlen((char *)SET_UART), 100);
 80011ae:	480f      	ldr	r0, [pc, #60]	; (80011ec <Send_UART+0xac>)
 80011b0:	f7fe ffd8 	bl	8000164 <strlen>
 80011b4:	4603      	mov	r3, r0
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	2364      	movs	r3, #100	; 0x64
 80011ba:	490c      	ldr	r1, [pc, #48]	; (80011ec <Send_UART+0xac>)
 80011bc:	4805      	ldr	r0, [pc, #20]	; (80011d4 <Send_UART+0x94>)
 80011be:	f003 fd11 	bl	8004be4 <HAL_UART_Transmit>
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000004 	.word	0x20000004
 80011cc:	08008670 	.word	0x08008670
 80011d0:	200003c0 	.word	0x200003c0
 80011d4:	200002d8 	.word	0x200002d8
 80011d8:	20000008 	.word	0x20000008
 80011dc:	08008684 	.word	0x08008684
 80011e0:	200003e0 	.word	0x200003e0
 80011e4:	2000000c 	.word	0x2000000c
 80011e8:	080086a0 	.word	0x080086a0
 80011ec:	20000390 	.word	0x20000390

080011f0 <PID2STEPS>:
//		HAL_GPIO_WritePin(SSR_PORT, SSR_PIN, GPIO_PIN_RESET);  // SSR OFF
//	}
}

//--------------------STEPPER PART---------------------------
int8_t PID2STEPS(float PID) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	uint8_t target_Position;
	int8_t Steps2Move;
	float angle = PID * MAX_ANGLE; // PID (0;1)
 80011f8:	4921      	ldr	r1, [pc, #132]	; (8001280 <PID2STEPS+0x90>)
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff fd7c 	bl	8000cf8 <__aeabi_fmul>
 8001200:	4603      	mov	r3, r0
 8001202:	60fb      	str	r3, [r7, #12]

	// Avoid out of Stepper Range
	if (angle > MAX_ANGLE) angle = MAX_ANGLE;
 8001204:	491e      	ldr	r1, [pc, #120]	; (8001280 <PID2STEPS+0x90>)
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f7ff ff32 	bl	8001070 <__aeabi_fcmpgt>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <PID2STEPS+0x26>
 8001212:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <PID2STEPS+0x90>)
 8001214:	60fb      	str	r3, [r7, #12]
	if (angle < MIN_ANGLE) angle = MIN_ANGLE;
 8001216:	f04f 0100 	mov.w	r1, #0
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f7ff ff0a 	bl	8001034 <__aeabi_fcmplt>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <PID2STEPS+0x3c>
 8001226:	f04f 0300 	mov.w	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]

	target_Position = (uint8_t)(angle * Steps_Per_Cycle / 300.0);	// TINH VI TRI XOAY
 800122c:	4915      	ldr	r1, [pc, #84]	; (8001284 <PID2STEPS+0x94>)
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f7ff fd62 	bl	8000cf8 <__aeabi_fmul>
 8001234:	4603      	mov	r3, r0
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f900 	bl	800043c <__aeabi_f2d>
 800123c:	a30e      	add	r3, pc, #56	; (adr r3, 8001278 <PID2STEPS+0x88>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7ff fa7d 	bl	8000740 <__aeabi_ddiv>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff fc25 	bl	8000a9c <__aeabi_d2uiz>
 8001252:	4603      	mov	r3, r0
 8001254:	72fb      	strb	r3, [r7, #11]
	Steps2Move = target_Position - Previous_Position;	// TINH SO BUOC CAN QUAY THEM
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <PID2STEPS+0x98>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	7afa      	ldrb	r2, [r7, #11]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	b2db      	uxtb	r3, r3
 8001262:	72bb      	strb	r3, [r7, #10]
	Previous_Position = target_Position;
 8001264:	4a08      	ldr	r2, [pc, #32]	; (8001288 <PID2STEPS+0x98>)
 8001266:	7afb      	ldrb	r3, [r7, #11]
 8001268:	7013      	strb	r3, [r2, #0]

	return Steps2Move;
 800126a:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	00000000 	.word	0x00000000
 800127c:	4072c000 	.word	0x4072c000
 8001280:	43960000 	.word	0x43960000
 8001284:	43260000 	.word	0x43260000
 8001288:	2000038d 	.word	0x2000038d

0800128c <Stepper>:

void Stepper(int8_t Steps_Move)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
	uint8_t steps = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	73fb      	strb	r3, [r7, #15]

	if (Steps_Move > 0) {
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	dd0a      	ble.n	80012b8 <Stepper+0x2c>
		DIR = 1;
 80012a2:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <Stepper+0x94>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, DIR);
 80012a8:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <Stepper+0x94>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	461a      	mov	r2, r3
 80012b0:	2102      	movs	r1, #2
 80012b2:	481c      	ldr	r0, [pc, #112]	; (8001324 <Stepper+0x98>)
 80012b4:	f001 fdca 	bl	8002e4c <HAL_GPIO_WritePin>
	}

	if (Steps_Move < 0) {
 80012b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	da22      	bge.n	8001306 <Stepper+0x7a>
		DIR = 0;
 80012c0:	4b17      	ldr	r3, [pc, #92]	; (8001320 <Stepper+0x94>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, DIR);
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <Stepper+0x94>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	2102      	movs	r1, #2
 80012d0:	4814      	ldr	r0, [pc, #80]	; (8001324 <Stepper+0x98>)
 80012d2:	f001 fdbb 	bl	8002e4c <HAL_GPIO_WritePin>
		Steps_Move *= (-1);
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	425b      	negs	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	71fb      	strb	r3, [r7, #7]
	}

	while (steps < Steps_Move)
 80012de:	e012      	b.n	8001306 <Stepper+0x7a>
	{
			steps++;
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	3301      	adds	r3, #1
 80012e4:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2104      	movs	r1, #4
 80012ea:	480e      	ldr	r0, [pc, #56]	; (8001324 <Stepper+0x98>)
 80012ec:	f001 fdae 	bl	8002e4c <HAL_GPIO_WritePin>
			HAL_Delay(3);
 80012f0:	2003      	movs	r0, #3
 80012f2:	f000 ff55 	bl	80021a0 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 80012f6:	2201      	movs	r2, #1
 80012f8:	2104      	movs	r1, #4
 80012fa:	480a      	ldr	r0, [pc, #40]	; (8001324 <Stepper+0x98>)
 80012fc:	f001 fda6 	bl	8002e4c <HAL_GPIO_WritePin>
		  	HAL_Delay(3);
 8001300:	2003      	movs	r0, #3
 8001302:	f000 ff4d 	bl	80021a0 <HAL_Delay>
	while (steps < Steps_Move)
 8001306:	7bfa      	ldrb	r2, [r7, #15]
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	429a      	cmp	r2, r3
 800130e:	dbe7      	blt.n	80012e0 <Stepper+0x54>
	}

	PID_previous = 1;
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <Stepper+0x9c>)
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000320 	.word	0x20000320
 8001324:	40010800 	.word	0x40010800
 8001328:	20000000 	.word	0x20000000

0800132c <MAX6675_StartRead>:
//--------------------------------------------------------

void MAX6675_StartRead(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
    max6675_data_ready = 0;
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <MAX6675_StartRead+0x24>)
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]
    MAX6675_CS_LOW();
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800133c:	4805      	ldr	r0, [pc, #20]	; (8001354 <MAX6675_StartRead+0x28>)
 800133e:	f001 fd85 	bl	8002e4c <HAL_GPIO_WritePin>

    HAL_SPI_Receive_IT(&hspi2, max6675_rx_buf, 2);
 8001342:	2202      	movs	r2, #2
 8001344:	4904      	ldr	r1, [pc, #16]	; (8001358 <MAX6675_StartRead+0x2c>)
 8001346:	4805      	ldr	r0, [pc, #20]	; (800135c <MAX6675_StartRead+0x30>)
 8001348:	f002 fae2 	bl	8003910 <HAL_SPI_Receive_IT>
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	2000041a 	.word	0x2000041a
 8001354:	40010c00 	.word	0x40010c00
 8001358:	20000418 	.word	0x20000418
 800135c:	20000238 	.word	0x20000238

08001360 <MAX6675_GetTemperature>:

float MAX6675_GetTemperature(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
    if (!max6675_data_ready) return 0;
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <MAX6675_GetTemperature+0x5c>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d102      	bne.n	8001374 <MAX6675_GetTemperature+0x14>
 800136e:	f04f 0300 	mov.w	r3, #0
 8001372:	e01e      	b.n	80013b2 <MAX6675_GetTemperature+0x52>

    uint16_t raw = (max6675_rx_buf[0] << 8) | max6675_rx_buf[1];
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <MAX6675_GetTemperature+0x60>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	b21a      	sxth	r2, r3
 800137c:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <MAX6675_GetTemperature+0x60>)
 800137e:	785b      	ldrb	r3, [r3, #1]
 8001380:	b21b      	sxth	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b21b      	sxth	r3, r3
 8001386:	80fb      	strh	r3, [r7, #6]

    if (raw & 0x4) return -1.0f;
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MAX6675_GetTemperature+0x36>
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MAX6675_GetTemperature+0x64>)
 8001394:	e00d      	b.n	80013b2 <MAX6675_GetTemperature+0x52>

    raw >>= 3;
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	08db      	lsrs	r3, r3, #3
 800139a:	80fb      	strh	r3, [r7, #6]
    return raw * 0.25f;
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fc56 	bl	8000c50 <__aeabi_i2f>
 80013a4:	4603      	mov	r3, r0
 80013a6:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fca4 	bl	8000cf8 <__aeabi_fmul>
 80013b0:	4603      	mov	r3, r0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000041a 	.word	0x2000041a
 80013c0:	20000418 	.word	0x20000418
 80013c4:	bf800000 	.word	0xbf800000

080013c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ce:	f000 fe85 	bl	80020dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d2:	f000 f88d 	bl	80014f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d6:	f000 f9dd 	bl	8001794 <MX_GPIO_Init>
  MX_TIM2_Init();
 80013da:	f000 f95b 	bl	8001694 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80013de:	f000 f9a7 	bl	8001730 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80013e2:	f000 f8e1 	bl	80015a8 <MX_ADC1_Init>
  MX_SPI2_Init();
 80013e6:	f000 f91d 	bl	8001624 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, 1);
 80013ea:	2201      	movs	r2, #1
 80013ec:	4930      	ldr	r1, [pc, #192]	; (80014b0 <main+0xe8>)
 80013ee:	4831      	ldr	r0, [pc, #196]	; (80014b4 <main+0xec>)
 80013f0:	f003 fc83 	bl	8004cfa <HAL_UART_Receive_IT>
  // ----------------------Initialize PID----------------
  PID.Kp = 0.03928;
 80013f4:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <main+0xf0>)
 80013f6:	4a31      	ldr	r2, [pc, #196]	; (80014bc <main+0xf4>)
 80013f8:	601a      	str	r2, [r3, #0]
  PID.Ki = 0.0002692;
 80013fa:	4b2f      	ldr	r3, [pc, #188]	; (80014b8 <main+0xf0>)
 80013fc:	4a30      	ldr	r2, [pc, #192]	; (80014c0 <main+0xf8>)
 80013fe:	605a      	str	r2, [r3, #4]
  PID.Kd = 0.01957;
 8001400:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <main+0xf0>)
 8001402:	4a30      	ldr	r2, [pc, #192]	; (80014c4 <main+0xfc>)
 8001404:	609a      	str	r2, [r3, #8]
  PID.Tp = 1;
 8001406:	4b2c      	ldr	r3, [pc, #176]	; (80014b8 <main+0xf0>)
 8001408:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800140c:	60da      	str	r2, [r3, #12]
  PID.Previous_Error = 0;
 800140e:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <main+0xf0>)
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  PID.Previous_u_Ki = 0;
 8001416:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <main+0xf0>)
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	615a      	str	r2, [r3, #20]

  // ----------------------Initialize Kalman Filter----------------
  float Q = 0.01f;
 800141e:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <main+0x100>)
 8001420:	60fb      	str	r3, [r7, #12]
  float R = 0.1f;
 8001422:	4b2a      	ldr	r3, [pc, #168]	; (80014cc <main+0x104>)
 8001424:	60bb      	str	r3, [r7, #8]

  KalmanFilter_Init(&myFilter, Q, R);
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	68f9      	ldr	r1, [r7, #12]
 800142a:	4829      	ldr	r0, [pc, #164]	; (80014d0 <main+0x108>)
 800142c:	f7ff fe2a 	bl	8001084 <KalmanFilter_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (Stepper_flag) {
 8001430:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <main+0x10c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d015      	beq.n	8001466 <main+0x9e>
		  PID_previous = 0;
 800143a:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <main+0x110>)
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);	//ENA
 8001440:	2200      	movs	r2, #0
 8001442:	2101      	movs	r1, #1
 8001444:	4825      	ldr	r0, [pc, #148]	; (80014dc <main+0x114>)
 8001446:	f001 fd01 	bl	8002e4c <HAL_GPIO_WritePin>
		  Stepper(Steps2Move);
 800144a:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <main+0x118>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b25b      	sxtb	r3, r3
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff1b 	bl	800128c <Stepper>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);	//ENA
 8001456:	2201      	movs	r2, #1
 8001458:	2101      	movs	r1, #1
 800145a:	4820      	ldr	r0, [pc, #128]	; (80014dc <main+0x114>)
 800145c:	f001 fcf6 	bl	8002e4c <HAL_GPIO_WritePin>
		  Stepper_flag = 0;
 8001460:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <main+0x10c>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
	  }

	  if (UART_flag) {
 8001466:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <main+0x11c>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0df      	beq.n	8001430 <main+0x68>
		  //-------------------MAX6675----------------
		  MAX6675_StartRead();
 8001470:	f7ff ff5c 	bl	800132c <MAX6675_StartRead>

		  Temp_MAX6675 = MAX6675_GetTemperature();
 8001474:	f7ff ff74 	bl	8001360 <MAX6675_GetTemperature>
 8001478:	6078      	str	r0, [r7, #4]
		  Current_Temperature_SPI = (Temp_MAX6675 != 0 && Temp_MAX6675 != -1) ? Temp_MAX6675 : Current_Temperature_SPI;
 800147a:	f04f 0100 	mov.w	r1, #0
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff fdce 	bl	8001020 <__aeabi_fcmpeq>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d108      	bne.n	800149c <main+0xd4>
 800148a:	4917      	ldr	r1, [pc, #92]	; (80014e8 <main+0x120>)
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff fdc7 	bl	8001020 <__aeabi_fcmpeq>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <main+0xd4>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	e001      	b.n	80014a0 <main+0xd8>
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <main+0x124>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a12      	ldr	r2, [pc, #72]	; (80014ec <main+0x124>)
 80014a2:	6013      	str	r3, [r2, #0]
		  //Current_Temperature_SPI = KalmanFilter_Update(&myFilter, Current_Temperature_SPI);
		  //------------------------------------------

		  Send_UART();
 80014a4:	f7ff fe4c 	bl	8001140 <Send_UART>
		  UART_flag = 0;
 80014a8:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <main+0x11c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	701a      	strb	r2, [r3, #0]
	  if (Stepper_flag) {
 80014ae:	e7bf      	b.n	8001430 <main+0x68>
 80014b0:	20000328 	.word	0x20000328
 80014b4:	200002d8 	.word	0x200002d8
 80014b8:	20000400 	.word	0x20000400
 80014bc:	3d20e411 	.word	0x3d20e411
 80014c0:	398d236a 	.word	0x398d236a
 80014c4:	3ca05144 	.word	0x3ca05144
 80014c8:	3c23d70a 	.word	0x3c23d70a
 80014cc:	3dcccccd 	.word	0x3dcccccd
 80014d0:	200003b0 	.word	0x200003b0
 80014d4:	2000038e 	.word	0x2000038e
 80014d8:	20000000 	.word	0x20000000
 80014dc:	40010800 	.word	0x40010800
 80014e0:	20000001 	.word	0x20000001
 80014e4:	2000038f 	.word	0x2000038f
 80014e8:	bf800000 	.word	0xbf800000
 80014ec:	2000000c 	.word	0x2000000c

080014f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b094      	sub	sp, #80	; 0x50
 80014f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014fa:	2228      	movs	r2, #40	; 0x28
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f004 f9b4 	bl	800586c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001520:	2301      	movs	r3, #1
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001524:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001528:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800152a:	2300      	movs	r3, #0
 800152c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800152e:	2301      	movs	r3, #1
 8001530:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001532:	2302      	movs	r3, #2
 8001534:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800153a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800153c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001540:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001542:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001546:	4618      	mov	r0, r3
 8001548:	f001 fc98 	bl	8002e7c <HAL_RCC_OscConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001552:	f000 fb3f 	bl	8001bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001556:	230f      	movs	r3, #15
 8001558:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155a:	2302      	movs	r3, #2
 800155c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001566:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	2102      	movs	r1, #2
 8001572:	4618      	mov	r0, r3
 8001574:	f001 ff04 	bl	8003380 <HAL_RCC_ClockConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800157e:	f000 fb29 	bl	8001bd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001582:	2302      	movs	r3, #2
 8001584:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800158a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	4618      	mov	r0, r3
 8001590:	f002 f884 	bl	800369c <HAL_RCCEx_PeriphCLKConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800159a:	f000 fb1b 	bl	8001bd4 <Error_Handler>
  }
}
 800159e:	bf00      	nop
 80015a0:	3750      	adds	r7, #80	; 0x50
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <MX_ADC1_Init+0x74>)
 80015ba:	4a19      	ldr	r2, [pc, #100]	; (8001620 <MX_ADC1_Init+0x78>)
 80015bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <MX_ADC1_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <MX_ADC1_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <MX_ADC1_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <MX_ADC1_Init+0x74>)
 80015d2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80015d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015d8:	4b10      	ldr	r3, [pc, #64]	; (800161c <MX_ADC1_Init+0x74>)
 80015da:	2200      	movs	r2, #0
 80015dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80015de:	4b0f      	ldr	r3, [pc, #60]	; (800161c <MX_ADC1_Init+0x74>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015e4:	480d      	ldr	r0, [pc, #52]	; (800161c <MX_ADC1_Init+0x74>)
 80015e6:	f000 fdff 	bl	80021e8 <HAL_ADC_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80015f0:	f000 faf0 	bl	8001bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80015f4:	2308      	movs	r3, #8
 80015f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015f8:	2301      	movs	r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80015fc:	2302      	movs	r3, #2
 80015fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_ADC1_Init+0x74>)
 8001606:	f000 ff9b 	bl	8002540 <HAL_ADC_ConfigChannel>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001610:	f000 fae0 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000208 	.word	0x20000208
 8001620:	40012400 	.word	0x40012400

08001624 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001628:	4b18      	ldr	r3, [pc, #96]	; (800168c <MX_SPI2_Init+0x68>)
 800162a:	4a19      	ldr	r2, [pc, #100]	; (8001690 <MX_SPI2_Init+0x6c>)
 800162c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800162e:	4b17      	ldr	r3, [pc, #92]	; (800168c <MX_SPI2_Init+0x68>)
 8001630:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001634:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <MX_SPI2_Init+0x68>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800163c:	4b13      	ldr	r3, [pc, #76]	; (800168c <MX_SPI2_Init+0x68>)
 800163e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001642:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <MX_SPI2_Init+0x68>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800164a:	4b10      	ldr	r3, [pc, #64]	; (800168c <MX_SPI2_Init+0x68>)
 800164c:	2200      	movs	r2, #0
 800164e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001650:	4b0e      	ldr	r3, [pc, #56]	; (800168c <MX_SPI2_Init+0x68>)
 8001652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001656:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <MX_SPI2_Init+0x68>)
 800165a:	2200      	movs	r2, #0
 800165c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <MX_SPI2_Init+0x68>)
 8001660:	2200      	movs	r2, #0
 8001662:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <MX_SPI2_Init+0x68>)
 8001666:	2200      	movs	r2, #0
 8001668:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800166a:	4b08      	ldr	r3, [pc, #32]	; (800168c <MX_SPI2_Init+0x68>)
 800166c:	2200      	movs	r2, #0
 800166e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <MX_SPI2_Init+0x68>)
 8001672:	220a      	movs	r2, #10
 8001674:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001676:	4805      	ldr	r0, [pc, #20]	; (800168c <MX_SPI2_Init+0x68>)
 8001678:	f002 f8c6 	bl	8003808 <HAL_SPI_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8001682:	f000 faa7 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000238 	.word	0x20000238
 8001690:	40003800 	.word	0x40003800

08001694 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800169a:	f107 0308 	add.w	r3, r7, #8
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a8:	463b      	mov	r3, r7
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016b0:	4b1e      	ldr	r3, [pc, #120]	; (800172c <MX_TIM2_Init+0x98>)
 80016b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80016b8:	4b1c      	ldr	r3, [pc, #112]	; (800172c <MX_TIM2_Init+0x98>)
 80016ba:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80016be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c0:	4b1a      	ldr	r3, [pc, #104]	; (800172c <MX_TIM2_Init+0x98>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <MX_TIM2_Init+0x98>)
 80016c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80016cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ce:	4b17      	ldr	r3, [pc, #92]	; (800172c <MX_TIM2_Init+0x98>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d4:	4b15      	ldr	r3, [pc, #84]	; (800172c <MX_TIM2_Init+0x98>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016da:	4814      	ldr	r0, [pc, #80]	; (800172c <MX_TIM2_Init+0x98>)
 80016dc:	f002 fe13 	bl	8004306 <HAL_TIM_Base_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016e6:	f000 fa75 	bl	8001bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016f0:	f107 0308 	add.w	r3, r7, #8
 80016f4:	4619      	mov	r1, r3
 80016f6:	480d      	ldr	r0, [pc, #52]	; (800172c <MX_TIM2_Init+0x98>)
 80016f8:	f002 ffc4 	bl	8004684 <HAL_TIM_ConfigClockSource>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001702:	f000 fa67 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800170e:	463b      	mov	r3, r7
 8001710:	4619      	mov	r1, r3
 8001712:	4806      	ldr	r0, [pc, #24]	; (800172c <MX_TIM2_Init+0x98>)
 8001714:	f003 f9a6 	bl	8004a64 <HAL_TIMEx_MasterConfigSynchronization>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800171e:	f000 fa59 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000290 	.word	0x20000290

08001730 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001734:	4b15      	ldr	r3, [pc, #84]	; (800178c <MX_USART1_UART_Init+0x5c>)
 8001736:	4a16      	ldr	r2, [pc, #88]	; (8001790 <MX_USART1_UART_Init+0x60>)
 8001738:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800173a:	4b14      	ldr	r3, [pc, #80]	; (800178c <MX_USART1_UART_Init+0x5c>)
 800173c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001740:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001742:	4b12      	ldr	r3, [pc, #72]	; (800178c <MX_USART1_UART_Init+0x5c>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001748:	4b10      	ldr	r3, [pc, #64]	; (800178c <MX_USART1_UART_Init+0x5c>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <MX_USART1_UART_Init+0x5c>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001754:	4b0d      	ldr	r3, [pc, #52]	; (800178c <MX_USART1_UART_Init+0x5c>)
 8001756:	220c      	movs	r2, #12
 8001758:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_USART1_UART_Init+0x5c>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001760:	4b0a      	ldr	r3, [pc, #40]	; (800178c <MX_USART1_UART_Init+0x5c>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001766:	4809      	ldr	r0, [pc, #36]	; (800178c <MX_USART1_UART_Init+0x5c>)
 8001768:	f003 f9ec 	bl	8004b44 <HAL_UART_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001772:	f000 fa2f 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	2100      	movs	r1, #0
 800177a:	2025      	movs	r0, #37	; 0x25
 800177c:	f001 f8f9 	bl	8002972 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001780:	2025      	movs	r0, #37	; 0x25
 8001782:	f001 f912 	bl	80029aa <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART1_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200002d8 	.word	0x200002d8
 8001790:	40013800 	.word	0x40013800

08001794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179a:	f107 0310 	add.w	r3, r7, #16
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a8:	4b24      	ldr	r3, [pc, #144]	; (800183c <MX_GPIO_Init+0xa8>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	4a23      	ldr	r2, [pc, #140]	; (800183c <MX_GPIO_Init+0xa8>)
 80017ae:	f043 0320 	orr.w	r3, r3, #32
 80017b2:	6193      	str	r3, [r2, #24]
 80017b4:	4b21      	ldr	r3, [pc, #132]	; (800183c <MX_GPIO_Init+0xa8>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f003 0320 	and.w	r3, r3, #32
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c0:	4b1e      	ldr	r3, [pc, #120]	; (800183c <MX_GPIO_Init+0xa8>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4a1d      	ldr	r2, [pc, #116]	; (800183c <MX_GPIO_Init+0xa8>)
 80017c6:	f043 0304 	orr.w	r3, r3, #4
 80017ca:	6193      	str	r3, [r2, #24]
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <MX_GPIO_Init+0xa8>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <MX_GPIO_Init+0xa8>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4a17      	ldr	r2, [pc, #92]	; (800183c <MX_GPIO_Init+0xa8>)
 80017de:	f043 0308 	orr.w	r3, r3, #8
 80017e2:	6193      	str	r3, [r2, #24]
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <MX_GPIO_Init+0xa8>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7, GPIO_PIN_RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2187      	movs	r1, #135	; 0x87
 80017f4:	4812      	ldr	r0, [pc, #72]	; (8001840 <MX_GPIO_Init+0xac>)
 80017f6:	f001 fb29 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017fa:	2303      	movs	r3, #3
 80017fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fe:	2301      	movs	r3, #1
 8001800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001806:	2303      	movs	r3, #3
 8001808:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180a:	f107 0310 	add.w	r3, r7, #16
 800180e:	4619      	mov	r1, r3
 8001810:	480b      	ldr	r0, [pc, #44]	; (8001840 <MX_GPIO_Init+0xac>)
 8001812:	f001 f997 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 8001816:	2384      	movs	r3, #132	; 0x84
 8001818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181a:	2301      	movs	r3, #1
 800181c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2302      	movs	r3, #2
 8001824:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001826:	f107 0310 	add.w	r3, r7, #16
 800182a:	4619      	mov	r1, r3
 800182c:	4804      	ldr	r0, [pc, #16]	; (8001840 <MX_GPIO_Init+0xac>)
 800182e:	f001 f989 	bl	8002b44 <HAL_GPIO_Init>

}
 8001832:	bf00      	nop
 8001834:	3720      	adds	r7, #32
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000
 8001840:	40010800 	.word	0x40010800

08001844 <HAL_SPI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a07      	ldr	r2, [pc, #28]	; (8001870 <HAL_SPI_RxCpltCallback+0x2c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d108      	bne.n	8001868 <HAL_SPI_RxCpltCallback+0x24>
    {
        MAX6675_CS_HIGH();
 8001856:	2201      	movs	r2, #1
 8001858:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800185c:	4805      	ldr	r0, [pc, #20]	; (8001874 <HAL_SPI_RxCpltCallback+0x30>)
 800185e:	f001 faf5 	bl	8002e4c <HAL_GPIO_WritePin>
        max6675_data_ready = 1;
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <HAL_SPI_RxCpltCallback+0x34>)
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
    }
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40003800 	.word	0x40003800
 8001874:	40010c00 	.word	0x40010c00
 8001878:	2000041a 	.word	0x2000041a

0800187c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	uint32_t adc_value;
	if (hadc->Instance == ADC1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <HAL_ADC_ConvCpltCallback+0x58>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d11d      	bne.n	80018ca <HAL_ADC_ConvCpltCallback+0x4e>
	{
		adc_value = HAL_ADC_GetValue(&hadc1);
 800188e:	4812      	ldr	r0, [pc, #72]	; (80018d8 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001890:	f000 fd82 	bl	8002398 <HAL_ADC_GetValue>
 8001894:	60f8      	str	r0, [r7, #12]
		Current_Temperature = (adc_value * (800.0f / 4096)) + 30;
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f7ff f9d6 	bl	8000c48 <__aeabi_ui2f>
 800189c:	4603      	mov	r3, r0
 800189e:	490f      	ldr	r1, [pc, #60]	; (80018dc <HAL_ADC_ConvCpltCallback+0x60>)
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fa29 	bl	8000cf8 <__aeabi_fmul>
 80018a6:	4603      	mov	r3, r0
 80018a8:	490d      	ldr	r1, [pc, #52]	; (80018e0 <HAL_ADC_ConvCpltCallback+0x64>)
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff f91c 	bl	8000ae8 <__addsf3>
 80018b0:	4603      	mov	r3, r0
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_ADC_ConvCpltCallback+0x68>)
 80018b6:	601a      	str	r2, [r3, #0]
		Current_Temperature_Kalman = KalmanFilter_Update(&myFilter, Current_Temperature);
 80018b8:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <HAL_ADC_ConvCpltCallback+0x68>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	480a      	ldr	r0, [pc, #40]	; (80018e8 <HAL_ADC_ConvCpltCallback+0x6c>)
 80018c0:	f7ff fbf9 	bl	80010b6 <KalmanFilter_Update>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4a09      	ldr	r2, [pc, #36]	; (80018ec <HAL_ADC_ConvCpltCallback+0x70>)
 80018c8:	6013      	str	r3, [r2, #0]
	}
}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40012400 	.word	0x40012400
 80018d8:	20000208 	.word	0x20000208
 80018dc:	3e480000 	.word	0x3e480000
 80018e0:	41f00000 	.word	0x41f00000
 80018e4:	20000004 	.word	0x20000004
 80018e8:	200003b0 	.word	0x200003b0
 80018ec:	20000008 	.word	0x20000008

080018f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b09c      	sub	sp, #112	; 0x70
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a51      	ldr	r2, [pc, #324]	; (8001a44 <HAL_UART_RxCpltCallback+0x154>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	f040 809b 	bne.w	8001a3a <HAL_UART_RxCpltCallback+0x14a>
    {
    	HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, 1);
 8001904:	2201      	movs	r2, #1
 8001906:	4950      	ldr	r1, [pc, #320]	; (8001a48 <HAL_UART_RxCpltCallback+0x158>)
 8001908:	4850      	ldr	r0, [pc, #320]	; (8001a4c <HAL_UART_RxCpltCallback+0x15c>)
 800190a:	f003 f9f6 	bl	8004cfa <HAL_UART_Receive_IT>

        rxBuffer[sizeof(rxBuffer) - 1] = '\0';
 800190e:	4b4e      	ldr	r3, [pc, #312]	; (8001a48 <HAL_UART_RxCpltCallback+0x158>)
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
        char received_data[100];
        strncpy(received_data, (char *)rxBuffer, sizeof(rxBuffer) - 1);
 8001916:	f107 030c 	add.w	r3, r7, #12
 800191a:	2263      	movs	r2, #99	; 0x63
 800191c:	494a      	ldr	r1, [pc, #296]	; (8001a48 <HAL_UART_RxCpltCallback+0x158>)
 800191e:	4618      	mov	r0, r3
 8001920:	f004 fc2c 	bl	800617c <strncpy>

        if (strcmp(received_data, "1") == 0 && TIM2_SET == 0) // "1" ON
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	4949      	ldr	r1, [pc, #292]	; (8001a50 <HAL_UART_RxCpltCallback+0x160>)
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fc10 	bl	8000150 <strcmp>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10a      	bne.n	800194c <HAL_UART_RxCpltCallback+0x5c>
 8001936:	4b47      	ldr	r3, [pc, #284]	; (8001a54 <HAL_UART_RxCpltCallback+0x164>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d106      	bne.n	800194c <HAL_UART_RxCpltCallback+0x5c>
        {
            HAL_TIM_Base_Start_IT(&htim2);
 800193e:	4846      	ldr	r0, [pc, #280]	; (8001a58 <HAL_UART_RxCpltCallback+0x168>)
 8001940:	f002 fd30 	bl	80043a4 <HAL_TIM_Base_Start_IT>
            TIM2_SET = 1;
 8001944:	4b43      	ldr	r3, [pc, #268]	; (8001a54 <HAL_UART_RxCpltCallback+0x164>)
 8001946:	2201      	movs	r2, #1
 8001948:	701a      	strb	r2, [r3, #0]
		else if (strcmp(received_data, "7") == 0)
		{
			Current_Temperature = 550;
		}
    }
}
 800194a:	e076      	b.n	8001a3a <HAL_UART_RxCpltCallback+0x14a>
        else if (strcmp(received_data, "2") == 0) // "2" OFF
 800194c:	f107 030c 	add.w	r3, r7, #12
 8001950:	4942      	ldr	r1, [pc, #264]	; (8001a5c <HAL_UART_RxCpltCallback+0x16c>)
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fbfc 	bl	8000150 <strcmp>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d115      	bne.n	800198a <HAL_UART_RxCpltCallback+0x9a>
			Tset = TempSET1;
 800195e:	4b40      	ldr	r3, [pc, #256]	; (8001a60 <HAL_UART_RxCpltCallback+0x170>)
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]
			TempSET5_count = 0;
 8001964:	4b3f      	ldr	r3, [pc, #252]	; (8001a64 <HAL_UART_RxCpltCallback+0x174>)
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
			previous_time = 0;
 800196a:	4b3f      	ldr	r3, [pc, #252]	; (8001a68 <HAL_UART_RxCpltCallback+0x178>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
			time_count = 0;
 8001970:	4b3e      	ldr	r3, [pc, #248]	; (8001a6c <HAL_UART_RxCpltCallback+0x17c>)
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
			time_hold = 0;
 8001976:	4b3e      	ldr	r3, [pc, #248]	; (8001a70 <HAL_UART_RxCpltCallback+0x180>)
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
			TIM2_SET = 0;
 800197c:	4b35      	ldr	r3, [pc, #212]	; (8001a54 <HAL_UART_RxCpltCallback+0x164>)
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim2);
 8001982:	4835      	ldr	r0, [pc, #212]	; (8001a58 <HAL_UART_RxCpltCallback+0x168>)
 8001984:	f002 fd60 	bl	8004448 <HAL_TIM_Base_Stop_IT>
}
 8001988:	e057      	b.n	8001a3a <HAL_UART_RxCpltCallback+0x14a>
        else if (strcmp(received_data, "3") == 0) // "3" reset
 800198a:	f107 030c 	add.w	r3, r7, #12
 800198e:	4939      	ldr	r1, [pc, #228]	; (8001a74 <HAL_UART_RxCpltCallback+0x184>)
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fbdd 	bl	8000150 <strcmp>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d11b      	bne.n	80019d4 <HAL_UART_RxCpltCallback+0xe4>
			Tset = TempSET1;
 800199c:	4b30      	ldr	r3, [pc, #192]	; (8001a60 <HAL_UART_RxCpltCallback+0x170>)
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
			TempSET5_count = 0;
 80019a2:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <HAL_UART_RxCpltCallback+0x174>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
			previous_time = 0;
 80019a8:	4b2f      	ldr	r3, [pc, #188]	; (8001a68 <HAL_UART_RxCpltCallback+0x178>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
			time_count = 0;
 80019ae:	4b2f      	ldr	r3, [pc, #188]	; (8001a6c <HAL_UART_RxCpltCallback+0x17c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
			time_hold = 0;
 80019b4:	4b2e      	ldr	r3, [pc, #184]	; (8001a70 <HAL_UART_RxCpltCallback+0x180>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
			TIM2_SET = 0;
 80019ba:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <HAL_UART_RxCpltCallback+0x164>)
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim2);
 80019c0:	4825      	ldr	r0, [pc, #148]	; (8001a58 <HAL_UART_RxCpltCallback+0x168>)
 80019c2:	f002 fd41 	bl	8004448 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim2);
 80019c6:	4824      	ldr	r0, [pc, #144]	; (8001a58 <HAL_UART_RxCpltCallback+0x168>)
 80019c8:	f002 fcec 	bl	80043a4 <HAL_TIM_Base_Start_IT>
			TIM2_SET = 1;
 80019cc:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <HAL_UART_RxCpltCallback+0x164>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]
}
 80019d2:	e032      	b.n	8001a3a <HAL_UART_RxCpltCallback+0x14a>
        else if (strcmp(received_data, "4") == 0)
 80019d4:	f107 030c 	add.w	r3, r7, #12
 80019d8:	4927      	ldr	r1, [pc, #156]	; (8001a78 <HAL_UART_RxCpltCallback+0x188>)
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fbb8 	bl	8000150 <strcmp>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d103      	bne.n	80019ee <HAL_UART_RxCpltCallback+0xfe>
        	Current_Temperature = 50;
 80019e6:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <HAL_UART_RxCpltCallback+0x18c>)
 80019e8:	4a25      	ldr	r2, [pc, #148]	; (8001a80 <HAL_UART_RxCpltCallback+0x190>)
 80019ea:	601a      	str	r2, [r3, #0]
}
 80019ec:	e025      	b.n	8001a3a <HAL_UART_RxCpltCallback+0x14a>
        else if (strcmp(received_data, "5") == 0)
 80019ee:	f107 030c 	add.w	r3, r7, #12
 80019f2:	4924      	ldr	r1, [pc, #144]	; (8001a84 <HAL_UART_RxCpltCallback+0x194>)
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fbab 	bl	8000150 <strcmp>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d103      	bne.n	8001a08 <HAL_UART_RxCpltCallback+0x118>
			Current_Temperature = 200;
 8001a00:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <HAL_UART_RxCpltCallback+0x18c>)
 8001a02:	4a21      	ldr	r2, [pc, #132]	; (8001a88 <HAL_UART_RxCpltCallback+0x198>)
 8001a04:	601a      	str	r2, [r3, #0]
}
 8001a06:	e018      	b.n	8001a3a <HAL_UART_RxCpltCallback+0x14a>
        else if (strcmp(received_data, "6") == 0)
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	491f      	ldr	r1, [pc, #124]	; (8001a8c <HAL_UART_RxCpltCallback+0x19c>)
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fb9e 	bl	8000150 <strcmp>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d103      	bne.n	8001a22 <HAL_UART_RxCpltCallback+0x132>
			Current_Temperature = 400;
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <HAL_UART_RxCpltCallback+0x18c>)
 8001a1c:	4a1c      	ldr	r2, [pc, #112]	; (8001a90 <HAL_UART_RxCpltCallback+0x1a0>)
 8001a1e:	601a      	str	r2, [r3, #0]
}
 8001a20:	e00b      	b.n	8001a3a <HAL_UART_RxCpltCallback+0x14a>
		else if (strcmp(received_data, "7") == 0)
 8001a22:	f107 030c 	add.w	r3, r7, #12
 8001a26:	491b      	ldr	r1, [pc, #108]	; (8001a94 <HAL_UART_RxCpltCallback+0x1a4>)
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fb91 	bl	8000150 <strcmp>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d102      	bne.n	8001a3a <HAL_UART_RxCpltCallback+0x14a>
			Current_Temperature = 550;
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <HAL_UART_RxCpltCallback+0x18c>)
 8001a36:	4a18      	ldr	r2, [pc, #96]	; (8001a98 <HAL_UART_RxCpltCallback+0x1a8>)
 8001a38:	601a      	str	r2, [r3, #0]
}
 8001a3a:	bf00      	nop
 8001a3c:	3770      	adds	r7, #112	; 0x70
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40013800 	.word	0x40013800
 8001a48:	20000328 	.word	0x20000328
 8001a4c:	200002d8 	.word	0x200002d8
 8001a50:	080086bc 	.word	0x080086bc
 8001a54:	20000325 	.word	0x20000325
 8001a58:	20000290 	.word	0x20000290
 8001a5c:	080086c0 	.word	0x080086c0
 8001a60:	2000038c 	.word	0x2000038c
 8001a64:	20000324 	.word	0x20000324
 8001a68:	20000323 	.word	0x20000323
 8001a6c:	20000321 	.word	0x20000321
 8001a70:	20000322 	.word	0x20000322
 8001a74:	080086c4 	.word	0x080086c4
 8001a78:	080086c8 	.word	0x080086c8
 8001a7c:	20000004 	.word	0x20000004
 8001a80:	42480000 	.word	0x42480000
 8001a84:	080086cc 	.word	0x080086cc
 8001a88:	43480000 	.word	0x43480000
 8001a8c:	080086d0 	.word	0x080086d0
 8001a90:	43c80000 	.word	0x43c80000
 8001a94:	080086d4 	.word	0x080086d4
 8001a98:	44098000 	.word	0x44098000

08001a9c <HAL_TIM_PeriodElapsedCallback>:
//	if (PID_Output > 1) PID_Output = 1;
//	if (PID_Output < 0) PID_Output = 0;
//	Current_Temperature += alpha * PID_Output - beta * (Current_Temperature - T_ambient);
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aac:	d178      	bne.n	8001ba0 <HAL_TIM_PeriodElapsedCallback+0x104>

//		HAL_ADC_Start_IT(&hadc1);

		float PID_Output = 0;
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]

		time_count++;
 8001ab4:	4b3c      	ldr	r3, [pc, #240]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	3301      	adds	r3, #1
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4b3a      	ldr	r3, [pc, #232]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001ac0:	701a      	strb	r2, [r3, #0]

		if (Current_Temperature <= 100) PID_Output = 0.25;
 8001ac2:	4b3a      	ldr	r3, [pc, #232]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	493a      	ldr	r1, [pc, #232]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fabd 	bl	8001048 <__aeabi_fcmple>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_TIM_PeriodElapsedCallback+0x40>
 8001ad4:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	e040      	b.n	8001b5e <HAL_TIM_PeriodElapsedCallback+0xc2>
		else if (Current_Temperature > 100 && Current_Temperature <= 300) PID_Output = 0.5;
 8001adc:	4b33      	ldr	r3, [pc, #204]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4933      	ldr	r1, [pc, #204]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fac4 	bl	8001070 <__aeabi_fcmpgt>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00c      	beq.n	8001b08 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8001aee:	4b2f      	ldr	r3, [pc, #188]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4930      	ldr	r1, [pc, #192]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff faa7 	bl	8001048 <__aeabi_fcmple>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8001b00:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	e02a      	b.n	8001b5e <HAL_TIM_PeriodElapsedCallback+0xc2>
		else if (Current_Temperature > 300 && Current_Temperature <= 500) PID_Output = 0.75;
 8001b08:	4b28      	ldr	r3, [pc, #160]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4929      	ldr	r1, [pc, #164]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff faae 	bl	8001070 <__aeabi_fcmpgt>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00c      	beq.n	8001b34 <HAL_TIM_PeriodElapsedCallback+0x98>
 8001b1a:	4b24      	ldr	r3, [pc, #144]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4926      	ldr	r1, [pc, #152]	; (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fa91 	bl	8001048 <__aeabi_fcmple>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_TIM_PeriodElapsedCallback+0x98>
 8001b2c:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	e014      	b.n	8001b5e <HAL_TIM_PeriodElapsedCallback+0xc2>
		else if (Current_Temperature > 500 && Current_Temperature <= 600) PID_Output = 1;
 8001b34:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	491f      	ldr	r1, [pc, #124]	; (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fa98 	bl	8001070 <__aeabi_fcmpgt>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00b      	beq.n	8001b5e <HAL_TIM_PeriodElapsedCallback+0xc2>
 8001b46:	4b19      	ldr	r3, [pc, #100]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	491c      	ldr	r1, [pc, #112]	; (8001bbc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fa7b 	bl	8001048 <__aeabi_fcmple>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <HAL_TIM_PeriodElapsedCallback+0xc2>
 8001b58:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b5c:	60fb      	str	r3, [r7, #12]

		if (PID_previous == 1)
 8001b5e:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d109      	bne.n	8001b7c <HAL_TIM_PeriodElapsedCallback+0xe0>
		{
			Steps2Move = PID2STEPS(PID_Output);
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f7ff fb41 	bl	80011f0 <PID2STEPS>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001b74:	701a      	strb	r2, [r3, #0]
			Stepper_flag = 1;
 8001b76:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	701a      	strb	r2, [r3, #0]
		}

		if (time_count - previous_time == 3) {
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	461a      	mov	r2, r3
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d107      	bne.n	8001ba0 <HAL_TIM_PeriodElapsedCallback+0x104>
			previous_time = time_count;
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001b98:	701a      	strb	r2, [r3, #0]
			UART_flag = 1;
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001ba0:	bf00      	nop
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000321 	.word	0x20000321
 8001bac:	20000004 	.word	0x20000004
 8001bb0:	42c80000 	.word	0x42c80000
 8001bb4:	43960000 	.word	0x43960000
 8001bb8:	43fa0000 	.word	0x43fa0000
 8001bbc:	44160000 	.word	0x44160000
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	20000001 	.word	0x20000001
 8001bc8:	2000038e 	.word	0x2000038e
 8001bcc:	20000323 	.word	0x20000323
 8001bd0:	2000038f 	.word	0x2000038f

08001bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd8:	b672      	cpsid	i
}
 8001bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <Error_Handler+0x8>
	...

08001be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <HAL_MspInit+0x5c>)
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <HAL_MspInit+0x5c>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6193      	str	r3, [r2, #24]
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_MspInit+0x5c>)
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <HAL_MspInit+0x5c>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	4a0e      	ldr	r2, [pc, #56]	; (8001c3c <HAL_MspInit+0x5c>)
 8001c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c08:	61d3      	str	r3, [r2, #28]
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <HAL_MspInit+0x5c>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_MspInit+0x60>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <HAL_MspInit+0x60>)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40010000 	.word	0x40010000

08001c44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0310 	add.w	r3, r7, #16
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a18      	ldr	r2, [pc, #96]	; (8001cc0 <HAL_ADC_MspInit+0x7c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d129      	bne.n	8001cb8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c64:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <HAL_ADC_MspInit+0x80>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	4a16      	ldr	r2, [pc, #88]	; (8001cc4 <HAL_ADC_MspInit+0x80>)
 8001c6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c6e:	6193      	str	r3, [r2, #24]
 8001c70:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <HAL_ADC_MspInit+0x80>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_ADC_MspInit+0x80>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	4a10      	ldr	r2, [pc, #64]	; (8001cc4 <HAL_ADC_MspInit+0x80>)
 8001c82:	f043 0308 	orr.w	r3, r3, #8
 8001c86:	6193      	str	r3, [r2, #24]
 8001c88:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <HAL_ADC_MspInit+0x80>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c94:	2301      	movs	r3, #1
 8001c96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9c:	f107 0310 	add.w	r3, r7, #16
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4809      	ldr	r0, [pc, #36]	; (8001cc8 <HAL_ADC_MspInit+0x84>)
 8001ca4:	f000 ff4e 	bl	8002b44 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2103      	movs	r1, #3
 8001cac:	2012      	movs	r0, #18
 8001cae:	f000 fe60 	bl	8002972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001cb2:	2012      	movs	r0, #18
 8001cb4:	f000 fe79 	bl	80029aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cb8:	bf00      	nop
 8001cba:	3720      	adds	r7, #32
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40012400 	.word	0x40012400
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40010c00 	.word	0x40010c00

08001ccc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0310 	add.w	r3, r7, #16
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a20      	ldr	r2, [pc, #128]	; (8001d68 <HAL_SPI_MspInit+0x9c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d139      	bne.n	8001d60 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cec:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <HAL_SPI_MspInit+0xa0>)
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	4a1e      	ldr	r2, [pc, #120]	; (8001d6c <HAL_SPI_MspInit+0xa0>)
 8001cf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf6:	61d3      	str	r3, [r2, #28]
 8001cf8:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <HAL_SPI_MspInit+0xa0>)
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d04:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <HAL_SPI_MspInit+0xa0>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	4a18      	ldr	r2, [pc, #96]	; (8001d6c <HAL_SPI_MspInit+0xa0>)
 8001d0a:	f043 0308 	orr.w	r3, r3, #8
 8001d0e:	6193      	str	r3, [r2, #24]
 8001d10:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <HAL_SPI_MspInit+0xa0>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001d1c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001d20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2a:	f107 0310 	add.w	r3, r7, #16
 8001d2e:	4619      	mov	r1, r3
 8001d30:	480f      	ldr	r0, [pc, #60]	; (8001d70 <HAL_SPI_MspInit+0xa4>)
 8001d32:	f000 ff07 	bl	8002b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d40:	2302      	movs	r3, #2
 8001d42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4809      	ldr	r0, [pc, #36]	; (8001d70 <HAL_SPI_MspInit+0xa4>)
 8001d4c:	f000 fefa 	bl	8002b44 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 4, 0);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2104      	movs	r1, #4
 8001d54:	2024      	movs	r0, #36	; 0x24
 8001d56:	f000 fe0c 	bl	8002972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001d5a:	2024      	movs	r0, #36	; 0x24
 8001d5c:	f000 fe25 	bl	80029aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d60:	bf00      	nop
 8001d62:	3720      	adds	r7, #32
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40003800 	.word	0x40003800
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40010c00 	.word	0x40010c00

08001d74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d84:	d113      	bne.n	8001dae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <HAL_TIM_Base_MspInit+0x44>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <HAL_TIM_Base_MspInit+0x44>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	61d3      	str	r3, [r2, #28]
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_TIM_Base_MspInit+0x44>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2102      	movs	r1, #2
 8001da2:	201c      	movs	r0, #28
 8001da4:	f000 fde5 	bl	8002972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001da8:	201c      	movs	r0, #28
 8001daa:	f000 fdfe 	bl	80029aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40021000 	.word	0x40021000

08001dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 0310 	add.w	r3, r7, #16
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a20      	ldr	r2, [pc, #128]	; (8001e58 <HAL_UART_MspInit+0x9c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d139      	bne.n	8001e50 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <HAL_UART_MspInit+0xa0>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	4a1e      	ldr	r2, [pc, #120]	; (8001e5c <HAL_UART_MspInit+0xa0>)
 8001de2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de6:	6193      	str	r3, [r2, #24]
 8001de8:	4b1c      	ldr	r3, [pc, #112]	; (8001e5c <HAL_UART_MspInit+0xa0>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df4:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <HAL_UART_MspInit+0xa0>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	4a18      	ldr	r2, [pc, #96]	; (8001e5c <HAL_UART_MspInit+0xa0>)
 8001dfa:	f043 0304 	orr.w	r3, r3, #4
 8001dfe:	6193      	str	r3, [r2, #24]
 8001e00:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <HAL_UART_MspInit+0xa0>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e16:	2303      	movs	r3, #3
 8001e18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1a:	f107 0310 	add.w	r3, r7, #16
 8001e1e:	4619      	mov	r1, r3
 8001e20:	480f      	ldr	r0, [pc, #60]	; (8001e60 <HAL_UART_MspInit+0xa4>)
 8001e22:	f000 fe8f 	bl	8002b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e34:	f107 0310 	add.w	r3, r7, #16
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4809      	ldr	r0, [pc, #36]	; (8001e60 <HAL_UART_MspInit+0xa4>)
 8001e3c:	f000 fe82 	bl	8002b44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2101      	movs	r1, #1
 8001e44:	2025      	movs	r0, #37	; 0x25
 8001e46:	f000 fd94 	bl	8002972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e4a:	2025      	movs	r0, #37	; 0x25
 8001e4c:	f000 fdad 	bl	80029aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e50:	bf00      	nop
 8001e52:	3720      	adds	r7, #32
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40013800 	.word	0x40013800
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40010800 	.word	0x40010800

08001e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <NMI_Handler+0x4>

08001e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6e:	e7fe      	b.n	8001e6e <HardFault_Handler+0x4>

08001e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <MemManage_Handler+0x4>

08001e76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e7a:	e7fe      	b.n	8001e7a <BusFault_Handler+0x4>

08001e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e80:	e7fe      	b.n	8001e80 <UsageFault_Handler+0x4>

08001e82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr

08001ea6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eaa:	f000 f95d 	bl	8002168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001eb8:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <ADC1_2_IRQHandler+0x10>)
 8001eba:	f000 fa79 	bl	80023b0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000208 	.word	0x20000208

08001ec8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <TIM2_IRQHandler+0x10>)
 8001ece:	f002 fae9 	bl	80044a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000290 	.word	0x20000290

08001edc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <SPI2_IRQHandler+0x10>)
 8001ee2:	f001 fe3b 	bl	8003b5c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000238 	.word	0x20000238

08001ef0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <USART1_IRQHandler+0x10>)
 8001ef6:	f002 ff25 	bl	8004d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	200002d8 	.word	0x200002d8

08001f04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
	return 1;
 8001f08:	2301      	movs	r3, #1
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr

08001f12 <_kill>:

int _kill(int pid, int sig)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f1c:	f003 fc7c 	bl	8005818 <__errno>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2216      	movs	r2, #22
 8001f24:	601a      	str	r2, [r3, #0]
	return -1;
 8001f26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <_exit>:

void _exit (int status)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f3a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ffe7 	bl	8001f12 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f44:	e7fe      	b.n	8001f44 <_exit+0x12>

08001f46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	e00a      	b.n	8001f6e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f58:	f3af 8000 	nop.w
 8001f5c:	4601      	mov	r1, r0
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	60ba      	str	r2, [r7, #8]
 8001f64:	b2ca      	uxtb	r2, r1
 8001f66:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	dbf0      	blt.n	8001f58 <_read+0x12>
	}

return len;
 8001f76:	687b      	ldr	r3, [r7, #4]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	e009      	b.n	8001fa6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	60ba      	str	r2, [r7, #8]
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	dbf1      	blt.n	8001f92 <_write+0x12>
	}
	return len;
 8001fae:	687b      	ldr	r3, [r7, #4]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <_close>:

int _close(int file)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	return -1;
 8001fc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr

08001fce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fde:	605a      	str	r2, [r3, #4]
	return 0;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr

08001fec <_isatty>:

int _isatty(int file)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	return 1;
 8001ff4:	2301      	movs	r3, #1
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr

08002000 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
	return 0;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002020:	4a14      	ldr	r2, [pc, #80]	; (8002074 <_sbrk+0x5c>)
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <_sbrk+0x60>)
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800202c:	4b13      	ldr	r3, [pc, #76]	; (800207c <_sbrk+0x64>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d102      	bne.n	800203a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002034:	4b11      	ldr	r3, [pc, #68]	; (800207c <_sbrk+0x64>)
 8002036:	4a12      	ldr	r2, [pc, #72]	; (8002080 <_sbrk+0x68>)
 8002038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800203a:	4b10      	ldr	r3, [pc, #64]	; (800207c <_sbrk+0x64>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	429a      	cmp	r2, r3
 8002046:	d207      	bcs.n	8002058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002048:	f003 fbe6 	bl	8005818 <__errno>
 800204c:	4603      	mov	r3, r0
 800204e:	220c      	movs	r2, #12
 8002050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002052:	f04f 33ff 	mov.w	r3, #4294967295
 8002056:	e009      	b.n	800206c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002058:	4b08      	ldr	r3, [pc, #32]	; (800207c <_sbrk+0x64>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800205e:	4b07      	ldr	r3, [pc, #28]	; (800207c <_sbrk+0x64>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	4a05      	ldr	r2, [pc, #20]	; (800207c <_sbrk+0x64>)
 8002068:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800206a:	68fb      	ldr	r3, [r7, #12]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20005000 	.word	0x20005000
 8002078:	00000400 	.word	0x00000400
 800207c:	2000041c 	.word	0x2000041c
 8002080:	20000438 	.word	0x20000438

08002084 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002090:	f7ff fff8 	bl	8002084 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002094:	480b      	ldr	r0, [pc, #44]	; (80020c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002096:	490c      	ldr	r1, [pc, #48]	; (80020c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002098:	4a0c      	ldr	r2, [pc, #48]	; (80020cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800209a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800209c:	e002      	b.n	80020a4 <LoopCopyDataInit>

0800209e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800209e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020a2:	3304      	adds	r3, #4

080020a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020a8:	d3f9      	bcc.n	800209e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020aa:	4a09      	ldr	r2, [pc, #36]	; (80020d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80020ac:	4c09      	ldr	r4, [pc, #36]	; (80020d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b0:	e001      	b.n	80020b6 <LoopFillZerobss>

080020b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b4:	3204      	adds	r2, #4

080020b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020b8:	d3fb      	bcc.n	80020b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ba:	f003 fbb3 	bl	8005824 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020be:	f7ff f983 	bl	80013c8 <main>
  bx lr
 80020c2:	4770      	bx	lr
  ldr r0, =_sdata
 80020c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80020cc:	08008ae4 	.word	0x08008ae4
  ldr r2, =_sbss
 80020d0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80020d4:	20000434 	.word	0x20000434

080020d8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020d8:	e7fe      	b.n	80020d8 <CAN1_RX1_IRQHandler>
	...

080020dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e0:	4b08      	ldr	r3, [pc, #32]	; (8002104 <HAL_Init+0x28>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a07      	ldr	r2, [pc, #28]	; (8002104 <HAL_Init+0x28>)
 80020e6:	f043 0310 	orr.w	r3, r3, #16
 80020ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ec:	2003      	movs	r0, #3
 80020ee:	f000 fc35 	bl	800295c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020f2:	200f      	movs	r0, #15
 80020f4:	f000 f808 	bl	8002108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020f8:	f7ff fd72 	bl	8001be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40022000 	.word	0x40022000

08002108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <HAL_InitTick+0x54>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b12      	ldr	r3, [pc, #72]	; (8002160 <HAL_InitTick+0x58>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4619      	mov	r1, r3
 800211a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800211e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002122:	fbb2 f3f3 	udiv	r3, r2, r3
 8002126:	4618      	mov	r0, r3
 8002128:	f000 fc4d 	bl	80029c6 <HAL_SYSTICK_Config>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e00e      	b.n	8002154 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b0f      	cmp	r3, #15
 800213a:	d80a      	bhi.n	8002152 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800213c:	2200      	movs	r2, #0
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	f04f 30ff 	mov.w	r0, #4294967295
 8002144:	f000 fc15 	bl	8002972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002148:	4a06      	ldr	r2, [pc, #24]	; (8002164 <HAL_InitTick+0x5c>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	e000      	b.n	8002154 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
}
 8002154:	4618      	mov	r0, r3
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000010 	.word	0x20000010
 8002160:	20000018 	.word	0x20000018
 8002164:	20000014 	.word	0x20000014

08002168 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_IncTick+0x1c>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	461a      	mov	r2, r3
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_IncTick+0x20>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4413      	add	r3, r2
 8002178:	4a03      	ldr	r2, [pc, #12]	; (8002188 <HAL_IncTick+0x20>)
 800217a:	6013      	str	r3, [r2, #0]
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	20000018 	.word	0x20000018
 8002188:	20000420 	.word	0x20000420

0800218c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return uwTick;
 8002190:	4b02      	ldr	r3, [pc, #8]	; (800219c <HAL_GetTick+0x10>)
 8002192:	681b      	ldr	r3, [r3, #0]
}
 8002194:	4618      	mov	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	20000420 	.word	0x20000420

080021a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a8:	f7ff fff0 	bl	800218c <HAL_GetTick>
 80021ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b8:	d005      	beq.n	80021c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ba:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <HAL_Delay+0x44>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4413      	add	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021c6:	bf00      	nop
 80021c8:	f7ff ffe0 	bl	800218c <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d8f7      	bhi.n	80021c8 <HAL_Delay+0x28>
  {
  }
}
 80021d8:	bf00      	nop
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000018 	.word	0x20000018

080021e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e0be      	b.n	8002388 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	2b00      	cmp	r3, #0
 8002216:	d109      	bne.n	800222c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff fd0c 	bl	8001c44 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 fa7f 	bl	8002730 <ADC_ConversionStop_Disable>
 8002232:	4603      	mov	r3, r0
 8002234:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b00      	cmp	r3, #0
 8002240:	f040 8099 	bne.w	8002376 <HAL_ADC_Init+0x18e>
 8002244:	7dfb      	ldrb	r3, [r7, #23]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f040 8095 	bne.w	8002376 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002250:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002254:	f023 0302 	bic.w	r3, r3, #2
 8002258:	f043 0202 	orr.w	r2, r3, #2
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002268:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7b1b      	ldrb	r3, [r3, #12]
 800226e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002270:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	4313      	orrs	r3, r2
 8002276:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002280:	d003      	beq.n	800228a <HAL_ADC_Init+0xa2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d102      	bne.n	8002290 <HAL_ADC_Init+0xa8>
 800228a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800228e:	e000      	b.n	8002292 <HAL_ADC_Init+0xaa>
 8002290:	2300      	movs	r3, #0
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	7d1b      	ldrb	r3, [r3, #20]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d119      	bne.n	80022d4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7b1b      	ldrb	r3, [r3, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d109      	bne.n	80022bc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	035a      	lsls	r2, r3, #13
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	e00b      	b.n	80022d4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	f043 0220 	orr.w	r2, r3, #32
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	f043 0201 	orr.w	r2, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	4b28      	ldr	r3, [pc, #160]	; (8002390 <HAL_ADC_Init+0x1a8>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	68b9      	ldr	r1, [r7, #8]
 80022f8:	430b      	orrs	r3, r1
 80022fa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002304:	d003      	beq.n	800230e <HAL_ADC_Init+0x126>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d104      	bne.n	8002318 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	3b01      	subs	r3, #1
 8002314:	051b      	lsls	r3, r3, #20
 8002316:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	430a      	orrs	r2, r1
 800232a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	4b18      	ldr	r3, [pc, #96]	; (8002394 <HAL_ADC_Init+0x1ac>)
 8002334:	4013      	ands	r3, r2
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	429a      	cmp	r2, r3
 800233a:	d10b      	bne.n	8002354 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	f023 0303 	bic.w	r3, r3, #3
 800234a:	f043 0201 	orr.w	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002352:	e018      	b.n	8002386 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002358:	f023 0312 	bic.w	r3, r3, #18
 800235c:	f043 0210 	orr.w	r2, r3, #16
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002368:	f043 0201 	orr.w	r2, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002374:	e007      	b.n	8002386 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237a:	f043 0210 	orr.w	r2, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002386:	7dfb      	ldrb	r3, [r7, #23]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	ffe1f7fd 	.word	0xffe1f7fd
 8002394:	ff1f0efe 	.word	0xff1f0efe

08002398 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f003 0320 	and.w	r3, r3, #32
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d03e      	beq.n	8002450 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d039      	beq.n	8002450 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d105      	bne.n	80023f4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80023fe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002402:	d11d      	bne.n	8002440 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002408:	2b00      	cmp	r3, #0
 800240a:	d119      	bne.n	8002440 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0220 	bic.w	r2, r2, #32
 800241a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d105      	bne.n	8002440 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	f043 0201 	orr.w	r2, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff fa1b 	bl	800187c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f06f 0212 	mvn.w	r2, #18
 800244e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002456:	2b00      	cmp	r3, #0
 8002458:	d04d      	beq.n	80024f6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	d048      	beq.n	80024f6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002468:	f003 0310 	and.w	r3, r3, #16
 800246c:	2b00      	cmp	r3, #0
 800246e:	d105      	bne.n	800247c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002486:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800248a:	d012      	beq.n	80024b2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002496:	2b00      	cmp	r3, #0
 8002498:	d125      	bne.n	80024e6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80024a4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80024a8:	d11d      	bne.n	80024e6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d119      	bne.n	80024e6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024c0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d105      	bne.n	80024e6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024de:	f043 0201 	orr.w	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f963 	bl	80027b2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 020c 	mvn.w	r2, #12
 80024f4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d012      	beq.n	8002526 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00d      	beq.n	8002526 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f809 	bl	800252e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f06f 0201 	mvn.w	r2, #1
 8002524:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x20>
 800255c:	2302      	movs	r3, #2
 800255e:	e0dc      	b.n	800271a <HAL_ADC_ConfigChannel+0x1da>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b06      	cmp	r3, #6
 800256e:	d81c      	bhi.n	80025aa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	3b05      	subs	r3, #5
 8002582:	221f      	movs	r2, #31
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	4019      	ands	r1, r3
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	6818      	ldr	r0, [r3, #0]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	3b05      	subs	r3, #5
 800259c:	fa00 f203 	lsl.w	r2, r0, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	635a      	str	r2, [r3, #52]	; 0x34
 80025a8:	e03c      	b.n	8002624 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b0c      	cmp	r3, #12
 80025b0:	d81c      	bhi.n	80025ec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	3b23      	subs	r3, #35	; 0x23
 80025c4:	221f      	movs	r2, #31
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	4019      	ands	r1, r3
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	3b23      	subs	r3, #35	; 0x23
 80025de:	fa00 f203 	lsl.w	r2, r0, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	631a      	str	r2, [r3, #48]	; 0x30
 80025ea:	e01b      	b.n	8002624 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	3b41      	subs	r3, #65	; 0x41
 80025fe:	221f      	movs	r2, #31
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	4019      	ands	r1, r3
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	3b41      	subs	r3, #65	; 0x41
 8002618:	fa00 f203 	lsl.w	r2, r0, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b09      	cmp	r3, #9
 800262a:	d91c      	bls.n	8002666 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68d9      	ldr	r1, [r3, #12]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4613      	mov	r3, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4413      	add	r3, r2
 800263c:	3b1e      	subs	r3, #30
 800263e:	2207      	movs	r2, #7
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	4019      	ands	r1, r3
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	6898      	ldr	r0, [r3, #8]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4613      	mov	r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	4413      	add	r3, r2
 8002656:	3b1e      	subs	r3, #30
 8002658:	fa00 f203 	lsl.w	r2, r0, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	60da      	str	r2, [r3, #12]
 8002664:	e019      	b.n	800269a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6919      	ldr	r1, [r3, #16]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4613      	mov	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4413      	add	r3, r2
 8002676:	2207      	movs	r2, #7
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	4019      	ands	r1, r3
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	6898      	ldr	r0, [r3, #8]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	fa00 f203 	lsl.w	r2, r0, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b10      	cmp	r3, #16
 80026a0:	d003      	beq.n	80026aa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026a6:	2b11      	cmp	r3, #17
 80026a8:	d132      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a1d      	ldr	r2, [pc, #116]	; (8002724 <HAL_ADC_ConfigChannel+0x1e4>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d125      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d126      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80026d0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	d11a      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <HAL_ADC_ConfigChannel+0x1e8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a13      	ldr	r2, [pc, #76]	; (800272c <HAL_ADC_ConfigChannel+0x1ec>)
 80026e0:	fba2 2303 	umull	r2, r3, r2, r3
 80026e4:	0c9a      	lsrs	r2, r3, #18
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026f0:	e002      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	3b01      	subs	r3, #1
 80026f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f9      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x1b2>
 80026fe:	e007      	b.n	8002710 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002704:	f043 0220 	orr.w	r2, r3, #32
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002718:	7bfb      	ldrb	r3, [r7, #15]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr
 8002724:	40012400 	.word	0x40012400
 8002728:	20000010 	.word	0x20000010
 800272c:	431bde83 	.word	0x431bde83

08002730 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b01      	cmp	r3, #1
 8002748:	d12e      	bne.n	80027a8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0201 	bic.w	r2, r2, #1
 8002758:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800275a:	f7ff fd17 	bl	800218c <HAL_GetTick>
 800275e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002760:	e01b      	b.n	800279a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002762:	f7ff fd13 	bl	800218c <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d914      	bls.n	800279a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b01      	cmp	r3, #1
 800277c:	d10d      	bne.n	800279a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	f043 0210 	orr.w	r2, r3, #16
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278e:	f043 0201 	orr.w	r2, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e007      	b.n	80027aa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d0dc      	beq.n	8002762 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <__NVIC_SetPriorityGrouping+0x44>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027e0:	4013      	ands	r3, r2
 80027e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027f6:	4a04      	ldr	r2, [pc, #16]	; (8002808 <__NVIC_SetPriorityGrouping+0x44>)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	60d3      	str	r3, [r2, #12]
}
 80027fc:	bf00      	nop
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002810:	4b04      	ldr	r3, [pc, #16]	; (8002824 <__NVIC_GetPriorityGrouping+0x18>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	0a1b      	lsrs	r3, r3, #8
 8002816:	f003 0307 	and.w	r3, r3, #7
}
 800281a:	4618      	mov	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	2b00      	cmp	r3, #0
 8002838:	db0b      	blt.n	8002852 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	f003 021f 	and.w	r2, r3, #31
 8002840:	4906      	ldr	r1, [pc, #24]	; (800285c <__NVIC_EnableIRQ+0x34>)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	2001      	movs	r0, #1
 800284a:	fa00 f202 	lsl.w	r2, r0, r2
 800284e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr
 800285c:	e000e100 	.word	0xe000e100

08002860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	6039      	str	r1, [r7, #0]
 800286a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800286c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002870:	2b00      	cmp	r3, #0
 8002872:	db0a      	blt.n	800288a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	b2da      	uxtb	r2, r3
 8002878:	490c      	ldr	r1, [pc, #48]	; (80028ac <__NVIC_SetPriority+0x4c>)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	0112      	lsls	r2, r2, #4
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	440b      	add	r3, r1
 8002884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002888:	e00a      	b.n	80028a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	b2da      	uxtb	r2, r3
 800288e:	4908      	ldr	r1, [pc, #32]	; (80028b0 <__NVIC_SetPriority+0x50>)
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	3b04      	subs	r3, #4
 8002898:	0112      	lsls	r2, r2, #4
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	440b      	add	r3, r1
 800289e:	761a      	strb	r2, [r3, #24]
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	e000e100 	.word	0xe000e100
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b089      	sub	sp, #36	; 0x24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f1c3 0307 	rsb	r3, r3, #7
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	bf28      	it	cs
 80028d2:	2304      	movcs	r3, #4
 80028d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3304      	adds	r3, #4
 80028da:	2b06      	cmp	r3, #6
 80028dc:	d902      	bls.n	80028e4 <NVIC_EncodePriority+0x30>
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3b03      	subs	r3, #3
 80028e2:	e000      	b.n	80028e6 <NVIC_EncodePriority+0x32>
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e8:	f04f 32ff 	mov.w	r2, #4294967295
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43da      	mvns	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	401a      	ands	r2, r3
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	fa01 f303 	lsl.w	r3, r1, r3
 8002906:	43d9      	mvns	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800290c:	4313      	orrs	r3, r2
         );
}
 800290e:	4618      	mov	r0, r3
 8002910:	3724      	adds	r7, #36	; 0x24
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3b01      	subs	r3, #1
 8002924:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002928:	d301      	bcc.n	800292e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800292a:	2301      	movs	r3, #1
 800292c:	e00f      	b.n	800294e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800292e:	4a0a      	ldr	r2, [pc, #40]	; (8002958 <SysTick_Config+0x40>)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3b01      	subs	r3, #1
 8002934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002936:	210f      	movs	r1, #15
 8002938:	f04f 30ff 	mov.w	r0, #4294967295
 800293c:	f7ff ff90 	bl	8002860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002940:	4b05      	ldr	r3, [pc, #20]	; (8002958 <SysTick_Config+0x40>)
 8002942:	2200      	movs	r2, #0
 8002944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002946:	4b04      	ldr	r3, [pc, #16]	; (8002958 <SysTick_Config+0x40>)
 8002948:	2207      	movs	r2, #7
 800294a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	e000e010 	.word	0xe000e010

0800295c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7ff ff2d 	bl	80027c4 <__NVIC_SetPriorityGrouping>
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002972:	b580      	push	{r7, lr}
 8002974:	b086      	sub	sp, #24
 8002976:	af00      	add	r7, sp, #0
 8002978:	4603      	mov	r3, r0
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	607a      	str	r2, [r7, #4]
 800297e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002980:	2300      	movs	r3, #0
 8002982:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002984:	f7ff ff42 	bl	800280c <__NVIC_GetPriorityGrouping>
 8002988:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	6978      	ldr	r0, [r7, #20]
 8002990:	f7ff ff90 	bl	80028b4 <NVIC_EncodePriority>
 8002994:	4602      	mov	r2, r0
 8002996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800299a:	4611      	mov	r1, r2
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ff5f 	bl	8002860 <__NVIC_SetPriority>
}
 80029a2:	bf00      	nop
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	4603      	mov	r3, r0
 80029b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff ff35 	bl	8002828 <__NVIC_EnableIRQ>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7ff ffa2 	bl	8002918 <SysTick_Config>
 80029d4:	4603      	mov	r3, r0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029de:	b480      	push	{r7}
 80029e0:	b085      	sub	sp, #20
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d008      	beq.n	8002a08 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2204      	movs	r2, #4
 80029fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e020      	b.n	8002a4a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 020e 	bic.w	r2, r2, #14
 8002a16:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a30:	2101      	movs	r1, #1
 8002a32:	fa01 f202 	lsl.w	r2, r1, r2
 8002a36:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d005      	beq.n	8002a78 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2204      	movs	r2, #4
 8002a70:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	73fb      	strb	r3, [r7, #15]
 8002a76:	e051      	b.n	8002b1c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 020e 	bic.w	r2, r2, #14
 8002a86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0201 	bic.w	r2, r2, #1
 8002a96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a22      	ldr	r2, [pc, #136]	; (8002b28 <HAL_DMA_Abort_IT+0xd4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d029      	beq.n	8002af6 <HAL_DMA_Abort_IT+0xa2>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a21      	ldr	r2, [pc, #132]	; (8002b2c <HAL_DMA_Abort_IT+0xd8>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d022      	beq.n	8002af2 <HAL_DMA_Abort_IT+0x9e>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1f      	ldr	r2, [pc, #124]	; (8002b30 <HAL_DMA_Abort_IT+0xdc>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d01a      	beq.n	8002aec <HAL_DMA_Abort_IT+0x98>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1e      	ldr	r2, [pc, #120]	; (8002b34 <HAL_DMA_Abort_IT+0xe0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d012      	beq.n	8002ae6 <HAL_DMA_Abort_IT+0x92>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a1c      	ldr	r2, [pc, #112]	; (8002b38 <HAL_DMA_Abort_IT+0xe4>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_DMA_Abort_IT+0x8c>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a1b      	ldr	r2, [pc, #108]	; (8002b3c <HAL_DMA_Abort_IT+0xe8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d102      	bne.n	8002ada <HAL_DMA_Abort_IT+0x86>
 8002ad4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ad8:	e00e      	b.n	8002af8 <HAL_DMA_Abort_IT+0xa4>
 8002ada:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ade:	e00b      	b.n	8002af8 <HAL_DMA_Abort_IT+0xa4>
 8002ae0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ae4:	e008      	b.n	8002af8 <HAL_DMA_Abort_IT+0xa4>
 8002ae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aea:	e005      	b.n	8002af8 <HAL_DMA_Abort_IT+0xa4>
 8002aec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002af0:	e002      	b.n	8002af8 <HAL_DMA_Abort_IT+0xa4>
 8002af2:	2310      	movs	r3, #16
 8002af4:	e000      	b.n	8002af8 <HAL_DMA_Abort_IT+0xa4>
 8002af6:	2301      	movs	r3, #1
 8002af8:	4a11      	ldr	r2, [pc, #68]	; (8002b40 <HAL_DMA_Abort_IT+0xec>)
 8002afa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	4798      	blx	r3
    } 
  }
  return status;
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40020008 	.word	0x40020008
 8002b2c:	4002001c 	.word	0x4002001c
 8002b30:	40020030 	.word	0x40020030
 8002b34:	40020044 	.word	0x40020044
 8002b38:	40020058 	.word	0x40020058
 8002b3c:	4002006c 	.word	0x4002006c
 8002b40:	40020000 	.word	0x40020000

08002b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b08b      	sub	sp, #44	; 0x2c
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b52:	2300      	movs	r3, #0
 8002b54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b56:	e169      	b.n	8002e2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b58:	2201      	movs	r2, #1
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	f040 8158 	bne.w	8002e26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	4a9a      	ldr	r2, [pc, #616]	; (8002de4 <HAL_GPIO_Init+0x2a0>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d05e      	beq.n	8002c3e <HAL_GPIO_Init+0xfa>
 8002b80:	4a98      	ldr	r2, [pc, #608]	; (8002de4 <HAL_GPIO_Init+0x2a0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d875      	bhi.n	8002c72 <HAL_GPIO_Init+0x12e>
 8002b86:	4a98      	ldr	r2, [pc, #608]	; (8002de8 <HAL_GPIO_Init+0x2a4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d058      	beq.n	8002c3e <HAL_GPIO_Init+0xfa>
 8002b8c:	4a96      	ldr	r2, [pc, #600]	; (8002de8 <HAL_GPIO_Init+0x2a4>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d86f      	bhi.n	8002c72 <HAL_GPIO_Init+0x12e>
 8002b92:	4a96      	ldr	r2, [pc, #600]	; (8002dec <HAL_GPIO_Init+0x2a8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d052      	beq.n	8002c3e <HAL_GPIO_Init+0xfa>
 8002b98:	4a94      	ldr	r2, [pc, #592]	; (8002dec <HAL_GPIO_Init+0x2a8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d869      	bhi.n	8002c72 <HAL_GPIO_Init+0x12e>
 8002b9e:	4a94      	ldr	r2, [pc, #592]	; (8002df0 <HAL_GPIO_Init+0x2ac>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d04c      	beq.n	8002c3e <HAL_GPIO_Init+0xfa>
 8002ba4:	4a92      	ldr	r2, [pc, #584]	; (8002df0 <HAL_GPIO_Init+0x2ac>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d863      	bhi.n	8002c72 <HAL_GPIO_Init+0x12e>
 8002baa:	4a92      	ldr	r2, [pc, #584]	; (8002df4 <HAL_GPIO_Init+0x2b0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d046      	beq.n	8002c3e <HAL_GPIO_Init+0xfa>
 8002bb0:	4a90      	ldr	r2, [pc, #576]	; (8002df4 <HAL_GPIO_Init+0x2b0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d85d      	bhi.n	8002c72 <HAL_GPIO_Init+0x12e>
 8002bb6:	2b12      	cmp	r3, #18
 8002bb8:	d82a      	bhi.n	8002c10 <HAL_GPIO_Init+0xcc>
 8002bba:	2b12      	cmp	r3, #18
 8002bbc:	d859      	bhi.n	8002c72 <HAL_GPIO_Init+0x12e>
 8002bbe:	a201      	add	r2, pc, #4	; (adr r2, 8002bc4 <HAL_GPIO_Init+0x80>)
 8002bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc4:	08002c3f 	.word	0x08002c3f
 8002bc8:	08002c19 	.word	0x08002c19
 8002bcc:	08002c2b 	.word	0x08002c2b
 8002bd0:	08002c6d 	.word	0x08002c6d
 8002bd4:	08002c73 	.word	0x08002c73
 8002bd8:	08002c73 	.word	0x08002c73
 8002bdc:	08002c73 	.word	0x08002c73
 8002be0:	08002c73 	.word	0x08002c73
 8002be4:	08002c73 	.word	0x08002c73
 8002be8:	08002c73 	.word	0x08002c73
 8002bec:	08002c73 	.word	0x08002c73
 8002bf0:	08002c73 	.word	0x08002c73
 8002bf4:	08002c73 	.word	0x08002c73
 8002bf8:	08002c73 	.word	0x08002c73
 8002bfc:	08002c73 	.word	0x08002c73
 8002c00:	08002c73 	.word	0x08002c73
 8002c04:	08002c73 	.word	0x08002c73
 8002c08:	08002c21 	.word	0x08002c21
 8002c0c:	08002c35 	.word	0x08002c35
 8002c10:	4a79      	ldr	r2, [pc, #484]	; (8002df8 <HAL_GPIO_Init+0x2b4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d013      	beq.n	8002c3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c16:	e02c      	b.n	8002c72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	623b      	str	r3, [r7, #32]
          break;
 8002c1e:	e029      	b.n	8002c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	3304      	adds	r3, #4
 8002c26:	623b      	str	r3, [r7, #32]
          break;
 8002c28:	e024      	b.n	8002c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	3308      	adds	r3, #8
 8002c30:	623b      	str	r3, [r7, #32]
          break;
 8002c32:	e01f      	b.n	8002c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	330c      	adds	r3, #12
 8002c3a:	623b      	str	r3, [r7, #32]
          break;
 8002c3c:	e01a      	b.n	8002c74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d102      	bne.n	8002c4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c46:	2304      	movs	r3, #4
 8002c48:	623b      	str	r3, [r7, #32]
          break;
 8002c4a:	e013      	b.n	8002c74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d105      	bne.n	8002c60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c54:	2308      	movs	r3, #8
 8002c56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69fa      	ldr	r2, [r7, #28]
 8002c5c:	611a      	str	r2, [r3, #16]
          break;
 8002c5e:	e009      	b.n	8002c74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c60:	2308      	movs	r3, #8
 8002c62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69fa      	ldr	r2, [r7, #28]
 8002c68:	615a      	str	r2, [r3, #20]
          break;
 8002c6a:	e003      	b.n	8002c74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	623b      	str	r3, [r7, #32]
          break;
 8002c70:	e000      	b.n	8002c74 <HAL_GPIO_Init+0x130>
          break;
 8002c72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	2bff      	cmp	r3, #255	; 0xff
 8002c78:	d801      	bhi.n	8002c7e <HAL_GPIO_Init+0x13a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	e001      	b.n	8002c82 <HAL_GPIO_Init+0x13e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3304      	adds	r3, #4
 8002c82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	2bff      	cmp	r3, #255	; 0xff
 8002c88:	d802      	bhi.n	8002c90 <HAL_GPIO_Init+0x14c>
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	e002      	b.n	8002c96 <HAL_GPIO_Init+0x152>
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	3b08      	subs	r3, #8
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	210f      	movs	r1, #15
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	401a      	ands	r2, r3
 8002ca8:	6a39      	ldr	r1, [r7, #32]
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 80b1 	beq.w	8002e26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002cc4:	4b4d      	ldr	r3, [pc, #308]	; (8002dfc <HAL_GPIO_Init+0x2b8>)
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	4a4c      	ldr	r2, [pc, #304]	; (8002dfc <HAL_GPIO_Init+0x2b8>)
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	6193      	str	r3, [r2, #24]
 8002cd0:	4b4a      	ldr	r3, [pc, #296]	; (8002dfc <HAL_GPIO_Init+0x2b8>)
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002cdc:	4a48      	ldr	r2, [pc, #288]	; (8002e00 <HAL_GPIO_Init+0x2bc>)
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	089b      	lsrs	r3, r3, #2
 8002ce2:	3302      	adds	r3, #2
 8002ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	f003 0303 	and.w	r3, r3, #3
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	220f      	movs	r2, #15
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a40      	ldr	r2, [pc, #256]	; (8002e04 <HAL_GPIO_Init+0x2c0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d013      	beq.n	8002d30 <HAL_GPIO_Init+0x1ec>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a3f      	ldr	r2, [pc, #252]	; (8002e08 <HAL_GPIO_Init+0x2c4>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d00d      	beq.n	8002d2c <HAL_GPIO_Init+0x1e8>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a3e      	ldr	r2, [pc, #248]	; (8002e0c <HAL_GPIO_Init+0x2c8>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d007      	beq.n	8002d28 <HAL_GPIO_Init+0x1e4>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a3d      	ldr	r2, [pc, #244]	; (8002e10 <HAL_GPIO_Init+0x2cc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d101      	bne.n	8002d24 <HAL_GPIO_Init+0x1e0>
 8002d20:	2303      	movs	r3, #3
 8002d22:	e006      	b.n	8002d32 <HAL_GPIO_Init+0x1ee>
 8002d24:	2304      	movs	r3, #4
 8002d26:	e004      	b.n	8002d32 <HAL_GPIO_Init+0x1ee>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e002      	b.n	8002d32 <HAL_GPIO_Init+0x1ee>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e000      	b.n	8002d32 <HAL_GPIO_Init+0x1ee>
 8002d30:	2300      	movs	r3, #0
 8002d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d34:	f002 0203 	and.w	r2, r2, #3
 8002d38:	0092      	lsls	r2, r2, #2
 8002d3a:	4093      	lsls	r3, r2
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d42:	492f      	ldr	r1, [pc, #188]	; (8002e00 <HAL_GPIO_Init+0x2bc>)
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	089b      	lsrs	r3, r3, #2
 8002d48:	3302      	adds	r3, #2
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d006      	beq.n	8002d6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d5c:	4b2d      	ldr	r3, [pc, #180]	; (8002e14 <HAL_GPIO_Init+0x2d0>)
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	492c      	ldr	r1, [pc, #176]	; (8002e14 <HAL_GPIO_Init+0x2d0>)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	608b      	str	r3, [r1, #8]
 8002d68:	e006      	b.n	8002d78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d6a:	4b2a      	ldr	r3, [pc, #168]	; (8002e14 <HAL_GPIO_Init+0x2d0>)
 8002d6c:	689a      	ldr	r2, [r3, #8]
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	43db      	mvns	r3, r3
 8002d72:	4928      	ldr	r1, [pc, #160]	; (8002e14 <HAL_GPIO_Init+0x2d0>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d006      	beq.n	8002d92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d84:	4b23      	ldr	r3, [pc, #140]	; (8002e14 <HAL_GPIO_Init+0x2d0>)
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	4922      	ldr	r1, [pc, #136]	; (8002e14 <HAL_GPIO_Init+0x2d0>)
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	60cb      	str	r3, [r1, #12]
 8002d90:	e006      	b.n	8002da0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d92:	4b20      	ldr	r3, [pc, #128]	; (8002e14 <HAL_GPIO_Init+0x2d0>)
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	491e      	ldr	r1, [pc, #120]	; (8002e14 <HAL_GPIO_Init+0x2d0>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d006      	beq.n	8002dba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002dac:	4b19      	ldr	r3, [pc, #100]	; (8002e14 <HAL_GPIO_Init+0x2d0>)
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	4918      	ldr	r1, [pc, #96]	; (8002e14 <HAL_GPIO_Init+0x2d0>)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	604b      	str	r3, [r1, #4]
 8002db8:	e006      	b.n	8002dc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002dba:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <HAL_GPIO_Init+0x2d0>)
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	4914      	ldr	r1, [pc, #80]	; (8002e14 <HAL_GPIO_Init+0x2d0>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d021      	beq.n	8002e18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002dd4:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <HAL_GPIO_Init+0x2d0>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	490e      	ldr	r1, [pc, #56]	; (8002e14 <HAL_GPIO_Init+0x2d0>)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	600b      	str	r3, [r1, #0]
 8002de0:	e021      	b.n	8002e26 <HAL_GPIO_Init+0x2e2>
 8002de2:	bf00      	nop
 8002de4:	10320000 	.word	0x10320000
 8002de8:	10310000 	.word	0x10310000
 8002dec:	10220000 	.word	0x10220000
 8002df0:	10210000 	.word	0x10210000
 8002df4:	10120000 	.word	0x10120000
 8002df8:	10110000 	.word	0x10110000
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40010000 	.word	0x40010000
 8002e04:	40010800 	.word	0x40010800
 8002e08:	40010c00 	.word	0x40010c00
 8002e0c:	40011000 	.word	0x40011000
 8002e10:	40011400 	.word	0x40011400
 8002e14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_GPIO_Init+0x304>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	4909      	ldr	r1, [pc, #36]	; (8002e48 <HAL_GPIO_Init+0x304>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	3301      	adds	r3, #1
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	fa22 f303 	lsr.w	r3, r2, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f47f ae8e 	bne.w	8002b58 <HAL_GPIO_Init+0x14>
  }
}
 8002e3c:	bf00      	nop
 8002e3e:	bf00      	nop
 8002e40:	372c      	adds	r7, #44	; 0x2c
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr
 8002e48:	40010400 	.word	0x40010400

08002e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	807b      	strh	r3, [r7, #2]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e5c:	787b      	ldrb	r3, [r7, #1]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e62:	887a      	ldrh	r2, [r7, #2]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e68:	e003      	b.n	8002e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e6a:	887b      	ldrh	r3, [r7, #2]
 8002e6c:	041a      	lsls	r2, r3, #16
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	611a      	str	r2, [r3, #16]
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e272      	b.n	8003374 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 8087 	beq.w	8002faa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e9c:	4b92      	ldr	r3, [pc, #584]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 030c 	and.w	r3, r3, #12
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d00c      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ea8:	4b8f      	ldr	r3, [pc, #572]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 030c 	and.w	r3, r3, #12
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d112      	bne.n	8002eda <HAL_RCC_OscConfig+0x5e>
 8002eb4:	4b8c      	ldr	r3, [pc, #560]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec0:	d10b      	bne.n	8002eda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec2:	4b89      	ldr	r3, [pc, #548]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d06c      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x12c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d168      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e24c      	b.n	8003374 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee2:	d106      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x76>
 8002ee4:	4b80      	ldr	r3, [pc, #512]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a7f      	ldr	r2, [pc, #508]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	e02e      	b.n	8002f50 <HAL_RCC_OscConfig+0xd4>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x98>
 8002efa:	4b7b      	ldr	r3, [pc, #492]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a7a      	ldr	r2, [pc, #488]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	4b78      	ldr	r3, [pc, #480]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a77      	ldr	r2, [pc, #476]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e01d      	b.n	8002f50 <HAL_RCC_OscConfig+0xd4>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f1c:	d10c      	bne.n	8002f38 <HAL_RCC_OscConfig+0xbc>
 8002f1e:	4b72      	ldr	r3, [pc, #456]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a71      	ldr	r2, [pc, #452]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	4b6f      	ldr	r3, [pc, #444]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a6e      	ldr	r2, [pc, #440]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	e00b      	b.n	8002f50 <HAL_RCC_OscConfig+0xd4>
 8002f38:	4b6b      	ldr	r3, [pc, #428]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a6a      	ldr	r2, [pc, #424]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	4b68      	ldr	r3, [pc, #416]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a67      	ldr	r2, [pc, #412]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d013      	beq.n	8002f80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f58:	f7ff f918 	bl	800218c <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f60:	f7ff f914 	bl	800218c <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b64      	cmp	r3, #100	; 0x64
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e200      	b.n	8003374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f72:	4b5d      	ldr	r3, [pc, #372]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0xe4>
 8002f7e:	e014      	b.n	8002faa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f80:	f7ff f904 	bl	800218c <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f88:	f7ff f900 	bl	800218c <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	; 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e1ec      	b.n	8003374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9a:	4b53      	ldr	r3, [pc, #332]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x10c>
 8002fa6:	e000      	b.n	8002faa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d063      	beq.n	800307e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fb6:	4b4c      	ldr	r3, [pc, #304]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00b      	beq.n	8002fda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fc2:	4b49      	ldr	r3, [pc, #292]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d11c      	bne.n	8003008 <HAL_RCC_OscConfig+0x18c>
 8002fce:	4b46      	ldr	r3, [pc, #280]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d116      	bne.n	8003008 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fda:	4b43      	ldr	r3, [pc, #268]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d005      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x176>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d001      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e1c0      	b.n	8003374 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff2:	4b3d      	ldr	r3, [pc, #244]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4939      	ldr	r1, [pc, #228]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8003002:	4313      	orrs	r3, r2
 8003004:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003006:	e03a      	b.n	800307e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d020      	beq.n	8003052 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003010:	4b36      	ldr	r3, [pc, #216]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8003012:	2201      	movs	r2, #1
 8003014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003016:	f7ff f8b9 	bl	800218c <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800301e:	f7ff f8b5 	bl	800218c <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e1a1      	b.n	8003374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003030:	4b2d      	ldr	r3, [pc, #180]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0f0      	beq.n	800301e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303c:	4b2a      	ldr	r3, [pc, #168]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4927      	ldr	r1, [pc, #156]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 800304c:	4313      	orrs	r3, r2
 800304e:	600b      	str	r3, [r1, #0]
 8003050:	e015      	b.n	800307e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003052:	4b26      	ldr	r3, [pc, #152]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003058:	f7ff f898 	bl	800218c <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003060:	f7ff f894 	bl	800218c <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e180      	b.n	8003374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003072:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d03a      	beq.n	8003100 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d019      	beq.n	80030c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003092:	4b17      	ldr	r3, [pc, #92]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8003094:	2201      	movs	r2, #1
 8003096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003098:	f7ff f878 	bl	800218c <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a0:	f7ff f874 	bl	800218c <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e160      	b.n	8003374 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b2:	4b0d      	ldr	r3, [pc, #52]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030be:	2001      	movs	r0, #1
 80030c0:	f000 face 	bl	8003660 <RCC_Delay>
 80030c4:	e01c      	b.n	8003100 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c6:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030cc:	f7ff f85e 	bl	800218c <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d2:	e00f      	b.n	80030f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d4:	f7ff f85a 	bl	800218c <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d908      	bls.n	80030f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e146      	b.n	8003374 <HAL_RCC_OscConfig+0x4f8>
 80030e6:	bf00      	nop
 80030e8:	40021000 	.word	0x40021000
 80030ec:	42420000 	.word	0x42420000
 80030f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f4:	4b92      	ldr	r3, [pc, #584]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1e9      	bne.n	80030d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 80a6 	beq.w	800325a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800310e:	2300      	movs	r3, #0
 8003110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003112:	4b8b      	ldr	r3, [pc, #556]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10d      	bne.n	800313a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800311e:	4b88      	ldr	r3, [pc, #544]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	4a87      	ldr	r2, [pc, #540]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 8003124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003128:	61d3      	str	r3, [r2, #28]
 800312a:	4b85      	ldr	r3, [pc, #532]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003132:	60bb      	str	r3, [r7, #8]
 8003134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003136:	2301      	movs	r3, #1
 8003138:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313a:	4b82      	ldr	r3, [pc, #520]	; (8003344 <HAL_RCC_OscConfig+0x4c8>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003142:	2b00      	cmp	r3, #0
 8003144:	d118      	bne.n	8003178 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003146:	4b7f      	ldr	r3, [pc, #508]	; (8003344 <HAL_RCC_OscConfig+0x4c8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a7e      	ldr	r2, [pc, #504]	; (8003344 <HAL_RCC_OscConfig+0x4c8>)
 800314c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003152:	f7ff f81b 	bl	800218c <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800315a:	f7ff f817 	bl	800218c <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b64      	cmp	r3, #100	; 0x64
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e103      	b.n	8003374 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316c:	4b75      	ldr	r3, [pc, #468]	; (8003344 <HAL_RCC_OscConfig+0x4c8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0f0      	beq.n	800315a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d106      	bne.n	800318e <HAL_RCC_OscConfig+0x312>
 8003180:	4b6f      	ldr	r3, [pc, #444]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	4a6e      	ldr	r2, [pc, #440]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 8003186:	f043 0301 	orr.w	r3, r3, #1
 800318a:	6213      	str	r3, [r2, #32]
 800318c:	e02d      	b.n	80031ea <HAL_RCC_OscConfig+0x36e>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10c      	bne.n	80031b0 <HAL_RCC_OscConfig+0x334>
 8003196:	4b6a      	ldr	r3, [pc, #424]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	4a69      	ldr	r2, [pc, #420]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 800319c:	f023 0301 	bic.w	r3, r3, #1
 80031a0:	6213      	str	r3, [r2, #32]
 80031a2:	4b67      	ldr	r3, [pc, #412]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	4a66      	ldr	r2, [pc, #408]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	f023 0304 	bic.w	r3, r3, #4
 80031ac:	6213      	str	r3, [r2, #32]
 80031ae:	e01c      	b.n	80031ea <HAL_RCC_OscConfig+0x36e>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	2b05      	cmp	r3, #5
 80031b6:	d10c      	bne.n	80031d2 <HAL_RCC_OscConfig+0x356>
 80031b8:	4b61      	ldr	r3, [pc, #388]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	4a60      	ldr	r2, [pc, #384]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 80031be:	f043 0304 	orr.w	r3, r3, #4
 80031c2:	6213      	str	r3, [r2, #32]
 80031c4:	4b5e      	ldr	r3, [pc, #376]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	4a5d      	ldr	r2, [pc, #372]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	6213      	str	r3, [r2, #32]
 80031d0:	e00b      	b.n	80031ea <HAL_RCC_OscConfig+0x36e>
 80031d2:	4b5b      	ldr	r3, [pc, #364]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	4a5a      	ldr	r2, [pc, #360]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 80031d8:	f023 0301 	bic.w	r3, r3, #1
 80031dc:	6213      	str	r3, [r2, #32]
 80031de:	4b58      	ldr	r3, [pc, #352]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	4a57      	ldr	r2, [pc, #348]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 80031e4:	f023 0304 	bic.w	r3, r3, #4
 80031e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d015      	beq.n	800321e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f2:	f7fe ffcb 	bl	800218c <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f8:	e00a      	b.n	8003210 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fa:	f7fe ffc7 	bl	800218c <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	f241 3288 	movw	r2, #5000	; 0x1388
 8003208:	4293      	cmp	r3, r2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e0b1      	b.n	8003374 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003210:	4b4b      	ldr	r3, [pc, #300]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0ee      	beq.n	80031fa <HAL_RCC_OscConfig+0x37e>
 800321c:	e014      	b.n	8003248 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321e:	f7fe ffb5 	bl	800218c <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003224:	e00a      	b.n	800323c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003226:	f7fe ffb1 	bl	800218c <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	f241 3288 	movw	r2, #5000	; 0x1388
 8003234:	4293      	cmp	r3, r2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e09b      	b.n	8003374 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800323c:	4b40      	ldr	r3, [pc, #256]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1ee      	bne.n	8003226 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003248:	7dfb      	ldrb	r3, [r7, #23]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d105      	bne.n	800325a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800324e:	4b3c      	ldr	r3, [pc, #240]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	4a3b      	ldr	r2, [pc, #236]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 8003254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003258:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 8087 	beq.w	8003372 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003264:	4b36      	ldr	r3, [pc, #216]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 030c 	and.w	r3, r3, #12
 800326c:	2b08      	cmp	r3, #8
 800326e:	d061      	beq.n	8003334 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d146      	bne.n	8003306 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003278:	4b33      	ldr	r3, [pc, #204]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327e:	f7fe ff85 	bl	800218c <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003286:	f7fe ff81 	bl	800218c <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e06d      	b.n	8003374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003298:	4b29      	ldr	r3, [pc, #164]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f0      	bne.n	8003286 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ac:	d108      	bne.n	80032c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032ae:	4b24      	ldr	r3, [pc, #144]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	4921      	ldr	r1, [pc, #132]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032c0:	4b1f      	ldr	r3, [pc, #124]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a19      	ldr	r1, [r3, #32]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	430b      	orrs	r3, r1
 80032d2:	491b      	ldr	r1, [pc, #108]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d8:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 80032da:	2201      	movs	r2, #1
 80032dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032de:	f7fe ff55 	bl	800218c <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e6:	f7fe ff51 	bl	800218c <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e03d      	b.n	8003374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0f0      	beq.n	80032e6 <HAL_RCC_OscConfig+0x46a>
 8003304:	e035      	b.n	8003372 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330c:	f7fe ff3e 	bl	800218c <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003314:	f7fe ff3a 	bl	800218c <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e026      	b.n	8003374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003326:	4b06      	ldr	r3, [pc, #24]	; (8003340 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x498>
 8003332:	e01e      	b.n	8003372 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d107      	bne.n	800334c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e019      	b.n	8003374 <HAL_RCC_OscConfig+0x4f8>
 8003340:	40021000 	.word	0x40021000
 8003344:	40007000 	.word	0x40007000
 8003348:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_RCC_OscConfig+0x500>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	429a      	cmp	r2, r3
 800335e:	d106      	bne.n	800336e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336a:	429a      	cmp	r2, r3
 800336c:	d001      	beq.n	8003372 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40021000 	.word	0x40021000

08003380 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e0d0      	b.n	8003536 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003394:	4b6a      	ldr	r3, [pc, #424]	; (8003540 <HAL_RCC_ClockConfig+0x1c0>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d910      	bls.n	80033c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a2:	4b67      	ldr	r3, [pc, #412]	; (8003540 <HAL_RCC_ClockConfig+0x1c0>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 0207 	bic.w	r2, r3, #7
 80033aa:	4965      	ldr	r1, [pc, #404]	; (8003540 <HAL_RCC_ClockConfig+0x1c0>)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b2:	4b63      	ldr	r3, [pc, #396]	; (8003540 <HAL_RCC_ClockConfig+0x1c0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0b8      	b.n	8003536 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d020      	beq.n	8003412 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033dc:	4b59      	ldr	r3, [pc, #356]	; (8003544 <HAL_RCC_ClockConfig+0x1c4>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4a58      	ldr	r2, [pc, #352]	; (8003544 <HAL_RCC_ClockConfig+0x1c4>)
 80033e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033f4:	4b53      	ldr	r3, [pc, #332]	; (8003544 <HAL_RCC_ClockConfig+0x1c4>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	4a52      	ldr	r2, [pc, #328]	; (8003544 <HAL_RCC_ClockConfig+0x1c4>)
 80033fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003400:	4b50      	ldr	r3, [pc, #320]	; (8003544 <HAL_RCC_ClockConfig+0x1c4>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	494d      	ldr	r1, [pc, #308]	; (8003544 <HAL_RCC_ClockConfig+0x1c4>)
 800340e:	4313      	orrs	r3, r2
 8003410:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d040      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d107      	bne.n	8003436 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003426:	4b47      	ldr	r3, [pc, #284]	; (8003544 <HAL_RCC_ClockConfig+0x1c4>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d115      	bne.n	800345e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e07f      	b.n	8003536 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d107      	bne.n	800344e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343e:	4b41      	ldr	r3, [pc, #260]	; (8003544 <HAL_RCC_ClockConfig+0x1c4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d109      	bne.n	800345e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e073      	b.n	8003536 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344e:	4b3d      	ldr	r3, [pc, #244]	; (8003544 <HAL_RCC_ClockConfig+0x1c4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e06b      	b.n	8003536 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800345e:	4b39      	ldr	r3, [pc, #228]	; (8003544 <HAL_RCC_ClockConfig+0x1c4>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f023 0203 	bic.w	r2, r3, #3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4936      	ldr	r1, [pc, #216]	; (8003544 <HAL_RCC_ClockConfig+0x1c4>)
 800346c:	4313      	orrs	r3, r2
 800346e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003470:	f7fe fe8c 	bl	800218c <HAL_GetTick>
 8003474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003476:	e00a      	b.n	800348e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003478:	f7fe fe88 	bl	800218c <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	f241 3288 	movw	r2, #5000	; 0x1388
 8003486:	4293      	cmp	r3, r2
 8003488:	d901      	bls.n	800348e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e053      	b.n	8003536 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348e:	4b2d      	ldr	r3, [pc, #180]	; (8003544 <HAL_RCC_ClockConfig+0x1c4>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 020c 	and.w	r2, r3, #12
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	429a      	cmp	r2, r3
 800349e:	d1eb      	bne.n	8003478 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034a0:	4b27      	ldr	r3, [pc, #156]	; (8003540 <HAL_RCC_ClockConfig+0x1c0>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d210      	bcs.n	80034d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ae:	4b24      	ldr	r3, [pc, #144]	; (8003540 <HAL_RCC_ClockConfig+0x1c0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f023 0207 	bic.w	r2, r3, #7
 80034b6:	4922      	ldr	r1, [pc, #136]	; (8003540 <HAL_RCC_ClockConfig+0x1c0>)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034be:	4b20      	ldr	r3, [pc, #128]	; (8003540 <HAL_RCC_ClockConfig+0x1c0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e032      	b.n	8003536 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d008      	beq.n	80034ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034dc:	4b19      	ldr	r3, [pc, #100]	; (8003544 <HAL_RCC_ClockConfig+0x1c4>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	4916      	ldr	r1, [pc, #88]	; (8003544 <HAL_RCC_ClockConfig+0x1c4>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d009      	beq.n	800350e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034fa:	4b12      	ldr	r3, [pc, #72]	; (8003544 <HAL_RCC_ClockConfig+0x1c4>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	490e      	ldr	r1, [pc, #56]	; (8003544 <HAL_RCC_ClockConfig+0x1c4>)
 800350a:	4313      	orrs	r3, r2
 800350c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800350e:	f000 f821 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8003512:	4602      	mov	r2, r0
 8003514:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <HAL_RCC_ClockConfig+0x1c4>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	091b      	lsrs	r3, r3, #4
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	490a      	ldr	r1, [pc, #40]	; (8003548 <HAL_RCC_ClockConfig+0x1c8>)
 8003520:	5ccb      	ldrb	r3, [r1, r3]
 8003522:	fa22 f303 	lsr.w	r3, r2, r3
 8003526:	4a09      	ldr	r2, [pc, #36]	; (800354c <HAL_RCC_ClockConfig+0x1cc>)
 8003528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800352a:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_RCC_ClockConfig+0x1d0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7fe fdea 	bl	8002108 <HAL_InitTick>

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40022000 	.word	0x40022000
 8003544:	40021000 	.word	0x40021000
 8003548:	080086d8 	.word	0x080086d8
 800354c:	20000010 	.word	0x20000010
 8003550:	20000014 	.word	0x20000014

08003554 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	2300      	movs	r3, #0
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	2300      	movs	r3, #0
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	2300      	movs	r3, #0
 8003568:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800356a:	2300      	movs	r3, #0
 800356c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800356e:	4b1e      	ldr	r3, [pc, #120]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	2b04      	cmp	r3, #4
 800357c:	d002      	beq.n	8003584 <HAL_RCC_GetSysClockFreq+0x30>
 800357e:	2b08      	cmp	r3, #8
 8003580:	d003      	beq.n	800358a <HAL_RCC_GetSysClockFreq+0x36>
 8003582:	e027      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003584:	4b19      	ldr	r3, [pc, #100]	; (80035ec <HAL_RCC_GetSysClockFreq+0x98>)
 8003586:	613b      	str	r3, [r7, #16]
      break;
 8003588:	e027      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	0c9b      	lsrs	r3, r3, #18
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	4a17      	ldr	r2, [pc, #92]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003594:	5cd3      	ldrb	r3, [r2, r3]
 8003596:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d010      	beq.n	80035c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035a2:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	0c5b      	lsrs	r3, r3, #17
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	4a11      	ldr	r2, [pc, #68]	; (80035f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80035ae:	5cd3      	ldrb	r3, [r2, r3]
 80035b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a0d      	ldr	r2, [pc, #52]	; (80035ec <HAL_RCC_GetSysClockFreq+0x98>)
 80035b6:	fb03 f202 	mul.w	r2, r3, r2
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	e004      	b.n	80035ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a0c      	ldr	r2, [pc, #48]	; (80035f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80035c8:	fb02 f303 	mul.w	r3, r2, r3
 80035cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	613b      	str	r3, [r7, #16]
      break;
 80035d2:	e002      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035d4:	4b05      	ldr	r3, [pc, #20]	; (80035ec <HAL_RCC_GetSysClockFreq+0x98>)
 80035d6:	613b      	str	r3, [r7, #16]
      break;
 80035d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035da:	693b      	ldr	r3, [r7, #16]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	371c      	adds	r7, #28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40021000 	.word	0x40021000
 80035ec:	007a1200 	.word	0x007a1200
 80035f0:	080086f0 	.word	0x080086f0
 80035f4:	08008700 	.word	0x08008700
 80035f8:	003d0900 	.word	0x003d0900

080035fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003600:	4b02      	ldr	r3, [pc, #8]	; (800360c <HAL_RCC_GetHCLKFreq+0x10>)
 8003602:	681b      	ldr	r3, [r3, #0]
}
 8003604:	4618      	mov	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr
 800360c:	20000010 	.word	0x20000010

08003610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003614:	f7ff fff2 	bl	80035fc <HAL_RCC_GetHCLKFreq>
 8003618:	4602      	mov	r2, r0
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	0a1b      	lsrs	r3, r3, #8
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	4903      	ldr	r1, [pc, #12]	; (8003634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003626:	5ccb      	ldrb	r3, [r1, r3]
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40021000 	.word	0x40021000
 8003634:	080086e8 	.word	0x080086e8

08003638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800363c:	f7ff ffde 	bl	80035fc <HAL_RCC_GetHCLKFreq>
 8003640:	4602      	mov	r2, r0
 8003642:	4b05      	ldr	r3, [pc, #20]	; (8003658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	0adb      	lsrs	r3, r3, #11
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	4903      	ldr	r1, [pc, #12]	; (800365c <HAL_RCC_GetPCLK2Freq+0x24>)
 800364e:	5ccb      	ldrb	r3, [r1, r3]
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003654:	4618      	mov	r0, r3
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40021000 	.word	0x40021000
 800365c:	080086e8 	.word	0x080086e8

08003660 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003668:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <RCC_Delay+0x34>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a0a      	ldr	r2, [pc, #40]	; (8003698 <RCC_Delay+0x38>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	0a5b      	lsrs	r3, r3, #9
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800367c:	bf00      	nop
  }
  while (Delay --);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	1e5a      	subs	r2, r3, #1
 8003682:	60fa      	str	r2, [r7, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f9      	bne.n	800367c <RCC_Delay+0x1c>
}
 8003688:	bf00      	nop
 800368a:	bf00      	nop
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr
 8003694:	20000010 	.word	0x20000010
 8003698:	10624dd3 	.word	0x10624dd3

0800369c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	613b      	str	r3, [r7, #16]
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d07d      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80036b8:	2300      	movs	r3, #0
 80036ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036bc:	4b4f      	ldr	r3, [pc, #316]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10d      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c8:	4b4c      	ldr	r3, [pc, #304]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	4a4b      	ldr	r2, [pc, #300]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d2:	61d3      	str	r3, [r2, #28]
 80036d4:	4b49      	ldr	r3, [pc, #292]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e0:	2301      	movs	r3, #1
 80036e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e4:	4b46      	ldr	r3, [pc, #280]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d118      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036f0:	4b43      	ldr	r3, [pc, #268]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a42      	ldr	r2, [pc, #264]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036fc:	f7fe fd46 	bl	800218c <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003702:	e008      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003704:	f7fe fd42 	bl	800218c <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b64      	cmp	r3, #100	; 0x64
 8003710:	d901      	bls.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e06d      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003716:	4b3a      	ldr	r3, [pc, #232]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f0      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003722:	4b36      	ldr	r3, [pc, #216]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d02e      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	429a      	cmp	r2, r3
 800373e:	d027      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003740:	4b2e      	ldr	r3, [pc, #184]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003748:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800374a:	4b2e      	ldr	r3, [pc, #184]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800374c:	2201      	movs	r2, #1
 800374e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003750:	4b2c      	ldr	r3, [pc, #176]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003756:	4a29      	ldr	r2, [pc, #164]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d014      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003766:	f7fe fd11 	bl	800218c <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800376c:	e00a      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376e:	f7fe fd0d 	bl	800218c <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	f241 3288 	movw	r2, #5000	; 0x1388
 800377c:	4293      	cmp	r3, r2
 800377e:	d901      	bls.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e036      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003784:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0ee      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003790:	4b1a      	ldr	r3, [pc, #104]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	4917      	ldr	r1, [pc, #92]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037a2:	7dfb      	ldrb	r3, [r7, #23]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d105      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a8:	4b14      	ldr	r3, [pc, #80]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	4a13      	ldr	r2, [pc, #76]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037c0:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	490b      	ldr	r1, [pc, #44]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0310 	and.w	r3, r3, #16
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d008      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037de:	4b07      	ldr	r3, [pc, #28]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	4904      	ldr	r1, [pc, #16]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40021000 	.word	0x40021000
 8003800:	40007000 	.word	0x40007000
 8003804:	42420440 	.word	0x42420440

08003808 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e076      	b.n	8003908 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	2b00      	cmp	r3, #0
 8003820:	d108      	bne.n	8003834 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800382a:	d009      	beq.n	8003840 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	61da      	str	r2, [r3, #28]
 8003832:	e005      	b.n	8003840 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d106      	bne.n	8003860 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7fe fa36 	bl	8001ccc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003876:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c4:	ea42 0103 	orr.w	r1, r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	0c1a      	lsrs	r2, r3, #16
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f002 0204 	and.w	r2, r2, #4
 80038e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69da      	ldr	r2, [r3, #28]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	4613      	mov	r3, r2
 800391c:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b01      	cmp	r3, #1
 8003928:	d001      	beq.n	800392e <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 800392a:	2302      	movs	r3, #2
 800392c:	e07f      	b.n	8003a2e <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d110      	bne.n	8003958 <HAL_SPI_Receive_IT+0x48>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800393e:	d10b      	bne.n	8003958 <HAL_SPI_Receive_IT+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2204      	movs	r2, #4
 8003944:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8003948:	88fb      	ldrh	r3, [r7, #6]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 f876 	bl	8003a40 <HAL_SPI_TransmitReceive_IT>
 8003954:	4603      	mov	r3, r0
 8003956:	e06a      	b.n	8003a2e <HAL_SPI_Receive_IT+0x11e>
  }


  if ((pData == NULL) || (Size == 0U))
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <HAL_SPI_Receive_IT+0x54>
 800395e:	88fb      	ldrh	r3, [r7, #6]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_SPI_Receive_IT+0x58>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e062      	b.n	8003a2e <HAL_SPI_Receive_IT+0x11e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_SPI_Receive_IT+0x66>
 8003972:	2302      	movs	r3, #2
 8003974:	e05b      	b.n	8003a2e <HAL_SPI_Receive_IT+0x11e>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2204      	movs	r2, #4
 8003982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	88fa      	ldrh	r2, [r7, #6]
 8003996:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	88fa      	ldrh	r2, [r7, #6]
 800399c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4a1d      	ldr	r2, [pc, #116]	; (8003a38 <HAL_SPI_Receive_IT+0x128>)
 80039c2:	641a      	str	r2, [r3, #64]	; 0x40
 80039c4:	e002      	b.n	80039cc <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4a1c      	ldr	r2, [pc, #112]	; (8003a3c <HAL_SPI_Receive_IT+0x12c>)
 80039ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d4:	d10f      	bne.n	80039f6 <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039f4:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a00:	2b40      	cmp	r3, #64	; 0x40
 8003a02:	d007      	beq.n	8003a14 <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a12:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003a2a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	08003f41 	.word	0x08003f41
 8003a3c:	08003ef7 	.word	0x08003ef7

08003a40 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a54:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a5c:	7dfb      	ldrb	r3, [r7, #23]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d00c      	beq.n	8003a7c <HAL_SPI_TransmitReceive_IT+0x3c>
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a68:	d106      	bne.n	8003a78 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <HAL_SPI_TransmitReceive_IT+0x38>
 8003a72:	7dfb      	ldrb	r3, [r7, #23]
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d001      	beq.n	8003a7c <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e061      	b.n	8003b40 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d005      	beq.n	8003a8e <HAL_SPI_TransmitReceive_IT+0x4e>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <HAL_SPI_TransmitReceive_IT+0x4e>
 8003a88:	887b      	ldrh	r3, [r7, #2]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e056      	b.n	8003b40 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_SPI_TransmitReceive_IT+0x60>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e04f      	b.n	8003b40 <HAL_SPI_TransmitReceive_IT+0x100>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d003      	beq.n	8003abc <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2205      	movs	r2, #5
 8003ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	887a      	ldrh	r2, [r7, #2]
 8003acc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	887a      	ldrh	r2, [r7, #2]
 8003ad2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	887a      	ldrh	r2, [r7, #2]
 8003ade:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	887a      	ldrh	r2, [r7, #2]
 8003ae4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d006      	beq.n	8003afc <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4a16      	ldr	r2, [pc, #88]	; (8003b4c <HAL_SPI_TransmitReceive_IT+0x10c>)
 8003af2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4a16      	ldr	r2, [pc, #88]	; (8003b50 <HAL_SPI_TransmitReceive_IT+0x110>)
 8003af8:	645a      	str	r2, [r3, #68]	; 0x44
 8003afa:	e005      	b.n	8003b08 <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4a15      	ldr	r2, [pc, #84]	; (8003b54 <HAL_SPI_TransmitReceive_IT+0x114>)
 8003b00:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4a14      	ldr	r2, [pc, #80]	; (8003b58 <HAL_SPI_TransmitReceive_IT+0x118>)
 8003b06:	645a      	str	r2, [r3, #68]	; 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b12:	2b40      	cmp	r3, #64	; 0x40
 8003b14:	d007      	beq.n	8003b26 <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b24:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8003b3c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	371c      	adds	r7, #28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bc80      	pop	{r7}
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	08003e39 	.word	0x08003e39
 8003b50:	08003e99 	.word	0x08003e99
 8003b54:	08003d75 	.word	0x08003d75
 8003b58:	08003dd9 	.word	0x08003dd9

08003b5c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	099b      	lsrs	r3, r3, #6
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10f      	bne.n	8003ba0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	099b      	lsrs	r3, r3, #6
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d004      	beq.n	8003ba0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	4798      	blx	r3
    return;
 8003b9e:	e0be      	b.n	8003d1e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	085b      	lsrs	r3, r3, #1
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <HAL_SPI_IRQHandler+0x66>
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	09db      	lsrs	r3, r3, #7
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d004      	beq.n	8003bc2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	4798      	blx	r3
    return;
 8003bc0:	e0ad      	b.n	8003d1e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_SPI_IRQHandler+0x80>
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	099b      	lsrs	r3, r3, #6
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 80a1 	beq.w	8003d1e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 809a 	beq.w	8003d1e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	099b      	lsrs	r3, r3, #6
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d023      	beq.n	8003c3e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d011      	beq.n	8003c26 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c06:	f043 0204 	orr.w	r2, r3, #4
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	617b      	str	r3, [r7, #20]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	e00b      	b.n	8003c3e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c26:	2300      	movs	r3, #0
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	693b      	ldr	r3, [r7, #16]
        return;
 8003c3c:	e06f      	b.n	8003d1e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	095b      	lsrs	r3, r3, #5
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d014      	beq.n	8003c74 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4e:	f043 0201 	orr.w	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d04f      	beq.n	8003d1c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c8a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d104      	bne.n	8003ca8 <HAL_SPI_IRQHandler+0x14c>
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d034      	beq.n	8003d12 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0203 	bic.w	r2, r2, #3
 8003cb6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d011      	beq.n	8003ce4 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc4:	4a17      	ldr	r2, [pc, #92]	; (8003d24 <HAL_SPI_IRQHandler+0x1c8>)
 8003cc6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fe fec1 	bl	8002a54 <HAL_DMA_Abort_IT>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d016      	beq.n	8003d1a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf0:	4a0c      	ldr	r2, [pc, #48]	; (8003d24 <HAL_SPI_IRQHandler+0x1c8>)
 8003cf2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fe feab 	bl	8002a54 <HAL_DMA_Abort_IT>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00a      	beq.n	8003d1a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003d10:	e003      	b.n	8003d1a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f811 	bl	8003d3a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003d18:	e000      	b.n	8003d1c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8003d1a:	bf00      	nop
    return;
 8003d1c:	bf00      	nop
  }
}
 8003d1e:	3720      	adds	r7, #32
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	08003d4d 	.word	0x08003d4d

08003d28 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bc80      	pop	{r7}
 8003d38:	4770      	bx	lr

08003d3a <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr

08003d4c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f7ff ffe7 	bl	8003d3a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d6c:	bf00      	nop
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f103 020c 	add.w	r2, r3, #12
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	7812      	ldrb	r2, [r2, #0]
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10f      	bne.n	8003dd0 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dbe:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d102      	bne.n	8003dd0 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f9e8 	bl	80041a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003dd0:	bf00      	nop
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	330c      	adds	r3, #12
 8003dea:	7812      	ldrb	r2, [r2, #0]
 8003dec:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10f      	bne.n	8003e30 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e1e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d102      	bne.n	8003e30 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f9b8 	bl	80041a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003e30:	bf00      	nop
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4a:	b292      	uxth	r2, r2
 8003e4c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	1c9a      	adds	r2, r3, #2
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10f      	bne.n	8003e90 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e7e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d102      	bne.n	8003e90 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f988 	bl	80041a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003e90:	bf00      	nop
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	881a      	ldrh	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	1c9a      	adds	r2, r3, #2
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10f      	bne.n	8003eee <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003edc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d102      	bne.n	8003eee <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f959 	bl	80041a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f103 020c 	add.w	r2, r3, #12
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0a:	7812      	ldrb	r2, [r2, #0]
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d102      	bne.n	8003f38 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f9a8 	bl	8004288 <SPI_CloseRx_ISR>
  }
}
 8003f38:	bf00      	nop
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f52:	b292      	uxth	r2, r2
 8003f54:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5a:	1c9a      	adds	r2, r3, #2
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d102      	bne.n	8003f7e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f985 	bl	8004288 <SPI_CloseRx_ISR>
  }
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	603b      	str	r3, [r7, #0]
 8003f94:	4613      	mov	r3, r2
 8003f96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f98:	f7fe f8f8 	bl	800218c <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa0:	1a9b      	subs	r3, r3, r2
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fa8:	f7fe f8f0 	bl	800218c <HAL_GetTick>
 8003fac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fae:	4b39      	ldr	r3, [pc, #228]	; (8004094 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	015b      	lsls	r3, r3, #5
 8003fb4:	0d1b      	lsrs	r3, r3, #20
 8003fb6:	69fa      	ldr	r2, [r7, #28]
 8003fb8:	fb02 f303 	mul.w	r3, r2, r3
 8003fbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fbe:	e054      	b.n	800406a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc6:	d050      	beq.n	800406a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fc8:	f7fe f8e0 	bl	800218c <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	69fa      	ldr	r2, [r7, #28]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d902      	bls.n	8003fde <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d13d      	bne.n	800405a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ff6:	d111      	bne.n	800401c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004000:	d004      	beq.n	800400c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800400a:	d107      	bne.n	800401c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800401a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004024:	d10f      	bne.n	8004046 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004044:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e017      	b.n	800408a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	3b01      	subs	r3, #1
 8004068:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4013      	ands	r3, r2
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	429a      	cmp	r2, r3
 8004078:	bf0c      	ite	eq
 800407a:	2301      	moveq	r3, #1
 800407c:	2300      	movne	r3, #0
 800407e:	b2db      	uxtb	r3, r3
 8004080:	461a      	mov	r2, r3
 8004082:	79fb      	ldrb	r3, [r7, #7]
 8004084:	429a      	cmp	r2, r3
 8004086:	d19b      	bne.n	8003fc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3720      	adds	r7, #32
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	20000010 	.word	0x20000010

08004098 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af02      	add	r7, sp, #8
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ac:	d111      	bne.n	80040d2 <SPI_EndRxTransaction+0x3a>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b6:	d004      	beq.n	80040c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c0:	d107      	bne.n	80040d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040d0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040da:	d117      	bne.n	800410c <SPI_EndRxTransaction+0x74>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e4:	d112      	bne.n	800410c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2200      	movs	r2, #0
 80040ee:	2101      	movs	r1, #1
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f7ff ff49 	bl	8003f88 <SPI_WaitFlagStateUntilTimeout>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01a      	beq.n	8004132 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004100:	f043 0220 	orr.w	r2, r3, #32
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e013      	b.n	8004134 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2200      	movs	r2, #0
 8004114:	2180      	movs	r1, #128	; 0x80
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f7ff ff36 	bl	8003f88 <SPI_WaitFlagStateUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d007      	beq.n	8004132 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004126:	f043 0220 	orr.w	r2, r3, #32
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e000      	b.n	8004134 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af02      	add	r7, sp, #8
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2201      	movs	r2, #1
 8004150:	2102      	movs	r1, #2
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f7ff ff18 	bl	8003f88 <SPI_WaitFlagStateUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d007      	beq.n	800416e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004162:	f043 0220 	orr.w	r2, r3, #32
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e013      	b.n	8004196 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2200      	movs	r2, #0
 8004176:	2180      	movs	r1, #128	; 0x80
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f7ff ff05 	bl	8003f88 <SPI_WaitFlagStateUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d007      	beq.n	8004194 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004188:	f043 0220 	orr.w	r2, r3, #32
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e000      	b.n	8004196 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
	...

080041a0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80041a8:	4b35      	ldr	r3, [pc, #212]	; (8004280 <SPI_CloseRxTx_ISR+0xe0>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a35      	ldr	r2, [pc, #212]	; (8004284 <SPI_CloseRxTx_ISR+0xe4>)
 80041ae:	fba2 2303 	umull	r2, r3, r2, r3
 80041b2:	0a5b      	lsrs	r3, r3, #9
 80041b4:	2264      	movs	r2, #100	; 0x64
 80041b6:	fb02 f303 	mul.w	r3, r2, r3
 80041ba:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041bc:	f7fd ffe6 	bl	800218c <HAL_GetTick>
 80041c0:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0220 	bic.w	r2, r2, #32
 80041d0:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d106      	bne.n	80041e6 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041dc:	f043 0220 	orr.w	r2, r3, #32
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80041e4:	e009      	b.n	80041fa <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0eb      	beq.n	80041d2 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	2164      	movs	r1, #100	; 0x64
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff ff9c 	bl	800413c <SPI_EndRxTxTransaction>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d005      	beq.n	8004216 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420e:	f043 0220 	orr.w	r2, r3, #32
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10a      	bne.n	8004234 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800421e:	2300      	movs	r3, #0
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004238:	2b00      	cmp	r3, #0
 800423a:	d115      	bne.n	8004268 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b04      	cmp	r3, #4
 8004246:	d107      	bne.n	8004258 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7fd faf7 	bl	8001844 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004256:	e00e      	b.n	8004276 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7ff fd61 	bl	8003d28 <HAL_SPI_TxRxCpltCallback>
}
 8004266:	e006      	b.n	8004276 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff fd62 	bl	8003d3a <HAL_SPI_ErrorCallback>
}
 8004276:	bf00      	nop
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20000010 	.word	0x20000010
 8004284:	057619f1 	.word	0x057619f1

08004288 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800429e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80042a0:	f7fd ff74 	bl	800218c <HAL_GetTick>
 80042a4:	4603      	mov	r3, r0
 80042a6:	461a      	mov	r2, r3
 80042a8:	2164      	movs	r1, #100	; 0x64
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff fef4 	bl	8004098 <SPI_EndRxTransaction>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d005      	beq.n	80042c2 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ba:	f043 0220 	orr.w	r2, r3, #32
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10a      	bne.n	80042e0 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042ca:	2300      	movs	r3, #0
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d103      	bne.n	80042f8 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7fd faa7 	bl	8001844 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80042f6:	e002      	b.n	80042fe <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff fd1e 	bl	8003d3a <HAL_SPI_ErrorCallback>
}
 80042fe:	bf00      	nop
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e041      	b.n	800439c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d106      	bne.n	8004332 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7fd fd21 	bl	8001d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2202      	movs	r2, #2
 8004336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3304      	adds	r3, #4
 8004342:	4619      	mov	r1, r3
 8004344:	4610      	mov	r0, r2
 8004346:	f000 fa89 	bl	800485c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d001      	beq.n	80043bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e03a      	b.n	8004432 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a18      	ldr	r2, [pc, #96]	; (800443c <HAL_TIM_Base_Start_IT+0x98>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00e      	beq.n	80043fc <HAL_TIM_Base_Start_IT+0x58>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e6:	d009      	beq.n	80043fc <HAL_TIM_Base_Start_IT+0x58>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a14      	ldr	r2, [pc, #80]	; (8004440 <HAL_TIM_Base_Start_IT+0x9c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d004      	beq.n	80043fc <HAL_TIM_Base_Start_IT+0x58>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a13      	ldr	r2, [pc, #76]	; (8004444 <HAL_TIM_Base_Start_IT+0xa0>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d111      	bne.n	8004420 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b06      	cmp	r3, #6
 800440c:	d010      	beq.n	8004430 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 0201 	orr.w	r2, r2, #1
 800441c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800441e:	e007      	b.n	8004430 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0201 	orr.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr
 800443c:	40012c00 	.word	0x40012c00
 8004440:	40000400 	.word	0x40000400
 8004444:	40000800 	.word	0x40000800

08004448 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0201 	bic.w	r2, r2, #1
 800445e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6a1a      	ldr	r2, [r3, #32]
 8004466:	f241 1311 	movw	r3, #4369	; 0x1111
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10f      	bne.n	8004490 <HAL_TIM_Base_Stop_IT+0x48>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6a1a      	ldr	r2, [r3, #32]
 8004476:	f240 4344 	movw	r3, #1092	; 0x444
 800447a:	4013      	ands	r3, r2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d107      	bne.n	8004490 <HAL_TIM_Base_Stop_IT+0x48>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0201 	bic.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr

080044a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d020      	beq.n	8004508 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d01b      	beq.n	8004508 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f06f 0202 	mvn.w	r2, #2
 80044d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f998 	bl	8004824 <HAL_TIM_IC_CaptureCallback>
 80044f4:	e005      	b.n	8004502 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f98b 	bl	8004812 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f99a 	bl	8004836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	2b00      	cmp	r3, #0
 8004510:	d020      	beq.n	8004554 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b00      	cmp	r3, #0
 800451a:	d01b      	beq.n	8004554 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0204 	mvn.w	r2, #4
 8004524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2202      	movs	r2, #2
 800452a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f972 	bl	8004824 <HAL_TIM_IC_CaptureCallback>
 8004540:	e005      	b.n	800454e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f965 	bl	8004812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f974 	bl	8004836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d020      	beq.n	80045a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b00      	cmp	r3, #0
 8004566:	d01b      	beq.n	80045a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0208 	mvn.w	r2, #8
 8004570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2204      	movs	r2, #4
 8004576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f94c 	bl	8004824 <HAL_TIM_IC_CaptureCallback>
 800458c:	e005      	b.n	800459a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f93f 	bl	8004812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f94e 	bl	8004836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f003 0310 	and.w	r3, r3, #16
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d020      	beq.n	80045ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f003 0310 	and.w	r3, r3, #16
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01b      	beq.n	80045ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0210 	mvn.w	r2, #16
 80045bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2208      	movs	r2, #8
 80045c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f926 	bl	8004824 <HAL_TIM_IC_CaptureCallback>
 80045d8:	e005      	b.n	80045e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f919 	bl	8004812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f928 	bl	8004836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00c      	beq.n	8004610 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d007      	beq.n	8004610 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0201 	mvn.w	r2, #1
 8004608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7fd fa46 	bl	8001a9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00c      	beq.n	8004634 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004620:	2b00      	cmp	r3, #0
 8004622:	d007      	beq.n	8004634 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800462c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fa7f 	bl	8004b32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00c      	beq.n	8004658 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004644:	2b00      	cmp	r3, #0
 8004646:	d007      	beq.n	8004658 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f8f8 	bl	8004848 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f003 0320 	and.w	r3, r3, #32
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00c      	beq.n	800467c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b00      	cmp	r3, #0
 800466a:	d007      	beq.n	800467c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0220 	mvn.w	r2, #32
 8004674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 fa52 	bl	8004b20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800467c:	bf00      	nop
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_TIM_ConfigClockSource+0x1c>
 800469c:	2302      	movs	r3, #2
 800469e:	e0b4      	b.n	800480a <HAL_TIM_ConfigClockSource+0x186>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046d8:	d03e      	beq.n	8004758 <HAL_TIM_ConfigClockSource+0xd4>
 80046da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046de:	f200 8087 	bhi.w	80047f0 <HAL_TIM_ConfigClockSource+0x16c>
 80046e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e6:	f000 8086 	beq.w	80047f6 <HAL_TIM_ConfigClockSource+0x172>
 80046ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ee:	d87f      	bhi.n	80047f0 <HAL_TIM_ConfigClockSource+0x16c>
 80046f0:	2b70      	cmp	r3, #112	; 0x70
 80046f2:	d01a      	beq.n	800472a <HAL_TIM_ConfigClockSource+0xa6>
 80046f4:	2b70      	cmp	r3, #112	; 0x70
 80046f6:	d87b      	bhi.n	80047f0 <HAL_TIM_ConfigClockSource+0x16c>
 80046f8:	2b60      	cmp	r3, #96	; 0x60
 80046fa:	d050      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x11a>
 80046fc:	2b60      	cmp	r3, #96	; 0x60
 80046fe:	d877      	bhi.n	80047f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004700:	2b50      	cmp	r3, #80	; 0x50
 8004702:	d03c      	beq.n	800477e <HAL_TIM_ConfigClockSource+0xfa>
 8004704:	2b50      	cmp	r3, #80	; 0x50
 8004706:	d873      	bhi.n	80047f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004708:	2b40      	cmp	r3, #64	; 0x40
 800470a:	d058      	beq.n	80047be <HAL_TIM_ConfigClockSource+0x13a>
 800470c:	2b40      	cmp	r3, #64	; 0x40
 800470e:	d86f      	bhi.n	80047f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004710:	2b30      	cmp	r3, #48	; 0x30
 8004712:	d064      	beq.n	80047de <HAL_TIM_ConfigClockSource+0x15a>
 8004714:	2b30      	cmp	r3, #48	; 0x30
 8004716:	d86b      	bhi.n	80047f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004718:	2b20      	cmp	r3, #32
 800471a:	d060      	beq.n	80047de <HAL_TIM_ConfigClockSource+0x15a>
 800471c:	2b20      	cmp	r3, #32
 800471e:	d867      	bhi.n	80047f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004720:	2b00      	cmp	r3, #0
 8004722:	d05c      	beq.n	80047de <HAL_TIM_ConfigClockSource+0x15a>
 8004724:	2b10      	cmp	r3, #16
 8004726:	d05a      	beq.n	80047de <HAL_TIM_ConfigClockSource+0x15a>
 8004728:	e062      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6818      	ldr	r0, [r3, #0]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	6899      	ldr	r1, [r3, #8]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f000 f974 	bl	8004a26 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800474c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	609a      	str	r2, [r3, #8]
      break;
 8004756:	e04f      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6818      	ldr	r0, [r3, #0]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	6899      	ldr	r1, [r3, #8]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f000 f95d 	bl	8004a26 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800477a:	609a      	str	r2, [r3, #8]
      break;
 800477c:	e03c      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	6859      	ldr	r1, [r3, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	461a      	mov	r2, r3
 800478c:	f000 f8d4 	bl	8004938 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2150      	movs	r1, #80	; 0x50
 8004796:	4618      	mov	r0, r3
 8004798:	f000 f92b 	bl	80049f2 <TIM_ITRx_SetConfig>
      break;
 800479c:	e02c      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	6859      	ldr	r1, [r3, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	461a      	mov	r2, r3
 80047ac:	f000 f8f2 	bl	8004994 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2160      	movs	r1, #96	; 0x60
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 f91b 	bl	80049f2 <TIM_ITRx_SetConfig>
      break;
 80047bc:	e01c      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	6859      	ldr	r1, [r3, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	461a      	mov	r2, r3
 80047cc:	f000 f8b4 	bl	8004938 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2140      	movs	r1, #64	; 0x40
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 f90b 	bl	80049f2 <TIM_ITRx_SetConfig>
      break;
 80047dc:	e00c      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4619      	mov	r1, r3
 80047e8:	4610      	mov	r0, r2
 80047ea:	f000 f902 	bl	80049f2 <TIM_ITRx_SetConfig>
      break;
 80047ee:	e003      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	73fb      	strb	r3, [r7, #15]
      break;
 80047f4:	e000      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004808:	7bfb      	ldrb	r3, [r7, #15]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	bc80      	pop	{r7}
 8004822:	4770      	bx	lr

08004824 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr

08004836 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr

08004848 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	bc80      	pop	{r7}
 8004858:	4770      	bx	lr
	...

0800485c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a2f      	ldr	r2, [pc, #188]	; (800492c <TIM_Base_SetConfig+0xd0>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00b      	beq.n	800488c <TIM_Base_SetConfig+0x30>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800487a:	d007      	beq.n	800488c <TIM_Base_SetConfig+0x30>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a2c      	ldr	r2, [pc, #176]	; (8004930 <TIM_Base_SetConfig+0xd4>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_Base_SetConfig+0x30>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a2b      	ldr	r2, [pc, #172]	; (8004934 <TIM_Base_SetConfig+0xd8>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d108      	bne.n	800489e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a22      	ldr	r2, [pc, #136]	; (800492c <TIM_Base_SetConfig+0xd0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d00b      	beq.n	80048be <TIM_Base_SetConfig+0x62>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ac:	d007      	beq.n	80048be <TIM_Base_SetConfig+0x62>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a1f      	ldr	r2, [pc, #124]	; (8004930 <TIM_Base_SetConfig+0xd4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d003      	beq.n	80048be <TIM_Base_SetConfig+0x62>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a1e      	ldr	r2, [pc, #120]	; (8004934 <TIM_Base_SetConfig+0xd8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d108      	bne.n	80048d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a0d      	ldr	r2, [pc, #52]	; (800492c <TIM_Base_SetConfig+0xd0>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d103      	bne.n	8004904 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d005      	beq.n	8004922 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f023 0201 	bic.w	r2, r3, #1
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	611a      	str	r2, [r3, #16]
  }
}
 8004922:	bf00      	nop
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr
 800492c:	40012c00 	.word	0x40012c00
 8004930:	40000400 	.word	0x40000400
 8004934:	40000800 	.word	0x40000800

08004938 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	f023 0201 	bic.w	r2, r3, #1
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f023 030a 	bic.w	r3, r3, #10
 8004974:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4313      	orrs	r3, r2
 800497c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	621a      	str	r2, [r3, #32]
}
 800498a:	bf00      	nop
 800498c:	371c      	adds	r7, #28
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr

08004994 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	f023 0210 	bic.w	r2, r3, #16
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	031b      	lsls	r3, r3, #12
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	4313      	orrs	r3, r2
 80049da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	621a      	str	r2, [r3, #32]
}
 80049e8:	bf00      	nop
 80049ea:	371c      	adds	r7, #28
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bc80      	pop	{r7}
 80049f0:	4770      	bx	lr

080049f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b085      	sub	sp, #20
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f043 0307 	orr.w	r3, r3, #7
 8004a14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	609a      	str	r2, [r3, #8]
}
 8004a1c:	bf00      	nop
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bc80      	pop	{r7}
 8004a24:	4770      	bx	lr

08004a26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b087      	sub	sp, #28
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	60f8      	str	r0, [r7, #12]
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	607a      	str	r2, [r7, #4]
 8004a32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	021a      	lsls	r2, r3, #8
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	609a      	str	r2, [r3, #8]
}
 8004a5a:	bf00      	nop
 8004a5c:	371c      	adds	r7, #28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr

08004a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d101      	bne.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	e046      	b.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a16      	ldr	r2, [pc, #88]	; (8004b14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d00e      	beq.n	8004ade <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac8:	d009      	beq.n	8004ade <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a12      	ldr	r2, [pc, #72]	; (8004b18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d004      	beq.n	8004ade <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a10      	ldr	r2, [pc, #64]	; (8004b1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d10c      	bne.n	8004af8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ae4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr
 8004b14:	40012c00 	.word	0x40012c00
 8004b18:	40000400 	.word	0x40000400
 8004b1c:	40000800 	.word	0x40000800

08004b20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bc80      	pop	{r7}
 8004b30:	4770      	bx	lr

08004b32 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bc80      	pop	{r7}
 8004b42:	4770      	bx	lr

08004b44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e042      	b.n	8004bdc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d106      	bne.n	8004b70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fd f926 	bl	8001dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2224      	movs	r2, #36	; 0x24
 8004b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fdb7 	bl	80056fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	691a      	ldr	r2, [r3, #16]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695a      	ldr	r2, [r3, #20]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08a      	sub	sp, #40	; 0x28
 8004be8:	af02      	add	r7, sp, #8
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	d175      	bne.n	8004cf0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d002      	beq.n	8004c10 <HAL_UART_Transmit+0x2c>
 8004c0a:	88fb      	ldrh	r3, [r7, #6]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e06e      	b.n	8004cf2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2221      	movs	r2, #33	; 0x21
 8004c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c22:	f7fd fab3 	bl	800218c <HAL_GetTick>
 8004c26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	88fa      	ldrh	r2, [r7, #6]
 8004c2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	88fa      	ldrh	r2, [r7, #6]
 8004c32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c3c:	d108      	bne.n	8004c50 <HAL_UART_Transmit+0x6c>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d104      	bne.n	8004c50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	61bb      	str	r3, [r7, #24]
 8004c4e:	e003      	b.n	8004c58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c58:	e02e      	b.n	8004cb8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2200      	movs	r2, #0
 8004c62:	2180      	movs	r1, #128	; 0x80
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 fb1c 	bl	80052a2 <UART_WaitOnFlagUntilTimeout>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e03a      	b.n	8004cf2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10b      	bne.n	8004c9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	461a      	mov	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	3302      	adds	r3, #2
 8004c96:	61bb      	str	r3, [r7, #24]
 8004c98:	e007      	b.n	8004caa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	781a      	ldrb	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1cb      	bne.n	8004c5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2140      	movs	r1, #64	; 0x40
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 fae8 	bl	80052a2 <UART_WaitOnFlagUntilTimeout>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d005      	beq.n	8004ce4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e006      	b.n	8004cf2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004cec:	2300      	movs	r3, #0
 8004cee:	e000      	b.n	8004cf2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004cf0:	2302      	movs	r3, #2
  }
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3720      	adds	r7, #32
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b084      	sub	sp, #16
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	60f8      	str	r0, [r7, #12]
 8004d02:	60b9      	str	r1, [r7, #8]
 8004d04:	4613      	mov	r3, r2
 8004d06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b20      	cmp	r3, #32
 8004d12:	d112      	bne.n	8004d3a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d002      	beq.n	8004d20 <HAL_UART_Receive_IT+0x26>
 8004d1a:	88fb      	ldrh	r3, [r7, #6]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e00b      	b.n	8004d3c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d2a:	88fb      	ldrh	r3, [r7, #6]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 fb0f 	bl	8005354 <UART_Start_Receive_IT>
 8004d36:	4603      	mov	r3, r0
 8004d38:	e000      	b.n	8004d3c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d3a:	2302      	movs	r3, #2
  }
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b0ba      	sub	sp, #232	; 0xe8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004d82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10f      	bne.n	8004daa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d009      	beq.n	8004daa <HAL_UART_IRQHandler+0x66>
 8004d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 fbec 	bl	8005580 <UART_Receive_IT>
      return;
 8004da8:	e25b      	b.n	8005262 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004daa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 80de 	beq.w	8004f70 <HAL_UART_IRQHandler+0x22c>
 8004db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d106      	bne.n	8004dce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dc4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 80d1 	beq.w	8004f70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00b      	beq.n	8004df2 <HAL_UART_IRQHandler+0xae>
 8004dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d005      	beq.n	8004df2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dea:	f043 0201 	orr.w	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00b      	beq.n	8004e16 <HAL_UART_IRQHandler+0xd2>
 8004dfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0e:	f043 0202 	orr.w	r2, r3, #2
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00b      	beq.n	8004e3a <HAL_UART_IRQHandler+0xf6>
 8004e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d005      	beq.n	8004e3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e32:	f043 0204 	orr.w	r2, r3, #4
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d011      	beq.n	8004e6a <HAL_UART_IRQHandler+0x126>
 8004e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d105      	bne.n	8004e5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d005      	beq.n	8004e6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e62:	f043 0208 	orr.w	r2, r3, #8
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 81f2 	beq.w	8005258 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e78:	f003 0320 	and.w	r3, r3, #32
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d008      	beq.n	8004e92 <HAL_UART_IRQHandler+0x14e>
 8004e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e84:	f003 0320 	and.w	r3, r3, #32
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fb77 	bl	8005580 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	bf14      	ite	ne
 8004ea0:	2301      	movne	r3, #1
 8004ea2:	2300      	moveq	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d103      	bne.n	8004ebe <HAL_UART_IRQHandler+0x17a>
 8004eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d04f      	beq.n	8004f5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fa81 	bl	80053c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d041      	beq.n	8004f56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3314      	adds	r3, #20
 8004ed8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004edc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3314      	adds	r3, #20
 8004efa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004efe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f0e:	e841 2300 	strex	r3, r2, [r1]
 8004f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1d9      	bne.n	8004ed2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d013      	beq.n	8004f4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2a:	4a7e      	ldr	r2, [pc, #504]	; (8005124 <HAL_UART_IRQHandler+0x3e0>)
 8004f2c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fd fd8e 	bl	8002a54 <HAL_DMA_Abort_IT>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d016      	beq.n	8004f6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f48:	4610      	mov	r0, r2
 8004f4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f4c:	e00e      	b.n	8004f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f993 	bl	800527a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f54:	e00a      	b.n	8004f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f98f 	bl	800527a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f5c:	e006      	b.n	8004f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f98b 	bl	800527a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004f6a:	e175      	b.n	8005258 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f6c:	bf00      	nop
    return;
 8004f6e:	e173      	b.n	8005258 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	f040 814f 	bne.w	8005218 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f7e:	f003 0310 	and.w	r3, r3, #16
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 8148 	beq.w	8005218 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f8c:	f003 0310 	and.w	r3, r3, #16
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 8141 	beq.w	8005218 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f96:	2300      	movs	r3, #0
 8004f98:	60bb      	str	r3, [r7, #8]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	60bb      	str	r3, [r7, #8]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	60bb      	str	r3, [r7, #8]
 8004faa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 80b6 	beq.w	8005128 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 8145 	beq.w	800525c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	f080 813e 	bcs.w	800525c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fe6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	2b20      	cmp	r3, #32
 8004ff0:	f000 8088 	beq.w	8005104 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	330c      	adds	r3, #12
 8004ffa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005002:	e853 3f00 	ldrex	r3, [r3]
 8005006:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800500a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800500e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005012:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	330c      	adds	r3, #12
 800501c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005020:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005024:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800502c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005030:	e841 2300 	strex	r3, r2, [r1]
 8005034:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005038:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1d9      	bne.n	8004ff4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3314      	adds	r3, #20
 8005046:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005048:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800504a:	e853 3f00 	ldrex	r3, [r3]
 800504e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005050:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005052:	f023 0301 	bic.w	r3, r3, #1
 8005056:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3314      	adds	r3, #20
 8005060:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005064:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005068:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800506c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005070:	e841 2300 	strex	r3, r2, [r1]
 8005074:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1e1      	bne.n	8005040 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3314      	adds	r3, #20
 8005082:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005084:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005086:	e853 3f00 	ldrex	r3, [r3]
 800508a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800508c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800508e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005092:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	3314      	adds	r3, #20
 800509c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80050a0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80050a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80050a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050a8:	e841 2300 	strex	r3, r2, [r1]
 80050ac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80050ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1e3      	bne.n	800507c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	330c      	adds	r3, #12
 80050c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050cc:	e853 3f00 	ldrex	r3, [r3]
 80050d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050d4:	f023 0310 	bic.w	r3, r3, #16
 80050d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	330c      	adds	r3, #12
 80050e2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80050e6:	65ba      	str	r2, [r7, #88]	; 0x58
 80050e8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050ee:	e841 2300 	strex	r3, r2, [r1]
 80050f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1e3      	bne.n	80050c2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fd fc6d 	bl	80029de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005112:	b29b      	uxth	r3, r3
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	b29b      	uxth	r3, r3
 8005118:	4619      	mov	r1, r3
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f8b6 	bl	800528c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005120:	e09c      	b.n	800525c <HAL_UART_IRQHandler+0x518>
 8005122:	bf00      	nop
 8005124:	0800548b 	.word	0x0800548b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005130:	b29b      	uxth	r3, r3
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800513c:	b29b      	uxth	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 808e 	beq.w	8005260 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005144:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 8089 	beq.w	8005260 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	330c      	adds	r3, #12
 8005154:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005158:	e853 3f00 	ldrex	r3, [r3]
 800515c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800515e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005160:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005164:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	330c      	adds	r3, #12
 800516e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005172:	647a      	str	r2, [r7, #68]	; 0x44
 8005174:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005176:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005178:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800517a:	e841 2300 	strex	r3, r2, [r1]
 800517e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1e3      	bne.n	800514e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3314      	adds	r3, #20
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	e853 3f00 	ldrex	r3, [r3]
 8005194:	623b      	str	r3, [r7, #32]
   return(result);
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	f023 0301 	bic.w	r3, r3, #1
 800519c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3314      	adds	r3, #20
 80051a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80051aa:	633a      	str	r2, [r7, #48]	; 0x30
 80051ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051b2:	e841 2300 	strex	r3, r2, [r1]
 80051b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1e3      	bne.n	8005186 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	330c      	adds	r3, #12
 80051d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	e853 3f00 	ldrex	r3, [r3]
 80051da:	60fb      	str	r3, [r7, #12]
   return(result);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f023 0310 	bic.w	r3, r3, #16
 80051e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	330c      	adds	r3, #12
 80051ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80051f0:	61fa      	str	r2, [r7, #28]
 80051f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f4:	69b9      	ldr	r1, [r7, #24]
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	e841 2300 	strex	r3, r2, [r1]
 80051fc:	617b      	str	r3, [r7, #20]
   return(result);
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1e3      	bne.n	80051cc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800520a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800520e:	4619      	mov	r1, r3
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f83b 	bl	800528c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005216:	e023      	b.n	8005260 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800521c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005220:	2b00      	cmp	r3, #0
 8005222:	d009      	beq.n	8005238 <HAL_UART_IRQHandler+0x4f4>
 8005224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f93e 	bl	80054b2 <UART_Transmit_IT>
    return;
 8005236:	e014      	b.n	8005262 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800523c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00e      	beq.n	8005262 <HAL_UART_IRQHandler+0x51e>
 8005244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524c:	2b00      	cmp	r3, #0
 800524e:	d008      	beq.n	8005262 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f97d 	bl	8005550 <UART_EndTransmit_IT>
    return;
 8005256:	e004      	b.n	8005262 <HAL_UART_IRQHandler+0x51e>
    return;
 8005258:	bf00      	nop
 800525a:	e002      	b.n	8005262 <HAL_UART_IRQHandler+0x51e>
      return;
 800525c:	bf00      	nop
 800525e:	e000      	b.n	8005262 <HAL_UART_IRQHandler+0x51e>
      return;
 8005260:	bf00      	nop
  }
}
 8005262:	37e8      	adds	r7, #232	; 0xe8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	bc80      	pop	{r7}
 8005278:	4770      	bx	lr

0800527a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	bc80      	pop	{r7}
 800528a:	4770      	bx	lr

0800528c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	460b      	mov	r3, r1
 8005296:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	bc80      	pop	{r7}
 80052a0:	4770      	bx	lr

080052a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b086      	sub	sp, #24
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	60f8      	str	r0, [r7, #12]
 80052aa:	60b9      	str	r1, [r7, #8]
 80052ac:	603b      	str	r3, [r7, #0]
 80052ae:	4613      	mov	r3, r2
 80052b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b2:	e03b      	b.n	800532c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ba:	d037      	beq.n	800532c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052bc:	f7fc ff66 	bl	800218c <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	6a3a      	ldr	r2, [r7, #32]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d302      	bcc.n	80052d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e03a      	b.n	800534c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d023      	beq.n	800532c <UART_WaitOnFlagUntilTimeout+0x8a>
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2b80      	cmp	r3, #128	; 0x80
 80052e8:	d020      	beq.n	800532c <UART_WaitOnFlagUntilTimeout+0x8a>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b40      	cmp	r3, #64	; 0x40
 80052ee:	d01d      	beq.n	800532c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d116      	bne.n	800532c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80052fe:	2300      	movs	r3, #0
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	617b      	str	r3, [r7, #20]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f856 	bl	80053c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2208      	movs	r2, #8
 800531e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e00f      	b.n	800534c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	4013      	ands	r3, r2
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	429a      	cmp	r2, r3
 800533a:	bf0c      	ite	eq
 800533c:	2301      	moveq	r3, #1
 800533e:	2300      	movne	r3, #0
 8005340:	b2db      	uxtb	r3, r3
 8005342:	461a      	mov	r2, r3
 8005344:	79fb      	ldrb	r3, [r7, #7]
 8005346:	429a      	cmp	r2, r3
 8005348:	d0b4      	beq.n	80052b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	4613      	mov	r3, r2
 8005360:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	88fa      	ldrh	r2, [r7, #6]
 800536c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	88fa      	ldrh	r2, [r7, #6]
 8005372:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2222      	movs	r2, #34	; 0x22
 800537e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d007      	beq.n	800539a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005398:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	695a      	ldr	r2, [r3, #20]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f042 0201 	orr.w	r2, r2, #1
 80053a8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68da      	ldr	r2, [r3, #12]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f042 0220 	orr.w	r2, r2, #32
 80053b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bc80      	pop	{r7}
 80053c4:	4770      	bx	lr

080053c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b095      	sub	sp, #84	; 0x54
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	330c      	adds	r3, #12
 80053d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d8:	e853 3f00 	ldrex	r3, [r3]
 80053dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	330c      	adds	r3, #12
 80053ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053ee:	643a      	str	r2, [r7, #64]	; 0x40
 80053f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053f6:	e841 2300 	strex	r3, r2, [r1]
 80053fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1e5      	bne.n	80053ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3314      	adds	r3, #20
 8005408:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	e853 3f00 	ldrex	r3, [r3]
 8005410:	61fb      	str	r3, [r7, #28]
   return(result);
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	f023 0301 	bic.w	r3, r3, #1
 8005418:	64bb      	str	r3, [r7, #72]	; 0x48
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3314      	adds	r3, #20
 8005420:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005422:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005424:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005426:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800542a:	e841 2300 	strex	r3, r2, [r1]
 800542e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1e5      	bne.n	8005402 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543a:	2b01      	cmp	r3, #1
 800543c:	d119      	bne.n	8005472 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	330c      	adds	r3, #12
 8005444:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	e853 3f00 	ldrex	r3, [r3]
 800544c:	60bb      	str	r3, [r7, #8]
   return(result);
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	f023 0310 	bic.w	r3, r3, #16
 8005454:	647b      	str	r3, [r7, #68]	; 0x44
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	330c      	adds	r3, #12
 800545c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800545e:	61ba      	str	r2, [r7, #24]
 8005460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005462:	6979      	ldr	r1, [r7, #20]
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	613b      	str	r3, [r7, #16]
   return(result);
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1e5      	bne.n	800543e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2220      	movs	r2, #32
 8005476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005480:	bf00      	nop
 8005482:	3754      	adds	r7, #84	; 0x54
 8005484:	46bd      	mov	sp, r7
 8005486:	bc80      	pop	{r7}
 8005488:	4770      	bx	lr

0800548a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b084      	sub	sp, #16
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f7ff fee8 	bl	800527a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054aa:	bf00      	nop
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b085      	sub	sp, #20
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b21      	cmp	r3, #33	; 0x21
 80054c4:	d13e      	bne.n	8005544 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ce:	d114      	bne.n	80054fa <UART_Transmit_IT+0x48>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d110      	bne.n	80054fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	461a      	mov	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	1c9a      	adds	r2, r3, #2
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	621a      	str	r2, [r3, #32]
 80054f8:	e008      	b.n	800550c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	1c59      	adds	r1, r3, #1
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6211      	str	r1, [r2, #32]
 8005504:	781a      	ldrb	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005510:	b29b      	uxth	r3, r3
 8005512:	3b01      	subs	r3, #1
 8005514:	b29b      	uxth	r3, r3
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	4619      	mov	r1, r3
 800551a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10f      	bne.n	8005540 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800552e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68da      	ldr	r2, [r3, #12]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800553e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005540:	2300      	movs	r3, #0
 8005542:	e000      	b.n	8005546 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005544:	2302      	movs	r3, #2
  }
}
 8005546:	4618      	mov	r0, r3
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	bc80      	pop	{r7}
 800554e:	4770      	bx	lr

08005550 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005566:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2220      	movs	r2, #32
 800556c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7ff fe79 	bl	8005268 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b08c      	sub	sp, #48	; 0x30
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b22      	cmp	r3, #34	; 0x22
 8005592:	f040 80ae 	bne.w	80056f2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800559e:	d117      	bne.n	80055d0 <UART_Receive_IT+0x50>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d113      	bne.n	80055d0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055a8:	2300      	movs	r3, #0
 80055aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055be:	b29a      	uxth	r2, r3
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c8:	1c9a      	adds	r2, r3, #2
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	629a      	str	r2, [r3, #40]	; 0x28
 80055ce:	e026      	b.n	800561e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e2:	d007      	beq.n	80055f4 <UART_Receive_IT+0x74>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10a      	bne.n	8005602 <UART_Receive_IT+0x82>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d106      	bne.n	8005602 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fe:	701a      	strb	r2, [r3, #0]
 8005600:	e008      	b.n	8005614 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	b2db      	uxtb	r3, r3
 800560a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800560e:	b2da      	uxtb	r2, r3
 8005610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005612:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29b      	uxth	r3, r3
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	4619      	mov	r1, r3
 800562c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800562e:	2b00      	cmp	r3, #0
 8005630:	d15d      	bne.n	80056ee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68da      	ldr	r2, [r3, #12]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0220 	bic.w	r2, r2, #32
 8005640:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68da      	ldr	r2, [r3, #12]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005650:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	695a      	ldr	r2, [r3, #20]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 0201 	bic.w	r2, r2, #1
 8005660:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2220      	movs	r2, #32
 8005666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005674:	2b01      	cmp	r3, #1
 8005676:	d135      	bne.n	80056e4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	330c      	adds	r3, #12
 8005684:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	e853 3f00 	ldrex	r3, [r3]
 800568c:	613b      	str	r3, [r7, #16]
   return(result);
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	f023 0310 	bic.w	r3, r3, #16
 8005694:	627b      	str	r3, [r7, #36]	; 0x24
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	330c      	adds	r3, #12
 800569c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569e:	623a      	str	r2, [r7, #32]
 80056a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a2:	69f9      	ldr	r1, [r7, #28]
 80056a4:	6a3a      	ldr	r2, [r7, #32]
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1e5      	bne.n	800567e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0310 	and.w	r3, r3, #16
 80056bc:	2b10      	cmp	r3, #16
 80056be:	d10a      	bne.n	80056d6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056c0:	2300      	movs	r3, #0
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056da:	4619      	mov	r1, r3
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7ff fdd5 	bl	800528c <HAL_UARTEx_RxEventCallback>
 80056e2:	e002      	b.n	80056ea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7fc f903 	bl	80018f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	e002      	b.n	80056f4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	e000      	b.n	80056f4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80056f2:	2302      	movs	r3, #2
  }
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3730      	adds	r7, #48	; 0x30
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	4313      	orrs	r3, r2
 800572a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005736:	f023 030c 	bic.w	r3, r3, #12
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	6812      	ldr	r2, [r2, #0]
 800573e:	68b9      	ldr	r1, [r7, #8]
 8005740:	430b      	orrs	r3, r1
 8005742:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	699a      	ldr	r2, [r3, #24]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a2c      	ldr	r2, [pc, #176]	; (8005810 <UART_SetConfig+0x114>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d103      	bne.n	800576c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005764:	f7fd ff68 	bl	8003638 <HAL_RCC_GetPCLK2Freq>
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	e002      	b.n	8005772 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800576c:	f7fd ff50 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 8005770:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	009a      	lsls	r2, r3, #2
 800577c:	441a      	add	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	fbb2 f3f3 	udiv	r3, r2, r3
 8005788:	4a22      	ldr	r2, [pc, #136]	; (8005814 <UART_SetConfig+0x118>)
 800578a:	fba2 2303 	umull	r2, r3, r2, r3
 800578e:	095b      	lsrs	r3, r3, #5
 8005790:	0119      	lsls	r1, r3, #4
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4613      	mov	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	009a      	lsls	r2, r3, #2
 800579c:	441a      	add	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80057a8:	4b1a      	ldr	r3, [pc, #104]	; (8005814 <UART_SetConfig+0x118>)
 80057aa:	fba3 0302 	umull	r0, r3, r3, r2
 80057ae:	095b      	lsrs	r3, r3, #5
 80057b0:	2064      	movs	r0, #100	; 0x64
 80057b2:	fb00 f303 	mul.w	r3, r0, r3
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	3332      	adds	r3, #50	; 0x32
 80057bc:	4a15      	ldr	r2, [pc, #84]	; (8005814 <UART_SetConfig+0x118>)
 80057be:	fba2 2303 	umull	r2, r3, r2, r3
 80057c2:	095b      	lsrs	r3, r3, #5
 80057c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057c8:	4419      	add	r1, r3
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4613      	mov	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	009a      	lsls	r2, r3, #2
 80057d4:	441a      	add	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80057e0:	4b0c      	ldr	r3, [pc, #48]	; (8005814 <UART_SetConfig+0x118>)
 80057e2:	fba3 0302 	umull	r0, r3, r3, r2
 80057e6:	095b      	lsrs	r3, r3, #5
 80057e8:	2064      	movs	r0, #100	; 0x64
 80057ea:	fb00 f303 	mul.w	r3, r0, r3
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	011b      	lsls	r3, r3, #4
 80057f2:	3332      	adds	r3, #50	; 0x32
 80057f4:	4a07      	ldr	r2, [pc, #28]	; (8005814 <UART_SetConfig+0x118>)
 80057f6:	fba2 2303 	umull	r2, r3, r2, r3
 80057fa:	095b      	lsrs	r3, r3, #5
 80057fc:	f003 020f 	and.w	r2, r3, #15
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	440a      	add	r2, r1
 8005806:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005808:	bf00      	nop
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	40013800 	.word	0x40013800
 8005814:	51eb851f 	.word	0x51eb851f

08005818 <__errno>:
 8005818:	4b01      	ldr	r3, [pc, #4]	; (8005820 <__errno+0x8>)
 800581a:	6818      	ldr	r0, [r3, #0]
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	2000001c 	.word	0x2000001c

08005824 <__libc_init_array>:
 8005824:	b570      	push	{r4, r5, r6, lr}
 8005826:	2600      	movs	r6, #0
 8005828:	4d0c      	ldr	r5, [pc, #48]	; (800585c <__libc_init_array+0x38>)
 800582a:	4c0d      	ldr	r4, [pc, #52]	; (8005860 <__libc_init_array+0x3c>)
 800582c:	1b64      	subs	r4, r4, r5
 800582e:	10a4      	asrs	r4, r4, #2
 8005830:	42a6      	cmp	r6, r4
 8005832:	d109      	bne.n	8005848 <__libc_init_array+0x24>
 8005834:	f002 ff10 	bl	8008658 <_init>
 8005838:	2600      	movs	r6, #0
 800583a:	4d0a      	ldr	r5, [pc, #40]	; (8005864 <__libc_init_array+0x40>)
 800583c:	4c0a      	ldr	r4, [pc, #40]	; (8005868 <__libc_init_array+0x44>)
 800583e:	1b64      	subs	r4, r4, r5
 8005840:	10a4      	asrs	r4, r4, #2
 8005842:	42a6      	cmp	r6, r4
 8005844:	d105      	bne.n	8005852 <__libc_init_array+0x2e>
 8005846:	bd70      	pop	{r4, r5, r6, pc}
 8005848:	f855 3b04 	ldr.w	r3, [r5], #4
 800584c:	4798      	blx	r3
 800584e:	3601      	adds	r6, #1
 8005850:	e7ee      	b.n	8005830 <__libc_init_array+0xc>
 8005852:	f855 3b04 	ldr.w	r3, [r5], #4
 8005856:	4798      	blx	r3
 8005858:	3601      	adds	r6, #1
 800585a:	e7f2      	b.n	8005842 <__libc_init_array+0x1e>
 800585c:	08008adc 	.word	0x08008adc
 8005860:	08008adc 	.word	0x08008adc
 8005864:	08008adc 	.word	0x08008adc
 8005868:	08008ae0 	.word	0x08008ae0

0800586c <memset>:
 800586c:	4603      	mov	r3, r0
 800586e:	4402      	add	r2, r0
 8005870:	4293      	cmp	r3, r2
 8005872:	d100      	bne.n	8005876 <memset+0xa>
 8005874:	4770      	bx	lr
 8005876:	f803 1b01 	strb.w	r1, [r3], #1
 800587a:	e7f9      	b.n	8005870 <memset+0x4>

0800587c <__cvt>:
 800587c:	2b00      	cmp	r3, #0
 800587e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005882:	461f      	mov	r7, r3
 8005884:	bfbb      	ittet	lt
 8005886:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800588a:	461f      	movlt	r7, r3
 800588c:	2300      	movge	r3, #0
 800588e:	232d      	movlt	r3, #45	; 0x2d
 8005890:	b088      	sub	sp, #32
 8005892:	4614      	mov	r4, r2
 8005894:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005896:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005898:	7013      	strb	r3, [r2, #0]
 800589a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800589c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80058a0:	f023 0820 	bic.w	r8, r3, #32
 80058a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058a8:	d005      	beq.n	80058b6 <__cvt+0x3a>
 80058aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80058ae:	d100      	bne.n	80058b2 <__cvt+0x36>
 80058b0:	3501      	adds	r5, #1
 80058b2:	2302      	movs	r3, #2
 80058b4:	e000      	b.n	80058b8 <__cvt+0x3c>
 80058b6:	2303      	movs	r3, #3
 80058b8:	aa07      	add	r2, sp, #28
 80058ba:	9204      	str	r2, [sp, #16]
 80058bc:	aa06      	add	r2, sp, #24
 80058be:	e9cd a202 	strd	sl, r2, [sp, #8]
 80058c2:	e9cd 3500 	strd	r3, r5, [sp]
 80058c6:	4622      	mov	r2, r4
 80058c8:	463b      	mov	r3, r7
 80058ca:	f000 fcf9 	bl	80062c0 <_dtoa_r>
 80058ce:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80058d2:	4606      	mov	r6, r0
 80058d4:	d102      	bne.n	80058dc <__cvt+0x60>
 80058d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058d8:	07db      	lsls	r3, r3, #31
 80058da:	d522      	bpl.n	8005922 <__cvt+0xa6>
 80058dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058e0:	eb06 0905 	add.w	r9, r6, r5
 80058e4:	d110      	bne.n	8005908 <__cvt+0x8c>
 80058e6:	7833      	ldrb	r3, [r6, #0]
 80058e8:	2b30      	cmp	r3, #48	; 0x30
 80058ea:	d10a      	bne.n	8005902 <__cvt+0x86>
 80058ec:	2200      	movs	r2, #0
 80058ee:	2300      	movs	r3, #0
 80058f0:	4620      	mov	r0, r4
 80058f2:	4639      	mov	r1, r7
 80058f4:	f7fb f862 	bl	80009bc <__aeabi_dcmpeq>
 80058f8:	b918      	cbnz	r0, 8005902 <__cvt+0x86>
 80058fa:	f1c5 0501 	rsb	r5, r5, #1
 80058fe:	f8ca 5000 	str.w	r5, [sl]
 8005902:	f8da 3000 	ldr.w	r3, [sl]
 8005906:	4499      	add	r9, r3
 8005908:	2200      	movs	r2, #0
 800590a:	2300      	movs	r3, #0
 800590c:	4620      	mov	r0, r4
 800590e:	4639      	mov	r1, r7
 8005910:	f7fb f854 	bl	80009bc <__aeabi_dcmpeq>
 8005914:	b108      	cbz	r0, 800591a <__cvt+0x9e>
 8005916:	f8cd 901c 	str.w	r9, [sp, #28]
 800591a:	2230      	movs	r2, #48	; 0x30
 800591c:	9b07      	ldr	r3, [sp, #28]
 800591e:	454b      	cmp	r3, r9
 8005920:	d307      	bcc.n	8005932 <__cvt+0xb6>
 8005922:	4630      	mov	r0, r6
 8005924:	9b07      	ldr	r3, [sp, #28]
 8005926:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005928:	1b9b      	subs	r3, r3, r6
 800592a:	6013      	str	r3, [r2, #0]
 800592c:	b008      	add	sp, #32
 800592e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005932:	1c59      	adds	r1, r3, #1
 8005934:	9107      	str	r1, [sp, #28]
 8005936:	701a      	strb	r2, [r3, #0]
 8005938:	e7f0      	b.n	800591c <__cvt+0xa0>

0800593a <__exponent>:
 800593a:	4603      	mov	r3, r0
 800593c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800593e:	2900      	cmp	r1, #0
 8005940:	f803 2b02 	strb.w	r2, [r3], #2
 8005944:	bfb6      	itet	lt
 8005946:	222d      	movlt	r2, #45	; 0x2d
 8005948:	222b      	movge	r2, #43	; 0x2b
 800594a:	4249      	neglt	r1, r1
 800594c:	2909      	cmp	r1, #9
 800594e:	7042      	strb	r2, [r0, #1]
 8005950:	dd2b      	ble.n	80059aa <__exponent+0x70>
 8005952:	f10d 0407 	add.w	r4, sp, #7
 8005956:	46a4      	mov	ip, r4
 8005958:	270a      	movs	r7, #10
 800595a:	fb91 f6f7 	sdiv	r6, r1, r7
 800595e:	460a      	mov	r2, r1
 8005960:	46a6      	mov	lr, r4
 8005962:	fb07 1516 	mls	r5, r7, r6, r1
 8005966:	2a63      	cmp	r2, #99	; 0x63
 8005968:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800596c:	4631      	mov	r1, r6
 800596e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005972:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005976:	dcf0      	bgt.n	800595a <__exponent+0x20>
 8005978:	3130      	adds	r1, #48	; 0x30
 800597a:	f1ae 0502 	sub.w	r5, lr, #2
 800597e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005982:	4629      	mov	r1, r5
 8005984:	1c44      	adds	r4, r0, #1
 8005986:	4561      	cmp	r1, ip
 8005988:	d30a      	bcc.n	80059a0 <__exponent+0x66>
 800598a:	f10d 0209 	add.w	r2, sp, #9
 800598e:	eba2 020e 	sub.w	r2, r2, lr
 8005992:	4565      	cmp	r5, ip
 8005994:	bf88      	it	hi
 8005996:	2200      	movhi	r2, #0
 8005998:	4413      	add	r3, r2
 800599a:	1a18      	subs	r0, r3, r0
 800599c:	b003      	add	sp, #12
 800599e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059a4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80059a8:	e7ed      	b.n	8005986 <__exponent+0x4c>
 80059aa:	2330      	movs	r3, #48	; 0x30
 80059ac:	3130      	adds	r1, #48	; 0x30
 80059ae:	7083      	strb	r3, [r0, #2]
 80059b0:	70c1      	strb	r1, [r0, #3]
 80059b2:	1d03      	adds	r3, r0, #4
 80059b4:	e7f1      	b.n	800599a <__exponent+0x60>
	...

080059b8 <_printf_float>:
 80059b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059bc:	b091      	sub	sp, #68	; 0x44
 80059be:	460c      	mov	r4, r1
 80059c0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80059c4:	4616      	mov	r6, r2
 80059c6:	461f      	mov	r7, r3
 80059c8:	4605      	mov	r5, r0
 80059ca:	f001 fa67 	bl	8006e9c <_localeconv_r>
 80059ce:	6803      	ldr	r3, [r0, #0]
 80059d0:	4618      	mov	r0, r3
 80059d2:	9309      	str	r3, [sp, #36]	; 0x24
 80059d4:	f7fa fbc6 	bl	8000164 <strlen>
 80059d8:	2300      	movs	r3, #0
 80059da:	930e      	str	r3, [sp, #56]	; 0x38
 80059dc:	f8d8 3000 	ldr.w	r3, [r8]
 80059e0:	900a      	str	r0, [sp, #40]	; 0x28
 80059e2:	3307      	adds	r3, #7
 80059e4:	f023 0307 	bic.w	r3, r3, #7
 80059e8:	f103 0208 	add.w	r2, r3, #8
 80059ec:	f894 9018 	ldrb.w	r9, [r4, #24]
 80059f0:	f8d4 b000 	ldr.w	fp, [r4]
 80059f4:	f8c8 2000 	str.w	r2, [r8]
 80059f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005a00:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005a04:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005a08:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a0e:	4640      	mov	r0, r8
 8005a10:	4b9c      	ldr	r3, [pc, #624]	; (8005c84 <_printf_float+0x2cc>)
 8005a12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a14:	f7fb f804 	bl	8000a20 <__aeabi_dcmpun>
 8005a18:	bb70      	cbnz	r0, 8005a78 <_printf_float+0xc0>
 8005a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a1e:	4640      	mov	r0, r8
 8005a20:	4b98      	ldr	r3, [pc, #608]	; (8005c84 <_printf_float+0x2cc>)
 8005a22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a24:	f7fa ffde 	bl	80009e4 <__aeabi_dcmple>
 8005a28:	bb30      	cbnz	r0, 8005a78 <_printf_float+0xc0>
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	4640      	mov	r0, r8
 8005a30:	4651      	mov	r1, sl
 8005a32:	f7fa ffcd 	bl	80009d0 <__aeabi_dcmplt>
 8005a36:	b110      	cbz	r0, 8005a3e <_printf_float+0x86>
 8005a38:	232d      	movs	r3, #45	; 0x2d
 8005a3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a3e:	4b92      	ldr	r3, [pc, #584]	; (8005c88 <_printf_float+0x2d0>)
 8005a40:	4892      	ldr	r0, [pc, #584]	; (8005c8c <_printf_float+0x2d4>)
 8005a42:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005a46:	bf94      	ite	ls
 8005a48:	4698      	movls	r8, r3
 8005a4a:	4680      	movhi	r8, r0
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	f04f 0a00 	mov.w	sl, #0
 8005a52:	6123      	str	r3, [r4, #16]
 8005a54:	f02b 0304 	bic.w	r3, fp, #4
 8005a58:	6023      	str	r3, [r4, #0]
 8005a5a:	4633      	mov	r3, r6
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	4628      	mov	r0, r5
 8005a60:	9700      	str	r7, [sp, #0]
 8005a62:	aa0f      	add	r2, sp, #60	; 0x3c
 8005a64:	f000 f9d4 	bl	8005e10 <_printf_common>
 8005a68:	3001      	adds	r0, #1
 8005a6a:	f040 8090 	bne.w	8005b8e <_printf_float+0x1d6>
 8005a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a72:	b011      	add	sp, #68	; 0x44
 8005a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a78:	4642      	mov	r2, r8
 8005a7a:	4653      	mov	r3, sl
 8005a7c:	4640      	mov	r0, r8
 8005a7e:	4651      	mov	r1, sl
 8005a80:	f7fa ffce 	bl	8000a20 <__aeabi_dcmpun>
 8005a84:	b148      	cbz	r0, 8005a9a <_printf_float+0xe2>
 8005a86:	f1ba 0f00 	cmp.w	sl, #0
 8005a8a:	bfb8      	it	lt
 8005a8c:	232d      	movlt	r3, #45	; 0x2d
 8005a8e:	4880      	ldr	r0, [pc, #512]	; (8005c90 <_printf_float+0x2d8>)
 8005a90:	bfb8      	it	lt
 8005a92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a96:	4b7f      	ldr	r3, [pc, #508]	; (8005c94 <_printf_float+0x2dc>)
 8005a98:	e7d3      	b.n	8005a42 <_printf_float+0x8a>
 8005a9a:	6863      	ldr	r3, [r4, #4]
 8005a9c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	d142      	bne.n	8005b2a <_printf_float+0x172>
 8005aa4:	2306      	movs	r3, #6
 8005aa6:	6063      	str	r3, [r4, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	9206      	str	r2, [sp, #24]
 8005aac:	aa0e      	add	r2, sp, #56	; 0x38
 8005aae:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005ab2:	aa0d      	add	r2, sp, #52	; 0x34
 8005ab4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005ab8:	9203      	str	r2, [sp, #12]
 8005aba:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005abe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005ac2:	6023      	str	r3, [r4, #0]
 8005ac4:	6863      	ldr	r3, [r4, #4]
 8005ac6:	4642      	mov	r2, r8
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	4628      	mov	r0, r5
 8005acc:	4653      	mov	r3, sl
 8005ace:	910b      	str	r1, [sp, #44]	; 0x2c
 8005ad0:	f7ff fed4 	bl	800587c <__cvt>
 8005ad4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ad6:	4680      	mov	r8, r0
 8005ad8:	2947      	cmp	r1, #71	; 0x47
 8005ada:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005adc:	d108      	bne.n	8005af0 <_printf_float+0x138>
 8005ade:	1cc8      	adds	r0, r1, #3
 8005ae0:	db02      	blt.n	8005ae8 <_printf_float+0x130>
 8005ae2:	6863      	ldr	r3, [r4, #4]
 8005ae4:	4299      	cmp	r1, r3
 8005ae6:	dd40      	ble.n	8005b6a <_printf_float+0x1b2>
 8005ae8:	f1a9 0902 	sub.w	r9, r9, #2
 8005aec:	fa5f f989 	uxtb.w	r9, r9
 8005af0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005af4:	d81f      	bhi.n	8005b36 <_printf_float+0x17e>
 8005af6:	464a      	mov	r2, r9
 8005af8:	3901      	subs	r1, #1
 8005afa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005afe:	910d      	str	r1, [sp, #52]	; 0x34
 8005b00:	f7ff ff1b 	bl	800593a <__exponent>
 8005b04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b06:	4682      	mov	sl, r0
 8005b08:	1813      	adds	r3, r2, r0
 8005b0a:	2a01      	cmp	r2, #1
 8005b0c:	6123      	str	r3, [r4, #16]
 8005b0e:	dc02      	bgt.n	8005b16 <_printf_float+0x15e>
 8005b10:	6822      	ldr	r2, [r4, #0]
 8005b12:	07d2      	lsls	r2, r2, #31
 8005b14:	d501      	bpl.n	8005b1a <_printf_float+0x162>
 8005b16:	3301      	adds	r3, #1
 8005b18:	6123      	str	r3, [r4, #16]
 8005b1a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d09b      	beq.n	8005a5a <_printf_float+0xa2>
 8005b22:	232d      	movs	r3, #45	; 0x2d
 8005b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b28:	e797      	b.n	8005a5a <_printf_float+0xa2>
 8005b2a:	2947      	cmp	r1, #71	; 0x47
 8005b2c:	d1bc      	bne.n	8005aa8 <_printf_float+0xf0>
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1ba      	bne.n	8005aa8 <_printf_float+0xf0>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e7b7      	b.n	8005aa6 <_printf_float+0xee>
 8005b36:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005b3a:	d118      	bne.n	8005b6e <_printf_float+0x1b6>
 8005b3c:	2900      	cmp	r1, #0
 8005b3e:	6863      	ldr	r3, [r4, #4]
 8005b40:	dd0b      	ble.n	8005b5a <_printf_float+0x1a2>
 8005b42:	6121      	str	r1, [r4, #16]
 8005b44:	b913      	cbnz	r3, 8005b4c <_printf_float+0x194>
 8005b46:	6822      	ldr	r2, [r4, #0]
 8005b48:	07d0      	lsls	r0, r2, #31
 8005b4a:	d502      	bpl.n	8005b52 <_printf_float+0x19a>
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	440b      	add	r3, r1
 8005b50:	6123      	str	r3, [r4, #16]
 8005b52:	f04f 0a00 	mov.w	sl, #0
 8005b56:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b58:	e7df      	b.n	8005b1a <_printf_float+0x162>
 8005b5a:	b913      	cbnz	r3, 8005b62 <_printf_float+0x1aa>
 8005b5c:	6822      	ldr	r2, [r4, #0]
 8005b5e:	07d2      	lsls	r2, r2, #31
 8005b60:	d501      	bpl.n	8005b66 <_printf_float+0x1ae>
 8005b62:	3302      	adds	r3, #2
 8005b64:	e7f4      	b.n	8005b50 <_printf_float+0x198>
 8005b66:	2301      	movs	r3, #1
 8005b68:	e7f2      	b.n	8005b50 <_printf_float+0x198>
 8005b6a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b70:	4299      	cmp	r1, r3
 8005b72:	db05      	blt.n	8005b80 <_printf_float+0x1c8>
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	6121      	str	r1, [r4, #16]
 8005b78:	07d8      	lsls	r0, r3, #31
 8005b7a:	d5ea      	bpl.n	8005b52 <_printf_float+0x19a>
 8005b7c:	1c4b      	adds	r3, r1, #1
 8005b7e:	e7e7      	b.n	8005b50 <_printf_float+0x198>
 8005b80:	2900      	cmp	r1, #0
 8005b82:	bfcc      	ite	gt
 8005b84:	2201      	movgt	r2, #1
 8005b86:	f1c1 0202 	rsble	r2, r1, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	e7e0      	b.n	8005b50 <_printf_float+0x198>
 8005b8e:	6823      	ldr	r3, [r4, #0]
 8005b90:	055a      	lsls	r2, r3, #21
 8005b92:	d407      	bmi.n	8005ba4 <_printf_float+0x1ec>
 8005b94:	6923      	ldr	r3, [r4, #16]
 8005b96:	4642      	mov	r2, r8
 8005b98:	4631      	mov	r1, r6
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	47b8      	blx	r7
 8005b9e:	3001      	adds	r0, #1
 8005ba0:	d12b      	bne.n	8005bfa <_printf_float+0x242>
 8005ba2:	e764      	b.n	8005a6e <_printf_float+0xb6>
 8005ba4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ba8:	f240 80dd 	bls.w	8005d66 <_printf_float+0x3ae>
 8005bac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f7fa ff02 	bl	80009bc <__aeabi_dcmpeq>
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	d033      	beq.n	8005c24 <_printf_float+0x26c>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	4631      	mov	r1, r6
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	4a35      	ldr	r2, [pc, #212]	; (8005c98 <_printf_float+0x2e0>)
 8005bc4:	47b8      	blx	r7
 8005bc6:	3001      	adds	r0, #1
 8005bc8:	f43f af51 	beq.w	8005a6e <_printf_float+0xb6>
 8005bcc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	db02      	blt.n	8005bda <_printf_float+0x222>
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	07d8      	lsls	r0, r3, #31
 8005bd8:	d50f      	bpl.n	8005bfa <_printf_float+0x242>
 8005bda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bde:	4631      	mov	r1, r6
 8005be0:	4628      	mov	r0, r5
 8005be2:	47b8      	blx	r7
 8005be4:	3001      	adds	r0, #1
 8005be6:	f43f af42 	beq.w	8005a6e <_printf_float+0xb6>
 8005bea:	f04f 0800 	mov.w	r8, #0
 8005bee:	f104 091a 	add.w	r9, r4, #26
 8005bf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	4543      	cmp	r3, r8
 8005bf8:	dc09      	bgt.n	8005c0e <_printf_float+0x256>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	079b      	lsls	r3, r3, #30
 8005bfe:	f100 8102 	bmi.w	8005e06 <_printf_float+0x44e>
 8005c02:	68e0      	ldr	r0, [r4, #12]
 8005c04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c06:	4298      	cmp	r0, r3
 8005c08:	bfb8      	it	lt
 8005c0a:	4618      	movlt	r0, r3
 8005c0c:	e731      	b.n	8005a72 <_printf_float+0xba>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	464a      	mov	r2, r9
 8005c12:	4631      	mov	r1, r6
 8005c14:	4628      	mov	r0, r5
 8005c16:	47b8      	blx	r7
 8005c18:	3001      	adds	r0, #1
 8005c1a:	f43f af28 	beq.w	8005a6e <_printf_float+0xb6>
 8005c1e:	f108 0801 	add.w	r8, r8, #1
 8005c22:	e7e6      	b.n	8005bf2 <_printf_float+0x23a>
 8005c24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	dc38      	bgt.n	8005c9c <_printf_float+0x2e4>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	4631      	mov	r1, r6
 8005c2e:	4628      	mov	r0, r5
 8005c30:	4a19      	ldr	r2, [pc, #100]	; (8005c98 <_printf_float+0x2e0>)
 8005c32:	47b8      	blx	r7
 8005c34:	3001      	adds	r0, #1
 8005c36:	f43f af1a 	beq.w	8005a6e <_printf_float+0xb6>
 8005c3a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	d102      	bne.n	8005c48 <_printf_float+0x290>
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	07d9      	lsls	r1, r3, #31
 8005c46:	d5d8      	bpl.n	8005bfa <_printf_float+0x242>
 8005c48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c4c:	4631      	mov	r1, r6
 8005c4e:	4628      	mov	r0, r5
 8005c50:	47b8      	blx	r7
 8005c52:	3001      	adds	r0, #1
 8005c54:	f43f af0b 	beq.w	8005a6e <_printf_float+0xb6>
 8005c58:	f04f 0900 	mov.w	r9, #0
 8005c5c:	f104 0a1a 	add.w	sl, r4, #26
 8005c60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c62:	425b      	negs	r3, r3
 8005c64:	454b      	cmp	r3, r9
 8005c66:	dc01      	bgt.n	8005c6c <_printf_float+0x2b4>
 8005c68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c6a:	e794      	b.n	8005b96 <_printf_float+0x1de>
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	4652      	mov	r2, sl
 8005c70:	4631      	mov	r1, r6
 8005c72:	4628      	mov	r0, r5
 8005c74:	47b8      	blx	r7
 8005c76:	3001      	adds	r0, #1
 8005c78:	f43f aef9 	beq.w	8005a6e <_printf_float+0xb6>
 8005c7c:	f109 0901 	add.w	r9, r9, #1
 8005c80:	e7ee      	b.n	8005c60 <_printf_float+0x2a8>
 8005c82:	bf00      	nop
 8005c84:	7fefffff 	.word	0x7fefffff
 8005c88:	08008708 	.word	0x08008708
 8005c8c:	0800870c 	.word	0x0800870c
 8005c90:	08008714 	.word	0x08008714
 8005c94:	08008710 	.word	0x08008710
 8005c98:	08008718 	.word	0x08008718
 8005c9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	bfa8      	it	ge
 8005ca4:	461a      	movge	r2, r3
 8005ca6:	2a00      	cmp	r2, #0
 8005ca8:	4691      	mov	r9, r2
 8005caa:	dc37      	bgt.n	8005d1c <_printf_float+0x364>
 8005cac:	f04f 0b00 	mov.w	fp, #0
 8005cb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cb4:	f104 021a 	add.w	r2, r4, #26
 8005cb8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005cbc:	ebaa 0309 	sub.w	r3, sl, r9
 8005cc0:	455b      	cmp	r3, fp
 8005cc2:	dc33      	bgt.n	8005d2c <_printf_float+0x374>
 8005cc4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	db3b      	blt.n	8005d44 <_printf_float+0x38c>
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	07da      	lsls	r2, r3, #31
 8005cd0:	d438      	bmi.n	8005d44 <_printf_float+0x38c>
 8005cd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cd4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005cd6:	eba3 020a 	sub.w	r2, r3, sl
 8005cda:	eba3 0901 	sub.w	r9, r3, r1
 8005cde:	4591      	cmp	r9, r2
 8005ce0:	bfa8      	it	ge
 8005ce2:	4691      	movge	r9, r2
 8005ce4:	f1b9 0f00 	cmp.w	r9, #0
 8005ce8:	dc34      	bgt.n	8005d54 <_printf_float+0x39c>
 8005cea:	f04f 0800 	mov.w	r8, #0
 8005cee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cf2:	f104 0a1a 	add.w	sl, r4, #26
 8005cf6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005cfa:	1a9b      	subs	r3, r3, r2
 8005cfc:	eba3 0309 	sub.w	r3, r3, r9
 8005d00:	4543      	cmp	r3, r8
 8005d02:	f77f af7a 	ble.w	8005bfa <_printf_float+0x242>
 8005d06:	2301      	movs	r3, #1
 8005d08:	4652      	mov	r2, sl
 8005d0a:	4631      	mov	r1, r6
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	47b8      	blx	r7
 8005d10:	3001      	adds	r0, #1
 8005d12:	f43f aeac 	beq.w	8005a6e <_printf_float+0xb6>
 8005d16:	f108 0801 	add.w	r8, r8, #1
 8005d1a:	e7ec      	b.n	8005cf6 <_printf_float+0x33e>
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	4631      	mov	r1, r6
 8005d20:	4642      	mov	r2, r8
 8005d22:	4628      	mov	r0, r5
 8005d24:	47b8      	blx	r7
 8005d26:	3001      	adds	r0, #1
 8005d28:	d1c0      	bne.n	8005cac <_printf_float+0x2f4>
 8005d2a:	e6a0      	b.n	8005a6e <_printf_float+0xb6>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	4631      	mov	r1, r6
 8005d30:	4628      	mov	r0, r5
 8005d32:	920b      	str	r2, [sp, #44]	; 0x2c
 8005d34:	47b8      	blx	r7
 8005d36:	3001      	adds	r0, #1
 8005d38:	f43f ae99 	beq.w	8005a6e <_printf_float+0xb6>
 8005d3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d3e:	f10b 0b01 	add.w	fp, fp, #1
 8005d42:	e7b9      	b.n	8005cb8 <_printf_float+0x300>
 8005d44:	4631      	mov	r1, r6
 8005d46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	47b8      	blx	r7
 8005d4e:	3001      	adds	r0, #1
 8005d50:	d1bf      	bne.n	8005cd2 <_printf_float+0x31a>
 8005d52:	e68c      	b.n	8005a6e <_printf_float+0xb6>
 8005d54:	464b      	mov	r3, r9
 8005d56:	4631      	mov	r1, r6
 8005d58:	4628      	mov	r0, r5
 8005d5a:	eb08 020a 	add.w	r2, r8, sl
 8005d5e:	47b8      	blx	r7
 8005d60:	3001      	adds	r0, #1
 8005d62:	d1c2      	bne.n	8005cea <_printf_float+0x332>
 8005d64:	e683      	b.n	8005a6e <_printf_float+0xb6>
 8005d66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d68:	2a01      	cmp	r2, #1
 8005d6a:	dc01      	bgt.n	8005d70 <_printf_float+0x3b8>
 8005d6c:	07db      	lsls	r3, r3, #31
 8005d6e:	d537      	bpl.n	8005de0 <_printf_float+0x428>
 8005d70:	2301      	movs	r3, #1
 8005d72:	4642      	mov	r2, r8
 8005d74:	4631      	mov	r1, r6
 8005d76:	4628      	mov	r0, r5
 8005d78:	47b8      	blx	r7
 8005d7a:	3001      	adds	r0, #1
 8005d7c:	f43f ae77 	beq.w	8005a6e <_printf_float+0xb6>
 8005d80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d84:	4631      	mov	r1, r6
 8005d86:	4628      	mov	r0, r5
 8005d88:	47b8      	blx	r7
 8005d8a:	3001      	adds	r0, #1
 8005d8c:	f43f ae6f 	beq.w	8005a6e <_printf_float+0xb6>
 8005d90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d94:	2200      	movs	r2, #0
 8005d96:	2300      	movs	r3, #0
 8005d98:	f7fa fe10 	bl	80009bc <__aeabi_dcmpeq>
 8005d9c:	b9d8      	cbnz	r0, 8005dd6 <_printf_float+0x41e>
 8005d9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005da0:	f108 0201 	add.w	r2, r8, #1
 8005da4:	3b01      	subs	r3, #1
 8005da6:	4631      	mov	r1, r6
 8005da8:	4628      	mov	r0, r5
 8005daa:	47b8      	blx	r7
 8005dac:	3001      	adds	r0, #1
 8005dae:	d10e      	bne.n	8005dce <_printf_float+0x416>
 8005db0:	e65d      	b.n	8005a6e <_printf_float+0xb6>
 8005db2:	2301      	movs	r3, #1
 8005db4:	464a      	mov	r2, r9
 8005db6:	4631      	mov	r1, r6
 8005db8:	4628      	mov	r0, r5
 8005dba:	47b8      	blx	r7
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	f43f ae56 	beq.w	8005a6e <_printf_float+0xb6>
 8005dc2:	f108 0801 	add.w	r8, r8, #1
 8005dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	4543      	cmp	r3, r8
 8005dcc:	dcf1      	bgt.n	8005db2 <_printf_float+0x3fa>
 8005dce:	4653      	mov	r3, sl
 8005dd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005dd4:	e6e0      	b.n	8005b98 <_printf_float+0x1e0>
 8005dd6:	f04f 0800 	mov.w	r8, #0
 8005dda:	f104 091a 	add.w	r9, r4, #26
 8005dde:	e7f2      	b.n	8005dc6 <_printf_float+0x40e>
 8005de0:	2301      	movs	r3, #1
 8005de2:	4642      	mov	r2, r8
 8005de4:	e7df      	b.n	8005da6 <_printf_float+0x3ee>
 8005de6:	2301      	movs	r3, #1
 8005de8:	464a      	mov	r2, r9
 8005dea:	4631      	mov	r1, r6
 8005dec:	4628      	mov	r0, r5
 8005dee:	47b8      	blx	r7
 8005df0:	3001      	adds	r0, #1
 8005df2:	f43f ae3c 	beq.w	8005a6e <_printf_float+0xb6>
 8005df6:	f108 0801 	add.w	r8, r8, #1
 8005dfa:	68e3      	ldr	r3, [r4, #12]
 8005dfc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005dfe:	1a5b      	subs	r3, r3, r1
 8005e00:	4543      	cmp	r3, r8
 8005e02:	dcf0      	bgt.n	8005de6 <_printf_float+0x42e>
 8005e04:	e6fd      	b.n	8005c02 <_printf_float+0x24a>
 8005e06:	f04f 0800 	mov.w	r8, #0
 8005e0a:	f104 0919 	add.w	r9, r4, #25
 8005e0e:	e7f4      	b.n	8005dfa <_printf_float+0x442>

08005e10 <_printf_common>:
 8005e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e14:	4616      	mov	r6, r2
 8005e16:	4699      	mov	r9, r3
 8005e18:	688a      	ldr	r2, [r1, #8]
 8005e1a:	690b      	ldr	r3, [r1, #16]
 8005e1c:	4607      	mov	r7, r0
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	bfb8      	it	lt
 8005e22:	4613      	movlt	r3, r2
 8005e24:	6033      	str	r3, [r6, #0]
 8005e26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e2a:	460c      	mov	r4, r1
 8005e2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e30:	b10a      	cbz	r2, 8005e36 <_printf_common+0x26>
 8005e32:	3301      	adds	r3, #1
 8005e34:	6033      	str	r3, [r6, #0]
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	0699      	lsls	r1, r3, #26
 8005e3a:	bf42      	ittt	mi
 8005e3c:	6833      	ldrmi	r3, [r6, #0]
 8005e3e:	3302      	addmi	r3, #2
 8005e40:	6033      	strmi	r3, [r6, #0]
 8005e42:	6825      	ldr	r5, [r4, #0]
 8005e44:	f015 0506 	ands.w	r5, r5, #6
 8005e48:	d106      	bne.n	8005e58 <_printf_common+0x48>
 8005e4a:	f104 0a19 	add.w	sl, r4, #25
 8005e4e:	68e3      	ldr	r3, [r4, #12]
 8005e50:	6832      	ldr	r2, [r6, #0]
 8005e52:	1a9b      	subs	r3, r3, r2
 8005e54:	42ab      	cmp	r3, r5
 8005e56:	dc28      	bgt.n	8005eaa <_printf_common+0x9a>
 8005e58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e5c:	1e13      	subs	r3, r2, #0
 8005e5e:	6822      	ldr	r2, [r4, #0]
 8005e60:	bf18      	it	ne
 8005e62:	2301      	movne	r3, #1
 8005e64:	0692      	lsls	r2, r2, #26
 8005e66:	d42d      	bmi.n	8005ec4 <_printf_common+0xb4>
 8005e68:	4649      	mov	r1, r9
 8005e6a:	4638      	mov	r0, r7
 8005e6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e70:	47c0      	blx	r8
 8005e72:	3001      	adds	r0, #1
 8005e74:	d020      	beq.n	8005eb8 <_printf_common+0xa8>
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	68e5      	ldr	r5, [r4, #12]
 8005e7a:	f003 0306 	and.w	r3, r3, #6
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	bf18      	it	ne
 8005e82:	2500      	movne	r5, #0
 8005e84:	6832      	ldr	r2, [r6, #0]
 8005e86:	f04f 0600 	mov.w	r6, #0
 8005e8a:	68a3      	ldr	r3, [r4, #8]
 8005e8c:	bf08      	it	eq
 8005e8e:	1aad      	subeq	r5, r5, r2
 8005e90:	6922      	ldr	r2, [r4, #16]
 8005e92:	bf08      	it	eq
 8005e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	bfc4      	itt	gt
 8005e9c:	1a9b      	subgt	r3, r3, r2
 8005e9e:	18ed      	addgt	r5, r5, r3
 8005ea0:	341a      	adds	r4, #26
 8005ea2:	42b5      	cmp	r5, r6
 8005ea4:	d11a      	bne.n	8005edc <_printf_common+0xcc>
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	e008      	b.n	8005ebc <_printf_common+0xac>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	4652      	mov	r2, sl
 8005eae:	4649      	mov	r1, r9
 8005eb0:	4638      	mov	r0, r7
 8005eb2:	47c0      	blx	r8
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d103      	bne.n	8005ec0 <_printf_common+0xb0>
 8005eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec0:	3501      	adds	r5, #1
 8005ec2:	e7c4      	b.n	8005e4e <_printf_common+0x3e>
 8005ec4:	2030      	movs	r0, #48	; 0x30
 8005ec6:	18e1      	adds	r1, r4, r3
 8005ec8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ecc:	1c5a      	adds	r2, r3, #1
 8005ece:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ed2:	4422      	add	r2, r4
 8005ed4:	3302      	adds	r3, #2
 8005ed6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005eda:	e7c5      	b.n	8005e68 <_printf_common+0x58>
 8005edc:	2301      	movs	r3, #1
 8005ede:	4622      	mov	r2, r4
 8005ee0:	4649      	mov	r1, r9
 8005ee2:	4638      	mov	r0, r7
 8005ee4:	47c0      	blx	r8
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	d0e6      	beq.n	8005eb8 <_printf_common+0xa8>
 8005eea:	3601      	adds	r6, #1
 8005eec:	e7d9      	b.n	8005ea2 <_printf_common+0x92>
	...

08005ef0 <_printf_i>:
 8005ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef4:	7e0f      	ldrb	r7, [r1, #24]
 8005ef6:	4691      	mov	r9, r2
 8005ef8:	2f78      	cmp	r7, #120	; 0x78
 8005efa:	4680      	mov	r8, r0
 8005efc:	460c      	mov	r4, r1
 8005efe:	469a      	mov	sl, r3
 8005f00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f06:	d807      	bhi.n	8005f18 <_printf_i+0x28>
 8005f08:	2f62      	cmp	r7, #98	; 0x62
 8005f0a:	d80a      	bhi.n	8005f22 <_printf_i+0x32>
 8005f0c:	2f00      	cmp	r7, #0
 8005f0e:	f000 80d9 	beq.w	80060c4 <_printf_i+0x1d4>
 8005f12:	2f58      	cmp	r7, #88	; 0x58
 8005f14:	f000 80a4 	beq.w	8006060 <_printf_i+0x170>
 8005f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f20:	e03a      	b.n	8005f98 <_printf_i+0xa8>
 8005f22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f26:	2b15      	cmp	r3, #21
 8005f28:	d8f6      	bhi.n	8005f18 <_printf_i+0x28>
 8005f2a:	a101      	add	r1, pc, #4	; (adr r1, 8005f30 <_printf_i+0x40>)
 8005f2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f30:	08005f89 	.word	0x08005f89
 8005f34:	08005f9d 	.word	0x08005f9d
 8005f38:	08005f19 	.word	0x08005f19
 8005f3c:	08005f19 	.word	0x08005f19
 8005f40:	08005f19 	.word	0x08005f19
 8005f44:	08005f19 	.word	0x08005f19
 8005f48:	08005f9d 	.word	0x08005f9d
 8005f4c:	08005f19 	.word	0x08005f19
 8005f50:	08005f19 	.word	0x08005f19
 8005f54:	08005f19 	.word	0x08005f19
 8005f58:	08005f19 	.word	0x08005f19
 8005f5c:	080060ab 	.word	0x080060ab
 8005f60:	08005fcd 	.word	0x08005fcd
 8005f64:	0800608d 	.word	0x0800608d
 8005f68:	08005f19 	.word	0x08005f19
 8005f6c:	08005f19 	.word	0x08005f19
 8005f70:	080060cd 	.word	0x080060cd
 8005f74:	08005f19 	.word	0x08005f19
 8005f78:	08005fcd 	.word	0x08005fcd
 8005f7c:	08005f19 	.word	0x08005f19
 8005f80:	08005f19 	.word	0x08005f19
 8005f84:	08006095 	.word	0x08006095
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	1d1a      	adds	r2, r3, #4
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	602a      	str	r2, [r5, #0]
 8005f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e0a4      	b.n	80060e6 <_printf_i+0x1f6>
 8005f9c:	6820      	ldr	r0, [r4, #0]
 8005f9e:	6829      	ldr	r1, [r5, #0]
 8005fa0:	0606      	lsls	r6, r0, #24
 8005fa2:	f101 0304 	add.w	r3, r1, #4
 8005fa6:	d50a      	bpl.n	8005fbe <_printf_i+0xce>
 8005fa8:	680e      	ldr	r6, [r1, #0]
 8005faa:	602b      	str	r3, [r5, #0]
 8005fac:	2e00      	cmp	r6, #0
 8005fae:	da03      	bge.n	8005fb8 <_printf_i+0xc8>
 8005fb0:	232d      	movs	r3, #45	; 0x2d
 8005fb2:	4276      	negs	r6, r6
 8005fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fb8:	230a      	movs	r3, #10
 8005fba:	485e      	ldr	r0, [pc, #376]	; (8006134 <_printf_i+0x244>)
 8005fbc:	e019      	b.n	8005ff2 <_printf_i+0x102>
 8005fbe:	680e      	ldr	r6, [r1, #0]
 8005fc0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005fc4:	602b      	str	r3, [r5, #0]
 8005fc6:	bf18      	it	ne
 8005fc8:	b236      	sxthne	r6, r6
 8005fca:	e7ef      	b.n	8005fac <_printf_i+0xbc>
 8005fcc:	682b      	ldr	r3, [r5, #0]
 8005fce:	6820      	ldr	r0, [r4, #0]
 8005fd0:	1d19      	adds	r1, r3, #4
 8005fd2:	6029      	str	r1, [r5, #0]
 8005fd4:	0601      	lsls	r1, r0, #24
 8005fd6:	d501      	bpl.n	8005fdc <_printf_i+0xec>
 8005fd8:	681e      	ldr	r6, [r3, #0]
 8005fda:	e002      	b.n	8005fe2 <_printf_i+0xf2>
 8005fdc:	0646      	lsls	r6, r0, #25
 8005fde:	d5fb      	bpl.n	8005fd8 <_printf_i+0xe8>
 8005fe0:	881e      	ldrh	r6, [r3, #0]
 8005fe2:	2f6f      	cmp	r7, #111	; 0x6f
 8005fe4:	bf0c      	ite	eq
 8005fe6:	2308      	moveq	r3, #8
 8005fe8:	230a      	movne	r3, #10
 8005fea:	4852      	ldr	r0, [pc, #328]	; (8006134 <_printf_i+0x244>)
 8005fec:	2100      	movs	r1, #0
 8005fee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ff2:	6865      	ldr	r5, [r4, #4]
 8005ff4:	2d00      	cmp	r5, #0
 8005ff6:	bfa8      	it	ge
 8005ff8:	6821      	ldrge	r1, [r4, #0]
 8005ffa:	60a5      	str	r5, [r4, #8]
 8005ffc:	bfa4      	itt	ge
 8005ffe:	f021 0104 	bicge.w	r1, r1, #4
 8006002:	6021      	strge	r1, [r4, #0]
 8006004:	b90e      	cbnz	r6, 800600a <_printf_i+0x11a>
 8006006:	2d00      	cmp	r5, #0
 8006008:	d04d      	beq.n	80060a6 <_printf_i+0x1b6>
 800600a:	4615      	mov	r5, r2
 800600c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006010:	fb03 6711 	mls	r7, r3, r1, r6
 8006014:	5dc7      	ldrb	r7, [r0, r7]
 8006016:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800601a:	4637      	mov	r7, r6
 800601c:	42bb      	cmp	r3, r7
 800601e:	460e      	mov	r6, r1
 8006020:	d9f4      	bls.n	800600c <_printf_i+0x11c>
 8006022:	2b08      	cmp	r3, #8
 8006024:	d10b      	bne.n	800603e <_printf_i+0x14e>
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	07de      	lsls	r6, r3, #31
 800602a:	d508      	bpl.n	800603e <_printf_i+0x14e>
 800602c:	6923      	ldr	r3, [r4, #16]
 800602e:	6861      	ldr	r1, [r4, #4]
 8006030:	4299      	cmp	r1, r3
 8006032:	bfde      	ittt	le
 8006034:	2330      	movle	r3, #48	; 0x30
 8006036:	f805 3c01 	strble.w	r3, [r5, #-1]
 800603a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800603e:	1b52      	subs	r2, r2, r5
 8006040:	6122      	str	r2, [r4, #16]
 8006042:	464b      	mov	r3, r9
 8006044:	4621      	mov	r1, r4
 8006046:	4640      	mov	r0, r8
 8006048:	f8cd a000 	str.w	sl, [sp]
 800604c:	aa03      	add	r2, sp, #12
 800604e:	f7ff fedf 	bl	8005e10 <_printf_common>
 8006052:	3001      	adds	r0, #1
 8006054:	d14c      	bne.n	80060f0 <_printf_i+0x200>
 8006056:	f04f 30ff 	mov.w	r0, #4294967295
 800605a:	b004      	add	sp, #16
 800605c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006060:	4834      	ldr	r0, [pc, #208]	; (8006134 <_printf_i+0x244>)
 8006062:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006066:	6829      	ldr	r1, [r5, #0]
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	f851 6b04 	ldr.w	r6, [r1], #4
 800606e:	6029      	str	r1, [r5, #0]
 8006070:	061d      	lsls	r5, r3, #24
 8006072:	d514      	bpl.n	800609e <_printf_i+0x1ae>
 8006074:	07df      	lsls	r7, r3, #31
 8006076:	bf44      	itt	mi
 8006078:	f043 0320 	orrmi.w	r3, r3, #32
 800607c:	6023      	strmi	r3, [r4, #0]
 800607e:	b91e      	cbnz	r6, 8006088 <_printf_i+0x198>
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	f023 0320 	bic.w	r3, r3, #32
 8006086:	6023      	str	r3, [r4, #0]
 8006088:	2310      	movs	r3, #16
 800608a:	e7af      	b.n	8005fec <_printf_i+0xfc>
 800608c:	6823      	ldr	r3, [r4, #0]
 800608e:	f043 0320 	orr.w	r3, r3, #32
 8006092:	6023      	str	r3, [r4, #0]
 8006094:	2378      	movs	r3, #120	; 0x78
 8006096:	4828      	ldr	r0, [pc, #160]	; (8006138 <_printf_i+0x248>)
 8006098:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800609c:	e7e3      	b.n	8006066 <_printf_i+0x176>
 800609e:	0659      	lsls	r1, r3, #25
 80060a0:	bf48      	it	mi
 80060a2:	b2b6      	uxthmi	r6, r6
 80060a4:	e7e6      	b.n	8006074 <_printf_i+0x184>
 80060a6:	4615      	mov	r5, r2
 80060a8:	e7bb      	b.n	8006022 <_printf_i+0x132>
 80060aa:	682b      	ldr	r3, [r5, #0]
 80060ac:	6826      	ldr	r6, [r4, #0]
 80060ae:	1d18      	adds	r0, r3, #4
 80060b0:	6961      	ldr	r1, [r4, #20]
 80060b2:	6028      	str	r0, [r5, #0]
 80060b4:	0635      	lsls	r5, r6, #24
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	d501      	bpl.n	80060be <_printf_i+0x1ce>
 80060ba:	6019      	str	r1, [r3, #0]
 80060bc:	e002      	b.n	80060c4 <_printf_i+0x1d4>
 80060be:	0670      	lsls	r0, r6, #25
 80060c0:	d5fb      	bpl.n	80060ba <_printf_i+0x1ca>
 80060c2:	8019      	strh	r1, [r3, #0]
 80060c4:	2300      	movs	r3, #0
 80060c6:	4615      	mov	r5, r2
 80060c8:	6123      	str	r3, [r4, #16]
 80060ca:	e7ba      	b.n	8006042 <_printf_i+0x152>
 80060cc:	682b      	ldr	r3, [r5, #0]
 80060ce:	2100      	movs	r1, #0
 80060d0:	1d1a      	adds	r2, r3, #4
 80060d2:	602a      	str	r2, [r5, #0]
 80060d4:	681d      	ldr	r5, [r3, #0]
 80060d6:	6862      	ldr	r2, [r4, #4]
 80060d8:	4628      	mov	r0, r5
 80060da:	f000 feeb 	bl	8006eb4 <memchr>
 80060de:	b108      	cbz	r0, 80060e4 <_printf_i+0x1f4>
 80060e0:	1b40      	subs	r0, r0, r5
 80060e2:	6060      	str	r0, [r4, #4]
 80060e4:	6863      	ldr	r3, [r4, #4]
 80060e6:	6123      	str	r3, [r4, #16]
 80060e8:	2300      	movs	r3, #0
 80060ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060ee:	e7a8      	b.n	8006042 <_printf_i+0x152>
 80060f0:	462a      	mov	r2, r5
 80060f2:	4649      	mov	r1, r9
 80060f4:	4640      	mov	r0, r8
 80060f6:	6923      	ldr	r3, [r4, #16]
 80060f8:	47d0      	blx	sl
 80060fa:	3001      	adds	r0, #1
 80060fc:	d0ab      	beq.n	8006056 <_printf_i+0x166>
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	079b      	lsls	r3, r3, #30
 8006102:	d413      	bmi.n	800612c <_printf_i+0x23c>
 8006104:	68e0      	ldr	r0, [r4, #12]
 8006106:	9b03      	ldr	r3, [sp, #12]
 8006108:	4298      	cmp	r0, r3
 800610a:	bfb8      	it	lt
 800610c:	4618      	movlt	r0, r3
 800610e:	e7a4      	b.n	800605a <_printf_i+0x16a>
 8006110:	2301      	movs	r3, #1
 8006112:	4632      	mov	r2, r6
 8006114:	4649      	mov	r1, r9
 8006116:	4640      	mov	r0, r8
 8006118:	47d0      	blx	sl
 800611a:	3001      	adds	r0, #1
 800611c:	d09b      	beq.n	8006056 <_printf_i+0x166>
 800611e:	3501      	adds	r5, #1
 8006120:	68e3      	ldr	r3, [r4, #12]
 8006122:	9903      	ldr	r1, [sp, #12]
 8006124:	1a5b      	subs	r3, r3, r1
 8006126:	42ab      	cmp	r3, r5
 8006128:	dcf2      	bgt.n	8006110 <_printf_i+0x220>
 800612a:	e7eb      	b.n	8006104 <_printf_i+0x214>
 800612c:	2500      	movs	r5, #0
 800612e:	f104 0619 	add.w	r6, r4, #25
 8006132:	e7f5      	b.n	8006120 <_printf_i+0x230>
 8006134:	0800871a 	.word	0x0800871a
 8006138:	0800872b 	.word	0x0800872b

0800613c <siprintf>:
 800613c:	b40e      	push	{r1, r2, r3}
 800613e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006142:	b500      	push	{lr}
 8006144:	b09c      	sub	sp, #112	; 0x70
 8006146:	ab1d      	add	r3, sp, #116	; 0x74
 8006148:	9002      	str	r0, [sp, #8]
 800614a:	9006      	str	r0, [sp, #24]
 800614c:	9107      	str	r1, [sp, #28]
 800614e:	9104      	str	r1, [sp, #16]
 8006150:	4808      	ldr	r0, [pc, #32]	; (8006174 <siprintf+0x38>)
 8006152:	4909      	ldr	r1, [pc, #36]	; (8006178 <siprintf+0x3c>)
 8006154:	f853 2b04 	ldr.w	r2, [r3], #4
 8006158:	9105      	str	r1, [sp, #20]
 800615a:	6800      	ldr	r0, [r0, #0]
 800615c:	a902      	add	r1, sp, #8
 800615e:	9301      	str	r3, [sp, #4]
 8006160:	f001 fb92 	bl	8007888 <_svfiprintf_r>
 8006164:	2200      	movs	r2, #0
 8006166:	9b02      	ldr	r3, [sp, #8]
 8006168:	701a      	strb	r2, [r3, #0]
 800616a:	b01c      	add	sp, #112	; 0x70
 800616c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006170:	b003      	add	sp, #12
 8006172:	4770      	bx	lr
 8006174:	2000001c 	.word	0x2000001c
 8006178:	ffff0208 	.word	0xffff0208

0800617c <strncpy>:
 800617c:	4603      	mov	r3, r0
 800617e:	b510      	push	{r4, lr}
 8006180:	3901      	subs	r1, #1
 8006182:	b132      	cbz	r2, 8006192 <strncpy+0x16>
 8006184:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006188:	3a01      	subs	r2, #1
 800618a:	f803 4b01 	strb.w	r4, [r3], #1
 800618e:	2c00      	cmp	r4, #0
 8006190:	d1f7      	bne.n	8006182 <strncpy+0x6>
 8006192:	2100      	movs	r1, #0
 8006194:	441a      	add	r2, r3
 8006196:	4293      	cmp	r3, r2
 8006198:	d100      	bne.n	800619c <strncpy+0x20>
 800619a:	bd10      	pop	{r4, pc}
 800619c:	f803 1b01 	strb.w	r1, [r3], #1
 80061a0:	e7f9      	b.n	8006196 <strncpy+0x1a>

080061a2 <quorem>:
 80061a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a6:	6903      	ldr	r3, [r0, #16]
 80061a8:	690c      	ldr	r4, [r1, #16]
 80061aa:	4607      	mov	r7, r0
 80061ac:	42a3      	cmp	r3, r4
 80061ae:	f2c0 8082 	blt.w	80062b6 <quorem+0x114>
 80061b2:	3c01      	subs	r4, #1
 80061b4:	f100 0514 	add.w	r5, r0, #20
 80061b8:	f101 0814 	add.w	r8, r1, #20
 80061bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061c0:	9301      	str	r3, [sp, #4]
 80061c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061ca:	3301      	adds	r3, #1
 80061cc:	429a      	cmp	r2, r3
 80061ce:	fbb2 f6f3 	udiv	r6, r2, r3
 80061d2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80061d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061da:	d331      	bcc.n	8006240 <quorem+0x9e>
 80061dc:	f04f 0e00 	mov.w	lr, #0
 80061e0:	4640      	mov	r0, r8
 80061e2:	46ac      	mov	ip, r5
 80061e4:	46f2      	mov	sl, lr
 80061e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80061ea:	b293      	uxth	r3, r2
 80061ec:	fb06 e303 	mla	r3, r6, r3, lr
 80061f0:	0c12      	lsrs	r2, r2, #16
 80061f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	fb06 e202 	mla	r2, r6, r2, lr
 80061fc:	ebaa 0303 	sub.w	r3, sl, r3
 8006200:	f8dc a000 	ldr.w	sl, [ip]
 8006204:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006208:	fa1f fa8a 	uxth.w	sl, sl
 800620c:	4453      	add	r3, sl
 800620e:	f8dc a000 	ldr.w	sl, [ip]
 8006212:	b292      	uxth	r2, r2
 8006214:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006218:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800621c:	b29b      	uxth	r3, r3
 800621e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006222:	4581      	cmp	r9, r0
 8006224:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006228:	f84c 3b04 	str.w	r3, [ip], #4
 800622c:	d2db      	bcs.n	80061e6 <quorem+0x44>
 800622e:	f855 300b 	ldr.w	r3, [r5, fp]
 8006232:	b92b      	cbnz	r3, 8006240 <quorem+0x9e>
 8006234:	9b01      	ldr	r3, [sp, #4]
 8006236:	3b04      	subs	r3, #4
 8006238:	429d      	cmp	r5, r3
 800623a:	461a      	mov	r2, r3
 800623c:	d32f      	bcc.n	800629e <quorem+0xfc>
 800623e:	613c      	str	r4, [r7, #16]
 8006240:	4638      	mov	r0, r7
 8006242:	f001 f8d1 	bl	80073e8 <__mcmp>
 8006246:	2800      	cmp	r0, #0
 8006248:	db25      	blt.n	8006296 <quorem+0xf4>
 800624a:	4628      	mov	r0, r5
 800624c:	f04f 0c00 	mov.w	ip, #0
 8006250:	3601      	adds	r6, #1
 8006252:	f858 1b04 	ldr.w	r1, [r8], #4
 8006256:	f8d0 e000 	ldr.w	lr, [r0]
 800625a:	b28b      	uxth	r3, r1
 800625c:	ebac 0303 	sub.w	r3, ip, r3
 8006260:	fa1f f28e 	uxth.w	r2, lr
 8006264:	4413      	add	r3, r2
 8006266:	0c0a      	lsrs	r2, r1, #16
 8006268:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800626c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006270:	b29b      	uxth	r3, r3
 8006272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006276:	45c1      	cmp	r9, r8
 8006278:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800627c:	f840 3b04 	str.w	r3, [r0], #4
 8006280:	d2e7      	bcs.n	8006252 <quorem+0xb0>
 8006282:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006286:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800628a:	b922      	cbnz	r2, 8006296 <quorem+0xf4>
 800628c:	3b04      	subs	r3, #4
 800628e:	429d      	cmp	r5, r3
 8006290:	461a      	mov	r2, r3
 8006292:	d30a      	bcc.n	80062aa <quorem+0x108>
 8006294:	613c      	str	r4, [r7, #16]
 8006296:	4630      	mov	r0, r6
 8006298:	b003      	add	sp, #12
 800629a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629e:	6812      	ldr	r2, [r2, #0]
 80062a0:	3b04      	subs	r3, #4
 80062a2:	2a00      	cmp	r2, #0
 80062a4:	d1cb      	bne.n	800623e <quorem+0x9c>
 80062a6:	3c01      	subs	r4, #1
 80062a8:	e7c6      	b.n	8006238 <quorem+0x96>
 80062aa:	6812      	ldr	r2, [r2, #0]
 80062ac:	3b04      	subs	r3, #4
 80062ae:	2a00      	cmp	r2, #0
 80062b0:	d1f0      	bne.n	8006294 <quorem+0xf2>
 80062b2:	3c01      	subs	r4, #1
 80062b4:	e7eb      	b.n	800628e <quorem+0xec>
 80062b6:	2000      	movs	r0, #0
 80062b8:	e7ee      	b.n	8006298 <quorem+0xf6>
 80062ba:	0000      	movs	r0, r0
 80062bc:	0000      	movs	r0, r0
	...

080062c0 <_dtoa_r>:
 80062c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c4:	4616      	mov	r6, r2
 80062c6:	461f      	mov	r7, r3
 80062c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80062ca:	b099      	sub	sp, #100	; 0x64
 80062cc:	4605      	mov	r5, r0
 80062ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80062d2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80062d6:	b974      	cbnz	r4, 80062f6 <_dtoa_r+0x36>
 80062d8:	2010      	movs	r0, #16
 80062da:	f000 fde3 	bl	8006ea4 <malloc>
 80062de:	4602      	mov	r2, r0
 80062e0:	6268      	str	r0, [r5, #36]	; 0x24
 80062e2:	b920      	cbnz	r0, 80062ee <_dtoa_r+0x2e>
 80062e4:	21ea      	movs	r1, #234	; 0xea
 80062e6:	4ba8      	ldr	r3, [pc, #672]	; (8006588 <_dtoa_r+0x2c8>)
 80062e8:	48a8      	ldr	r0, [pc, #672]	; (800658c <_dtoa_r+0x2cc>)
 80062ea:	f001 fbdd 	bl	8007aa8 <__assert_func>
 80062ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062f2:	6004      	str	r4, [r0, #0]
 80062f4:	60c4      	str	r4, [r0, #12]
 80062f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80062f8:	6819      	ldr	r1, [r3, #0]
 80062fa:	b151      	cbz	r1, 8006312 <_dtoa_r+0x52>
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	2301      	movs	r3, #1
 8006300:	4093      	lsls	r3, r2
 8006302:	604a      	str	r2, [r1, #4]
 8006304:	608b      	str	r3, [r1, #8]
 8006306:	4628      	mov	r0, r5
 8006308:	f000 fe30 	bl	8006f6c <_Bfree>
 800630c:	2200      	movs	r2, #0
 800630e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	1e3b      	subs	r3, r7, #0
 8006314:	bfaf      	iteee	ge
 8006316:	2300      	movge	r3, #0
 8006318:	2201      	movlt	r2, #1
 800631a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800631e:	9305      	strlt	r3, [sp, #20]
 8006320:	bfa8      	it	ge
 8006322:	f8c8 3000 	strge.w	r3, [r8]
 8006326:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800632a:	4b99      	ldr	r3, [pc, #612]	; (8006590 <_dtoa_r+0x2d0>)
 800632c:	bfb8      	it	lt
 800632e:	f8c8 2000 	strlt.w	r2, [r8]
 8006332:	ea33 0309 	bics.w	r3, r3, r9
 8006336:	d119      	bne.n	800636c <_dtoa_r+0xac>
 8006338:	f242 730f 	movw	r3, #9999	; 0x270f
 800633c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800633e:	6013      	str	r3, [r2, #0]
 8006340:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006344:	4333      	orrs	r3, r6
 8006346:	f000 857f 	beq.w	8006e48 <_dtoa_r+0xb88>
 800634a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800634c:	b953      	cbnz	r3, 8006364 <_dtoa_r+0xa4>
 800634e:	4b91      	ldr	r3, [pc, #580]	; (8006594 <_dtoa_r+0x2d4>)
 8006350:	e022      	b.n	8006398 <_dtoa_r+0xd8>
 8006352:	4b91      	ldr	r3, [pc, #580]	; (8006598 <_dtoa_r+0x2d8>)
 8006354:	9303      	str	r3, [sp, #12]
 8006356:	3308      	adds	r3, #8
 8006358:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800635a:	6013      	str	r3, [r2, #0]
 800635c:	9803      	ldr	r0, [sp, #12]
 800635e:	b019      	add	sp, #100	; 0x64
 8006360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006364:	4b8b      	ldr	r3, [pc, #556]	; (8006594 <_dtoa_r+0x2d4>)
 8006366:	9303      	str	r3, [sp, #12]
 8006368:	3303      	adds	r3, #3
 800636a:	e7f5      	b.n	8006358 <_dtoa_r+0x98>
 800636c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006370:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006374:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006378:	2200      	movs	r2, #0
 800637a:	2300      	movs	r3, #0
 800637c:	f7fa fb1e 	bl	80009bc <__aeabi_dcmpeq>
 8006380:	4680      	mov	r8, r0
 8006382:	b158      	cbz	r0, 800639c <_dtoa_r+0xdc>
 8006384:	2301      	movs	r3, #1
 8006386:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 8558 	beq.w	8006e42 <_dtoa_r+0xb82>
 8006392:	4882      	ldr	r0, [pc, #520]	; (800659c <_dtoa_r+0x2dc>)
 8006394:	6018      	str	r0, [r3, #0]
 8006396:	1e43      	subs	r3, r0, #1
 8006398:	9303      	str	r3, [sp, #12]
 800639a:	e7df      	b.n	800635c <_dtoa_r+0x9c>
 800639c:	ab16      	add	r3, sp, #88	; 0x58
 800639e:	9301      	str	r3, [sp, #4]
 80063a0:	ab17      	add	r3, sp, #92	; 0x5c
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	4628      	mov	r0, r5
 80063a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80063aa:	f001 f8c5 	bl	8007538 <__d2b>
 80063ae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80063b2:	4683      	mov	fp, r0
 80063b4:	2c00      	cmp	r4, #0
 80063b6:	d07f      	beq.n	80064b8 <_dtoa_r+0x1f8>
 80063b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063be:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80063c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063c6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80063ca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80063ce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80063d2:	2200      	movs	r2, #0
 80063d4:	4b72      	ldr	r3, [pc, #456]	; (80065a0 <_dtoa_r+0x2e0>)
 80063d6:	f7f9 fed1 	bl	800017c <__aeabi_dsub>
 80063da:	a365      	add	r3, pc, #404	; (adr r3, 8006570 <_dtoa_r+0x2b0>)
 80063dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e0:	f7fa f884 	bl	80004ec <__aeabi_dmul>
 80063e4:	a364      	add	r3, pc, #400	; (adr r3, 8006578 <_dtoa_r+0x2b8>)
 80063e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ea:	f7f9 fec9 	bl	8000180 <__adddf3>
 80063ee:	4606      	mov	r6, r0
 80063f0:	4620      	mov	r0, r4
 80063f2:	460f      	mov	r7, r1
 80063f4:	f7fa f810 	bl	8000418 <__aeabi_i2d>
 80063f8:	a361      	add	r3, pc, #388	; (adr r3, 8006580 <_dtoa_r+0x2c0>)
 80063fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fe:	f7fa f875 	bl	80004ec <__aeabi_dmul>
 8006402:	4602      	mov	r2, r0
 8006404:	460b      	mov	r3, r1
 8006406:	4630      	mov	r0, r6
 8006408:	4639      	mov	r1, r7
 800640a:	f7f9 feb9 	bl	8000180 <__adddf3>
 800640e:	4606      	mov	r6, r0
 8006410:	460f      	mov	r7, r1
 8006412:	f7fa fb1b 	bl	8000a4c <__aeabi_d2iz>
 8006416:	2200      	movs	r2, #0
 8006418:	4682      	mov	sl, r0
 800641a:	2300      	movs	r3, #0
 800641c:	4630      	mov	r0, r6
 800641e:	4639      	mov	r1, r7
 8006420:	f7fa fad6 	bl	80009d0 <__aeabi_dcmplt>
 8006424:	b148      	cbz	r0, 800643a <_dtoa_r+0x17a>
 8006426:	4650      	mov	r0, sl
 8006428:	f7f9 fff6 	bl	8000418 <__aeabi_i2d>
 800642c:	4632      	mov	r2, r6
 800642e:	463b      	mov	r3, r7
 8006430:	f7fa fac4 	bl	80009bc <__aeabi_dcmpeq>
 8006434:	b908      	cbnz	r0, 800643a <_dtoa_r+0x17a>
 8006436:	f10a 3aff 	add.w	sl, sl, #4294967295
 800643a:	f1ba 0f16 	cmp.w	sl, #22
 800643e:	d858      	bhi.n	80064f2 <_dtoa_r+0x232>
 8006440:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006444:	4b57      	ldr	r3, [pc, #348]	; (80065a4 <_dtoa_r+0x2e4>)
 8006446:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800644a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644e:	f7fa fabf 	bl	80009d0 <__aeabi_dcmplt>
 8006452:	2800      	cmp	r0, #0
 8006454:	d04f      	beq.n	80064f6 <_dtoa_r+0x236>
 8006456:	2300      	movs	r3, #0
 8006458:	f10a 3aff 	add.w	sl, sl, #4294967295
 800645c:	930f      	str	r3, [sp, #60]	; 0x3c
 800645e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006460:	1b1c      	subs	r4, r3, r4
 8006462:	1e63      	subs	r3, r4, #1
 8006464:	9309      	str	r3, [sp, #36]	; 0x24
 8006466:	bf49      	itett	mi
 8006468:	f1c4 0301 	rsbmi	r3, r4, #1
 800646c:	2300      	movpl	r3, #0
 800646e:	9306      	strmi	r3, [sp, #24]
 8006470:	2300      	movmi	r3, #0
 8006472:	bf54      	ite	pl
 8006474:	9306      	strpl	r3, [sp, #24]
 8006476:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006478:	f1ba 0f00 	cmp.w	sl, #0
 800647c:	db3d      	blt.n	80064fa <_dtoa_r+0x23a>
 800647e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006480:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006484:	4453      	add	r3, sl
 8006486:	9309      	str	r3, [sp, #36]	; 0x24
 8006488:	2300      	movs	r3, #0
 800648a:	930a      	str	r3, [sp, #40]	; 0x28
 800648c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800648e:	2b09      	cmp	r3, #9
 8006490:	f200 808c 	bhi.w	80065ac <_dtoa_r+0x2ec>
 8006494:	2b05      	cmp	r3, #5
 8006496:	bfc4      	itt	gt
 8006498:	3b04      	subgt	r3, #4
 800649a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800649c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800649e:	bfc8      	it	gt
 80064a0:	2400      	movgt	r4, #0
 80064a2:	f1a3 0302 	sub.w	r3, r3, #2
 80064a6:	bfd8      	it	le
 80064a8:	2401      	movle	r4, #1
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	f200 808a 	bhi.w	80065c4 <_dtoa_r+0x304>
 80064b0:	e8df f003 	tbb	[pc, r3]
 80064b4:	5b4d4f2d 	.word	0x5b4d4f2d
 80064b8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80064bc:	441c      	add	r4, r3
 80064be:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	bfc3      	ittte	gt
 80064c6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80064ca:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80064ce:	fa09 f303 	lslgt.w	r3, r9, r3
 80064d2:	f1c3 0320 	rsble	r3, r3, #32
 80064d6:	bfc6      	itte	gt
 80064d8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80064dc:	4318      	orrgt	r0, r3
 80064de:	fa06 f003 	lslle.w	r0, r6, r3
 80064e2:	f7f9 ff89 	bl	80003f8 <__aeabi_ui2d>
 80064e6:	2301      	movs	r3, #1
 80064e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80064ec:	3c01      	subs	r4, #1
 80064ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80064f0:	e76f      	b.n	80063d2 <_dtoa_r+0x112>
 80064f2:	2301      	movs	r3, #1
 80064f4:	e7b2      	b.n	800645c <_dtoa_r+0x19c>
 80064f6:	900f      	str	r0, [sp, #60]	; 0x3c
 80064f8:	e7b1      	b.n	800645e <_dtoa_r+0x19e>
 80064fa:	9b06      	ldr	r3, [sp, #24]
 80064fc:	eba3 030a 	sub.w	r3, r3, sl
 8006500:	9306      	str	r3, [sp, #24]
 8006502:	f1ca 0300 	rsb	r3, sl, #0
 8006506:	930a      	str	r3, [sp, #40]	; 0x28
 8006508:	2300      	movs	r3, #0
 800650a:	930e      	str	r3, [sp, #56]	; 0x38
 800650c:	e7be      	b.n	800648c <_dtoa_r+0x1cc>
 800650e:	2300      	movs	r3, #0
 8006510:	930b      	str	r3, [sp, #44]	; 0x2c
 8006512:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006514:	2b00      	cmp	r3, #0
 8006516:	dc58      	bgt.n	80065ca <_dtoa_r+0x30a>
 8006518:	f04f 0901 	mov.w	r9, #1
 800651c:	464b      	mov	r3, r9
 800651e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006522:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006526:	2200      	movs	r2, #0
 8006528:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800652a:	6042      	str	r2, [r0, #4]
 800652c:	2204      	movs	r2, #4
 800652e:	f102 0614 	add.w	r6, r2, #20
 8006532:	429e      	cmp	r6, r3
 8006534:	6841      	ldr	r1, [r0, #4]
 8006536:	d94e      	bls.n	80065d6 <_dtoa_r+0x316>
 8006538:	4628      	mov	r0, r5
 800653a:	f000 fcd7 	bl	8006eec <_Balloc>
 800653e:	9003      	str	r0, [sp, #12]
 8006540:	2800      	cmp	r0, #0
 8006542:	d14c      	bne.n	80065de <_dtoa_r+0x31e>
 8006544:	4602      	mov	r2, r0
 8006546:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800654a:	4b17      	ldr	r3, [pc, #92]	; (80065a8 <_dtoa_r+0x2e8>)
 800654c:	e6cc      	b.n	80062e8 <_dtoa_r+0x28>
 800654e:	2301      	movs	r3, #1
 8006550:	e7de      	b.n	8006510 <_dtoa_r+0x250>
 8006552:	2300      	movs	r3, #0
 8006554:	930b      	str	r3, [sp, #44]	; 0x2c
 8006556:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006558:	eb0a 0903 	add.w	r9, sl, r3
 800655c:	f109 0301 	add.w	r3, r9, #1
 8006560:	2b01      	cmp	r3, #1
 8006562:	9308      	str	r3, [sp, #32]
 8006564:	bfb8      	it	lt
 8006566:	2301      	movlt	r3, #1
 8006568:	e7dd      	b.n	8006526 <_dtoa_r+0x266>
 800656a:	2301      	movs	r3, #1
 800656c:	e7f2      	b.n	8006554 <_dtoa_r+0x294>
 800656e:	bf00      	nop
 8006570:	636f4361 	.word	0x636f4361
 8006574:	3fd287a7 	.word	0x3fd287a7
 8006578:	8b60c8b3 	.word	0x8b60c8b3
 800657c:	3fc68a28 	.word	0x3fc68a28
 8006580:	509f79fb 	.word	0x509f79fb
 8006584:	3fd34413 	.word	0x3fd34413
 8006588:	08008749 	.word	0x08008749
 800658c:	08008760 	.word	0x08008760
 8006590:	7ff00000 	.word	0x7ff00000
 8006594:	08008745 	.word	0x08008745
 8006598:	0800873c 	.word	0x0800873c
 800659c:	08008719 	.word	0x08008719
 80065a0:	3ff80000 	.word	0x3ff80000
 80065a4:	08008850 	.word	0x08008850
 80065a8:	080087bb 	.word	0x080087bb
 80065ac:	2401      	movs	r4, #1
 80065ae:	2300      	movs	r3, #0
 80065b0:	940b      	str	r4, [sp, #44]	; 0x2c
 80065b2:	9322      	str	r3, [sp, #136]	; 0x88
 80065b4:	f04f 39ff 	mov.w	r9, #4294967295
 80065b8:	2200      	movs	r2, #0
 80065ba:	2312      	movs	r3, #18
 80065bc:	f8cd 9020 	str.w	r9, [sp, #32]
 80065c0:	9223      	str	r2, [sp, #140]	; 0x8c
 80065c2:	e7b0      	b.n	8006526 <_dtoa_r+0x266>
 80065c4:	2301      	movs	r3, #1
 80065c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80065c8:	e7f4      	b.n	80065b4 <_dtoa_r+0x2f4>
 80065ca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80065ce:	464b      	mov	r3, r9
 80065d0:	f8cd 9020 	str.w	r9, [sp, #32]
 80065d4:	e7a7      	b.n	8006526 <_dtoa_r+0x266>
 80065d6:	3101      	adds	r1, #1
 80065d8:	6041      	str	r1, [r0, #4]
 80065da:	0052      	lsls	r2, r2, #1
 80065dc:	e7a7      	b.n	800652e <_dtoa_r+0x26e>
 80065de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80065e0:	9a03      	ldr	r2, [sp, #12]
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	9b08      	ldr	r3, [sp, #32]
 80065e6:	2b0e      	cmp	r3, #14
 80065e8:	f200 80a8 	bhi.w	800673c <_dtoa_r+0x47c>
 80065ec:	2c00      	cmp	r4, #0
 80065ee:	f000 80a5 	beq.w	800673c <_dtoa_r+0x47c>
 80065f2:	f1ba 0f00 	cmp.w	sl, #0
 80065f6:	dd34      	ble.n	8006662 <_dtoa_r+0x3a2>
 80065f8:	4a9a      	ldr	r2, [pc, #616]	; (8006864 <_dtoa_r+0x5a4>)
 80065fa:	f00a 030f 	and.w	r3, sl, #15
 80065fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006602:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006606:	e9d3 3400 	ldrd	r3, r4, [r3]
 800660a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800660e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006612:	d016      	beq.n	8006642 <_dtoa_r+0x382>
 8006614:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006618:	4b93      	ldr	r3, [pc, #588]	; (8006868 <_dtoa_r+0x5a8>)
 800661a:	2703      	movs	r7, #3
 800661c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006620:	f7fa f88e 	bl	8000740 <__aeabi_ddiv>
 8006624:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006628:	f004 040f 	and.w	r4, r4, #15
 800662c:	4e8e      	ldr	r6, [pc, #568]	; (8006868 <_dtoa_r+0x5a8>)
 800662e:	b954      	cbnz	r4, 8006646 <_dtoa_r+0x386>
 8006630:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006634:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006638:	f7fa f882 	bl	8000740 <__aeabi_ddiv>
 800663c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006640:	e029      	b.n	8006696 <_dtoa_r+0x3d6>
 8006642:	2702      	movs	r7, #2
 8006644:	e7f2      	b.n	800662c <_dtoa_r+0x36c>
 8006646:	07e1      	lsls	r1, r4, #31
 8006648:	d508      	bpl.n	800665c <_dtoa_r+0x39c>
 800664a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800664e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006652:	f7f9 ff4b 	bl	80004ec <__aeabi_dmul>
 8006656:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800665a:	3701      	adds	r7, #1
 800665c:	1064      	asrs	r4, r4, #1
 800665e:	3608      	adds	r6, #8
 8006660:	e7e5      	b.n	800662e <_dtoa_r+0x36e>
 8006662:	f000 80a5 	beq.w	80067b0 <_dtoa_r+0x4f0>
 8006666:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800666a:	f1ca 0400 	rsb	r4, sl, #0
 800666e:	4b7d      	ldr	r3, [pc, #500]	; (8006864 <_dtoa_r+0x5a4>)
 8006670:	f004 020f 	and.w	r2, r4, #15
 8006674:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667c:	f7f9 ff36 	bl	80004ec <__aeabi_dmul>
 8006680:	2702      	movs	r7, #2
 8006682:	2300      	movs	r3, #0
 8006684:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006688:	4e77      	ldr	r6, [pc, #476]	; (8006868 <_dtoa_r+0x5a8>)
 800668a:	1124      	asrs	r4, r4, #4
 800668c:	2c00      	cmp	r4, #0
 800668e:	f040 8084 	bne.w	800679a <_dtoa_r+0x4da>
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1d2      	bne.n	800663c <_dtoa_r+0x37c>
 8006696:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 808b 	beq.w	80067b4 <_dtoa_r+0x4f4>
 800669e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80066a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80066a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066aa:	2200      	movs	r2, #0
 80066ac:	4b6f      	ldr	r3, [pc, #444]	; (800686c <_dtoa_r+0x5ac>)
 80066ae:	f7fa f98f 	bl	80009d0 <__aeabi_dcmplt>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	d07e      	beq.n	80067b4 <_dtoa_r+0x4f4>
 80066b6:	9b08      	ldr	r3, [sp, #32]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d07b      	beq.n	80067b4 <_dtoa_r+0x4f4>
 80066bc:	f1b9 0f00 	cmp.w	r9, #0
 80066c0:	dd38      	ble.n	8006734 <_dtoa_r+0x474>
 80066c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066c6:	2200      	movs	r2, #0
 80066c8:	4b69      	ldr	r3, [pc, #420]	; (8006870 <_dtoa_r+0x5b0>)
 80066ca:	f7f9 ff0f 	bl	80004ec <__aeabi_dmul>
 80066ce:	464c      	mov	r4, r9
 80066d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066d4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80066d8:	3701      	adds	r7, #1
 80066da:	4638      	mov	r0, r7
 80066dc:	f7f9 fe9c 	bl	8000418 <__aeabi_i2d>
 80066e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066e4:	f7f9 ff02 	bl	80004ec <__aeabi_dmul>
 80066e8:	2200      	movs	r2, #0
 80066ea:	4b62      	ldr	r3, [pc, #392]	; (8006874 <_dtoa_r+0x5b4>)
 80066ec:	f7f9 fd48 	bl	8000180 <__adddf3>
 80066f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80066f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80066f8:	9611      	str	r6, [sp, #68]	; 0x44
 80066fa:	2c00      	cmp	r4, #0
 80066fc:	d15d      	bne.n	80067ba <_dtoa_r+0x4fa>
 80066fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006702:	2200      	movs	r2, #0
 8006704:	4b5c      	ldr	r3, [pc, #368]	; (8006878 <_dtoa_r+0x5b8>)
 8006706:	f7f9 fd39 	bl	800017c <__aeabi_dsub>
 800670a:	4602      	mov	r2, r0
 800670c:	460b      	mov	r3, r1
 800670e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006712:	4633      	mov	r3, r6
 8006714:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006716:	f7fa f979 	bl	8000a0c <__aeabi_dcmpgt>
 800671a:	2800      	cmp	r0, #0
 800671c:	f040 829c 	bne.w	8006c58 <_dtoa_r+0x998>
 8006720:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006724:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006726:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800672a:	f7fa f951 	bl	80009d0 <__aeabi_dcmplt>
 800672e:	2800      	cmp	r0, #0
 8006730:	f040 8290 	bne.w	8006c54 <_dtoa_r+0x994>
 8006734:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006738:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800673c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800673e:	2b00      	cmp	r3, #0
 8006740:	f2c0 8152 	blt.w	80069e8 <_dtoa_r+0x728>
 8006744:	f1ba 0f0e 	cmp.w	sl, #14
 8006748:	f300 814e 	bgt.w	80069e8 <_dtoa_r+0x728>
 800674c:	4b45      	ldr	r3, [pc, #276]	; (8006864 <_dtoa_r+0x5a4>)
 800674e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006752:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006756:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800675a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800675c:	2b00      	cmp	r3, #0
 800675e:	f280 80db 	bge.w	8006918 <_dtoa_r+0x658>
 8006762:	9b08      	ldr	r3, [sp, #32]
 8006764:	2b00      	cmp	r3, #0
 8006766:	f300 80d7 	bgt.w	8006918 <_dtoa_r+0x658>
 800676a:	f040 8272 	bne.w	8006c52 <_dtoa_r+0x992>
 800676e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006772:	2200      	movs	r2, #0
 8006774:	4b40      	ldr	r3, [pc, #256]	; (8006878 <_dtoa_r+0x5b8>)
 8006776:	f7f9 feb9 	bl	80004ec <__aeabi_dmul>
 800677a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800677e:	f7fa f93b 	bl	80009f8 <__aeabi_dcmpge>
 8006782:	9c08      	ldr	r4, [sp, #32]
 8006784:	4626      	mov	r6, r4
 8006786:	2800      	cmp	r0, #0
 8006788:	f040 8248 	bne.w	8006c1c <_dtoa_r+0x95c>
 800678c:	2331      	movs	r3, #49	; 0x31
 800678e:	9f03      	ldr	r7, [sp, #12]
 8006790:	f10a 0a01 	add.w	sl, sl, #1
 8006794:	f807 3b01 	strb.w	r3, [r7], #1
 8006798:	e244      	b.n	8006c24 <_dtoa_r+0x964>
 800679a:	07e2      	lsls	r2, r4, #31
 800679c:	d505      	bpl.n	80067aa <_dtoa_r+0x4ea>
 800679e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067a2:	f7f9 fea3 	bl	80004ec <__aeabi_dmul>
 80067a6:	2301      	movs	r3, #1
 80067a8:	3701      	adds	r7, #1
 80067aa:	1064      	asrs	r4, r4, #1
 80067ac:	3608      	adds	r6, #8
 80067ae:	e76d      	b.n	800668c <_dtoa_r+0x3cc>
 80067b0:	2702      	movs	r7, #2
 80067b2:	e770      	b.n	8006696 <_dtoa_r+0x3d6>
 80067b4:	46d0      	mov	r8, sl
 80067b6:	9c08      	ldr	r4, [sp, #32]
 80067b8:	e78f      	b.n	80066da <_dtoa_r+0x41a>
 80067ba:	9903      	ldr	r1, [sp, #12]
 80067bc:	4b29      	ldr	r3, [pc, #164]	; (8006864 <_dtoa_r+0x5a4>)
 80067be:	4421      	add	r1, r4
 80067c0:	9112      	str	r1, [sp, #72]	; 0x48
 80067c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80067c8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80067cc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80067d0:	2900      	cmp	r1, #0
 80067d2:	d055      	beq.n	8006880 <_dtoa_r+0x5c0>
 80067d4:	2000      	movs	r0, #0
 80067d6:	4929      	ldr	r1, [pc, #164]	; (800687c <_dtoa_r+0x5bc>)
 80067d8:	f7f9 ffb2 	bl	8000740 <__aeabi_ddiv>
 80067dc:	463b      	mov	r3, r7
 80067de:	4632      	mov	r2, r6
 80067e0:	f7f9 fccc 	bl	800017c <__aeabi_dsub>
 80067e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067e8:	9f03      	ldr	r7, [sp, #12]
 80067ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067ee:	f7fa f92d 	bl	8000a4c <__aeabi_d2iz>
 80067f2:	4604      	mov	r4, r0
 80067f4:	f7f9 fe10 	bl	8000418 <__aeabi_i2d>
 80067f8:	4602      	mov	r2, r0
 80067fa:	460b      	mov	r3, r1
 80067fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006800:	f7f9 fcbc 	bl	800017c <__aeabi_dsub>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	3430      	adds	r4, #48	; 0x30
 800680a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800680e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006812:	f807 4b01 	strb.w	r4, [r7], #1
 8006816:	f7fa f8db 	bl	80009d0 <__aeabi_dcmplt>
 800681a:	2800      	cmp	r0, #0
 800681c:	d174      	bne.n	8006908 <_dtoa_r+0x648>
 800681e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006822:	2000      	movs	r0, #0
 8006824:	4911      	ldr	r1, [pc, #68]	; (800686c <_dtoa_r+0x5ac>)
 8006826:	f7f9 fca9 	bl	800017c <__aeabi_dsub>
 800682a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800682e:	f7fa f8cf 	bl	80009d0 <__aeabi_dcmplt>
 8006832:	2800      	cmp	r0, #0
 8006834:	f040 80b7 	bne.w	80069a6 <_dtoa_r+0x6e6>
 8006838:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800683a:	429f      	cmp	r7, r3
 800683c:	f43f af7a 	beq.w	8006734 <_dtoa_r+0x474>
 8006840:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006844:	2200      	movs	r2, #0
 8006846:	4b0a      	ldr	r3, [pc, #40]	; (8006870 <_dtoa_r+0x5b0>)
 8006848:	f7f9 fe50 	bl	80004ec <__aeabi_dmul>
 800684c:	2200      	movs	r2, #0
 800684e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006852:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006856:	4b06      	ldr	r3, [pc, #24]	; (8006870 <_dtoa_r+0x5b0>)
 8006858:	f7f9 fe48 	bl	80004ec <__aeabi_dmul>
 800685c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006860:	e7c3      	b.n	80067ea <_dtoa_r+0x52a>
 8006862:	bf00      	nop
 8006864:	08008850 	.word	0x08008850
 8006868:	08008828 	.word	0x08008828
 800686c:	3ff00000 	.word	0x3ff00000
 8006870:	40240000 	.word	0x40240000
 8006874:	401c0000 	.word	0x401c0000
 8006878:	40140000 	.word	0x40140000
 800687c:	3fe00000 	.word	0x3fe00000
 8006880:	4630      	mov	r0, r6
 8006882:	4639      	mov	r1, r7
 8006884:	f7f9 fe32 	bl	80004ec <__aeabi_dmul>
 8006888:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800688a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800688e:	9c03      	ldr	r4, [sp, #12]
 8006890:	9314      	str	r3, [sp, #80]	; 0x50
 8006892:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006896:	f7fa f8d9 	bl	8000a4c <__aeabi_d2iz>
 800689a:	9015      	str	r0, [sp, #84]	; 0x54
 800689c:	f7f9 fdbc 	bl	8000418 <__aeabi_i2d>
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068a8:	f7f9 fc68 	bl	800017c <__aeabi_dsub>
 80068ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068ae:	4606      	mov	r6, r0
 80068b0:	3330      	adds	r3, #48	; 0x30
 80068b2:	f804 3b01 	strb.w	r3, [r4], #1
 80068b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068b8:	460f      	mov	r7, r1
 80068ba:	429c      	cmp	r4, r3
 80068bc:	f04f 0200 	mov.w	r2, #0
 80068c0:	d124      	bne.n	800690c <_dtoa_r+0x64c>
 80068c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068c6:	4bb0      	ldr	r3, [pc, #704]	; (8006b88 <_dtoa_r+0x8c8>)
 80068c8:	f7f9 fc5a 	bl	8000180 <__adddf3>
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	4630      	mov	r0, r6
 80068d2:	4639      	mov	r1, r7
 80068d4:	f7fa f89a 	bl	8000a0c <__aeabi_dcmpgt>
 80068d8:	2800      	cmp	r0, #0
 80068da:	d163      	bne.n	80069a4 <_dtoa_r+0x6e4>
 80068dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068e0:	2000      	movs	r0, #0
 80068e2:	49a9      	ldr	r1, [pc, #676]	; (8006b88 <_dtoa_r+0x8c8>)
 80068e4:	f7f9 fc4a 	bl	800017c <__aeabi_dsub>
 80068e8:	4602      	mov	r2, r0
 80068ea:	460b      	mov	r3, r1
 80068ec:	4630      	mov	r0, r6
 80068ee:	4639      	mov	r1, r7
 80068f0:	f7fa f86e 	bl	80009d0 <__aeabi_dcmplt>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	f43f af1d 	beq.w	8006734 <_dtoa_r+0x474>
 80068fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80068fc:	1e7b      	subs	r3, r7, #1
 80068fe:	9314      	str	r3, [sp, #80]	; 0x50
 8006900:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006904:	2b30      	cmp	r3, #48	; 0x30
 8006906:	d0f8      	beq.n	80068fa <_dtoa_r+0x63a>
 8006908:	46c2      	mov	sl, r8
 800690a:	e03b      	b.n	8006984 <_dtoa_r+0x6c4>
 800690c:	4b9f      	ldr	r3, [pc, #636]	; (8006b8c <_dtoa_r+0x8cc>)
 800690e:	f7f9 fded 	bl	80004ec <__aeabi_dmul>
 8006912:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006916:	e7bc      	b.n	8006892 <_dtoa_r+0x5d2>
 8006918:	9f03      	ldr	r7, [sp, #12]
 800691a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800691e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006922:	4640      	mov	r0, r8
 8006924:	4649      	mov	r1, r9
 8006926:	f7f9 ff0b 	bl	8000740 <__aeabi_ddiv>
 800692a:	f7fa f88f 	bl	8000a4c <__aeabi_d2iz>
 800692e:	4604      	mov	r4, r0
 8006930:	f7f9 fd72 	bl	8000418 <__aeabi_i2d>
 8006934:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006938:	f7f9 fdd8 	bl	80004ec <__aeabi_dmul>
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	4640      	mov	r0, r8
 8006942:	4649      	mov	r1, r9
 8006944:	f7f9 fc1a 	bl	800017c <__aeabi_dsub>
 8006948:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800694c:	f807 6b01 	strb.w	r6, [r7], #1
 8006950:	9e03      	ldr	r6, [sp, #12]
 8006952:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006956:	1bbe      	subs	r6, r7, r6
 8006958:	45b4      	cmp	ip, r6
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	d136      	bne.n	80069ce <_dtoa_r+0x70e>
 8006960:	f7f9 fc0e 	bl	8000180 <__adddf3>
 8006964:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006968:	4680      	mov	r8, r0
 800696a:	4689      	mov	r9, r1
 800696c:	f7fa f84e 	bl	8000a0c <__aeabi_dcmpgt>
 8006970:	bb58      	cbnz	r0, 80069ca <_dtoa_r+0x70a>
 8006972:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006976:	4640      	mov	r0, r8
 8006978:	4649      	mov	r1, r9
 800697a:	f7fa f81f 	bl	80009bc <__aeabi_dcmpeq>
 800697e:	b108      	cbz	r0, 8006984 <_dtoa_r+0x6c4>
 8006980:	07e1      	lsls	r1, r4, #31
 8006982:	d422      	bmi.n	80069ca <_dtoa_r+0x70a>
 8006984:	4628      	mov	r0, r5
 8006986:	4659      	mov	r1, fp
 8006988:	f000 faf0 	bl	8006f6c <_Bfree>
 800698c:	2300      	movs	r3, #0
 800698e:	703b      	strb	r3, [r7, #0]
 8006990:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006992:	f10a 0001 	add.w	r0, sl, #1
 8006996:	6018      	str	r0, [r3, #0]
 8006998:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800699a:	2b00      	cmp	r3, #0
 800699c:	f43f acde 	beq.w	800635c <_dtoa_r+0x9c>
 80069a0:	601f      	str	r7, [r3, #0]
 80069a2:	e4db      	b.n	800635c <_dtoa_r+0x9c>
 80069a4:	4627      	mov	r7, r4
 80069a6:	463b      	mov	r3, r7
 80069a8:	461f      	mov	r7, r3
 80069aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069ae:	2a39      	cmp	r2, #57	; 0x39
 80069b0:	d107      	bne.n	80069c2 <_dtoa_r+0x702>
 80069b2:	9a03      	ldr	r2, [sp, #12]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d1f7      	bne.n	80069a8 <_dtoa_r+0x6e8>
 80069b8:	2230      	movs	r2, #48	; 0x30
 80069ba:	9903      	ldr	r1, [sp, #12]
 80069bc:	f108 0801 	add.w	r8, r8, #1
 80069c0:	700a      	strb	r2, [r1, #0]
 80069c2:	781a      	ldrb	r2, [r3, #0]
 80069c4:	3201      	adds	r2, #1
 80069c6:	701a      	strb	r2, [r3, #0]
 80069c8:	e79e      	b.n	8006908 <_dtoa_r+0x648>
 80069ca:	46d0      	mov	r8, sl
 80069cc:	e7eb      	b.n	80069a6 <_dtoa_r+0x6e6>
 80069ce:	2200      	movs	r2, #0
 80069d0:	4b6e      	ldr	r3, [pc, #440]	; (8006b8c <_dtoa_r+0x8cc>)
 80069d2:	f7f9 fd8b 	bl	80004ec <__aeabi_dmul>
 80069d6:	2200      	movs	r2, #0
 80069d8:	2300      	movs	r3, #0
 80069da:	4680      	mov	r8, r0
 80069dc:	4689      	mov	r9, r1
 80069de:	f7f9 ffed 	bl	80009bc <__aeabi_dcmpeq>
 80069e2:	2800      	cmp	r0, #0
 80069e4:	d09b      	beq.n	800691e <_dtoa_r+0x65e>
 80069e6:	e7cd      	b.n	8006984 <_dtoa_r+0x6c4>
 80069e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069ea:	2a00      	cmp	r2, #0
 80069ec:	f000 80d0 	beq.w	8006b90 <_dtoa_r+0x8d0>
 80069f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80069f2:	2a01      	cmp	r2, #1
 80069f4:	f300 80ae 	bgt.w	8006b54 <_dtoa_r+0x894>
 80069f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80069fa:	2a00      	cmp	r2, #0
 80069fc:	f000 80a6 	beq.w	8006b4c <_dtoa_r+0x88c>
 8006a00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006a06:	9f06      	ldr	r7, [sp, #24]
 8006a08:	9a06      	ldr	r2, [sp, #24]
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	441a      	add	r2, r3
 8006a0e:	9206      	str	r2, [sp, #24]
 8006a10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a12:	4628      	mov	r0, r5
 8006a14:	441a      	add	r2, r3
 8006a16:	9209      	str	r2, [sp, #36]	; 0x24
 8006a18:	f000 fb5e 	bl	80070d8 <__i2b>
 8006a1c:	4606      	mov	r6, r0
 8006a1e:	2f00      	cmp	r7, #0
 8006a20:	dd0c      	ble.n	8006a3c <_dtoa_r+0x77c>
 8006a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	dd09      	ble.n	8006a3c <_dtoa_r+0x77c>
 8006a28:	42bb      	cmp	r3, r7
 8006a2a:	bfa8      	it	ge
 8006a2c:	463b      	movge	r3, r7
 8006a2e:	9a06      	ldr	r2, [sp, #24]
 8006a30:	1aff      	subs	r7, r7, r3
 8006a32:	1ad2      	subs	r2, r2, r3
 8006a34:	9206      	str	r2, [sp, #24]
 8006a36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a3e:	b1f3      	cbz	r3, 8006a7e <_dtoa_r+0x7be>
 8006a40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 80a8 	beq.w	8006b98 <_dtoa_r+0x8d8>
 8006a48:	2c00      	cmp	r4, #0
 8006a4a:	dd10      	ble.n	8006a6e <_dtoa_r+0x7ae>
 8006a4c:	4631      	mov	r1, r6
 8006a4e:	4622      	mov	r2, r4
 8006a50:	4628      	mov	r0, r5
 8006a52:	f000 fbff 	bl	8007254 <__pow5mult>
 8006a56:	465a      	mov	r2, fp
 8006a58:	4601      	mov	r1, r0
 8006a5a:	4606      	mov	r6, r0
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	f000 fb51 	bl	8007104 <__multiply>
 8006a62:	4680      	mov	r8, r0
 8006a64:	4659      	mov	r1, fp
 8006a66:	4628      	mov	r0, r5
 8006a68:	f000 fa80 	bl	8006f6c <_Bfree>
 8006a6c:	46c3      	mov	fp, r8
 8006a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a70:	1b1a      	subs	r2, r3, r4
 8006a72:	d004      	beq.n	8006a7e <_dtoa_r+0x7be>
 8006a74:	4659      	mov	r1, fp
 8006a76:	4628      	mov	r0, r5
 8006a78:	f000 fbec 	bl	8007254 <__pow5mult>
 8006a7c:	4683      	mov	fp, r0
 8006a7e:	2101      	movs	r1, #1
 8006a80:	4628      	mov	r0, r5
 8006a82:	f000 fb29 	bl	80070d8 <__i2b>
 8006a86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a88:	4604      	mov	r4, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f340 8086 	ble.w	8006b9c <_dtoa_r+0x8dc>
 8006a90:	461a      	mov	r2, r3
 8006a92:	4601      	mov	r1, r0
 8006a94:	4628      	mov	r0, r5
 8006a96:	f000 fbdd 	bl	8007254 <__pow5mult>
 8006a9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a9c:	4604      	mov	r4, r0
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	dd7f      	ble.n	8006ba2 <_dtoa_r+0x8e2>
 8006aa2:	f04f 0800 	mov.w	r8, #0
 8006aa6:	6923      	ldr	r3, [r4, #16]
 8006aa8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006aac:	6918      	ldr	r0, [r3, #16]
 8006aae:	f000 fac5 	bl	800703c <__hi0bits>
 8006ab2:	f1c0 0020 	rsb	r0, r0, #32
 8006ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ab8:	4418      	add	r0, r3
 8006aba:	f010 001f 	ands.w	r0, r0, #31
 8006abe:	f000 8092 	beq.w	8006be6 <_dtoa_r+0x926>
 8006ac2:	f1c0 0320 	rsb	r3, r0, #32
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	f340 808a 	ble.w	8006be0 <_dtoa_r+0x920>
 8006acc:	f1c0 001c 	rsb	r0, r0, #28
 8006ad0:	9b06      	ldr	r3, [sp, #24]
 8006ad2:	4407      	add	r7, r0
 8006ad4:	4403      	add	r3, r0
 8006ad6:	9306      	str	r3, [sp, #24]
 8006ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ada:	4403      	add	r3, r0
 8006adc:	9309      	str	r3, [sp, #36]	; 0x24
 8006ade:	9b06      	ldr	r3, [sp, #24]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	dd05      	ble.n	8006af0 <_dtoa_r+0x830>
 8006ae4:	4659      	mov	r1, fp
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	4628      	mov	r0, r5
 8006aea:	f000 fc0d 	bl	8007308 <__lshift>
 8006aee:	4683      	mov	fp, r0
 8006af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	dd05      	ble.n	8006b02 <_dtoa_r+0x842>
 8006af6:	4621      	mov	r1, r4
 8006af8:	461a      	mov	r2, r3
 8006afa:	4628      	mov	r0, r5
 8006afc:	f000 fc04 	bl	8007308 <__lshift>
 8006b00:	4604      	mov	r4, r0
 8006b02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d070      	beq.n	8006bea <_dtoa_r+0x92a>
 8006b08:	4621      	mov	r1, r4
 8006b0a:	4658      	mov	r0, fp
 8006b0c:	f000 fc6c 	bl	80073e8 <__mcmp>
 8006b10:	2800      	cmp	r0, #0
 8006b12:	da6a      	bge.n	8006bea <_dtoa_r+0x92a>
 8006b14:	2300      	movs	r3, #0
 8006b16:	4659      	mov	r1, fp
 8006b18:	220a      	movs	r2, #10
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	f000 fa48 	bl	8006fb0 <__multadd>
 8006b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b22:	4683      	mov	fp, r0
 8006b24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 8194 	beq.w	8006e56 <_dtoa_r+0xb96>
 8006b2e:	4631      	mov	r1, r6
 8006b30:	2300      	movs	r3, #0
 8006b32:	220a      	movs	r2, #10
 8006b34:	4628      	mov	r0, r5
 8006b36:	f000 fa3b 	bl	8006fb0 <__multadd>
 8006b3a:	f1b9 0f00 	cmp.w	r9, #0
 8006b3e:	4606      	mov	r6, r0
 8006b40:	f300 8093 	bgt.w	8006c6a <_dtoa_r+0x9aa>
 8006b44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	dc57      	bgt.n	8006bfa <_dtoa_r+0x93a>
 8006b4a:	e08e      	b.n	8006c6a <_dtoa_r+0x9aa>
 8006b4c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006b4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b52:	e757      	b.n	8006a04 <_dtoa_r+0x744>
 8006b54:	9b08      	ldr	r3, [sp, #32]
 8006b56:	1e5c      	subs	r4, r3, #1
 8006b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b5a:	42a3      	cmp	r3, r4
 8006b5c:	bfb7      	itett	lt
 8006b5e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006b60:	1b1c      	subge	r4, r3, r4
 8006b62:	1ae2      	sublt	r2, r4, r3
 8006b64:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006b66:	bfbe      	ittt	lt
 8006b68:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006b6a:	189b      	addlt	r3, r3, r2
 8006b6c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006b6e:	9b08      	ldr	r3, [sp, #32]
 8006b70:	bfb8      	it	lt
 8006b72:	2400      	movlt	r4, #0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	bfbb      	ittet	lt
 8006b78:	9b06      	ldrlt	r3, [sp, #24]
 8006b7a:	9a08      	ldrlt	r2, [sp, #32]
 8006b7c:	9f06      	ldrge	r7, [sp, #24]
 8006b7e:	1a9f      	sublt	r7, r3, r2
 8006b80:	bfac      	ite	ge
 8006b82:	9b08      	ldrge	r3, [sp, #32]
 8006b84:	2300      	movlt	r3, #0
 8006b86:	e73f      	b.n	8006a08 <_dtoa_r+0x748>
 8006b88:	3fe00000 	.word	0x3fe00000
 8006b8c:	40240000 	.word	0x40240000
 8006b90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006b92:	9f06      	ldr	r7, [sp, #24]
 8006b94:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006b96:	e742      	b.n	8006a1e <_dtoa_r+0x75e>
 8006b98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b9a:	e76b      	b.n	8006a74 <_dtoa_r+0x7b4>
 8006b9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	dc19      	bgt.n	8006bd6 <_dtoa_r+0x916>
 8006ba2:	9b04      	ldr	r3, [sp, #16]
 8006ba4:	b9bb      	cbnz	r3, 8006bd6 <_dtoa_r+0x916>
 8006ba6:	9b05      	ldr	r3, [sp, #20]
 8006ba8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bac:	b99b      	cbnz	r3, 8006bd6 <_dtoa_r+0x916>
 8006bae:	9b05      	ldr	r3, [sp, #20]
 8006bb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bb4:	0d1b      	lsrs	r3, r3, #20
 8006bb6:	051b      	lsls	r3, r3, #20
 8006bb8:	b183      	cbz	r3, 8006bdc <_dtoa_r+0x91c>
 8006bba:	f04f 0801 	mov.w	r8, #1
 8006bbe:	9b06      	ldr	r3, [sp, #24]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	9306      	str	r3, [sp, #24]
 8006bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8006bca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f47f af6a 	bne.w	8006aa6 <_dtoa_r+0x7e6>
 8006bd2:	2001      	movs	r0, #1
 8006bd4:	e76f      	b.n	8006ab6 <_dtoa_r+0x7f6>
 8006bd6:	f04f 0800 	mov.w	r8, #0
 8006bda:	e7f6      	b.n	8006bca <_dtoa_r+0x90a>
 8006bdc:	4698      	mov	r8, r3
 8006bde:	e7f4      	b.n	8006bca <_dtoa_r+0x90a>
 8006be0:	f43f af7d 	beq.w	8006ade <_dtoa_r+0x81e>
 8006be4:	4618      	mov	r0, r3
 8006be6:	301c      	adds	r0, #28
 8006be8:	e772      	b.n	8006ad0 <_dtoa_r+0x810>
 8006bea:	9b08      	ldr	r3, [sp, #32]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	dc36      	bgt.n	8006c5e <_dtoa_r+0x99e>
 8006bf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	dd33      	ble.n	8006c5e <_dtoa_r+0x99e>
 8006bf6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006bfa:	f1b9 0f00 	cmp.w	r9, #0
 8006bfe:	d10d      	bne.n	8006c1c <_dtoa_r+0x95c>
 8006c00:	4621      	mov	r1, r4
 8006c02:	464b      	mov	r3, r9
 8006c04:	2205      	movs	r2, #5
 8006c06:	4628      	mov	r0, r5
 8006c08:	f000 f9d2 	bl	8006fb0 <__multadd>
 8006c0c:	4601      	mov	r1, r0
 8006c0e:	4604      	mov	r4, r0
 8006c10:	4658      	mov	r0, fp
 8006c12:	f000 fbe9 	bl	80073e8 <__mcmp>
 8006c16:	2800      	cmp	r0, #0
 8006c18:	f73f adb8 	bgt.w	800678c <_dtoa_r+0x4cc>
 8006c1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c1e:	9f03      	ldr	r7, [sp, #12]
 8006c20:	ea6f 0a03 	mvn.w	sl, r3
 8006c24:	f04f 0800 	mov.w	r8, #0
 8006c28:	4621      	mov	r1, r4
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	f000 f99e 	bl	8006f6c <_Bfree>
 8006c30:	2e00      	cmp	r6, #0
 8006c32:	f43f aea7 	beq.w	8006984 <_dtoa_r+0x6c4>
 8006c36:	f1b8 0f00 	cmp.w	r8, #0
 8006c3a:	d005      	beq.n	8006c48 <_dtoa_r+0x988>
 8006c3c:	45b0      	cmp	r8, r6
 8006c3e:	d003      	beq.n	8006c48 <_dtoa_r+0x988>
 8006c40:	4641      	mov	r1, r8
 8006c42:	4628      	mov	r0, r5
 8006c44:	f000 f992 	bl	8006f6c <_Bfree>
 8006c48:	4631      	mov	r1, r6
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	f000 f98e 	bl	8006f6c <_Bfree>
 8006c50:	e698      	b.n	8006984 <_dtoa_r+0x6c4>
 8006c52:	2400      	movs	r4, #0
 8006c54:	4626      	mov	r6, r4
 8006c56:	e7e1      	b.n	8006c1c <_dtoa_r+0x95c>
 8006c58:	46c2      	mov	sl, r8
 8006c5a:	4626      	mov	r6, r4
 8006c5c:	e596      	b.n	800678c <_dtoa_r+0x4cc>
 8006c5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 80fd 	beq.w	8006e64 <_dtoa_r+0xba4>
 8006c6a:	2f00      	cmp	r7, #0
 8006c6c:	dd05      	ble.n	8006c7a <_dtoa_r+0x9ba>
 8006c6e:	4631      	mov	r1, r6
 8006c70:	463a      	mov	r2, r7
 8006c72:	4628      	mov	r0, r5
 8006c74:	f000 fb48 	bl	8007308 <__lshift>
 8006c78:	4606      	mov	r6, r0
 8006c7a:	f1b8 0f00 	cmp.w	r8, #0
 8006c7e:	d05c      	beq.n	8006d3a <_dtoa_r+0xa7a>
 8006c80:	4628      	mov	r0, r5
 8006c82:	6871      	ldr	r1, [r6, #4]
 8006c84:	f000 f932 	bl	8006eec <_Balloc>
 8006c88:	4607      	mov	r7, r0
 8006c8a:	b928      	cbnz	r0, 8006c98 <_dtoa_r+0x9d8>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006c92:	4b7f      	ldr	r3, [pc, #508]	; (8006e90 <_dtoa_r+0xbd0>)
 8006c94:	f7ff bb28 	b.w	80062e8 <_dtoa_r+0x28>
 8006c98:	6932      	ldr	r2, [r6, #16]
 8006c9a:	f106 010c 	add.w	r1, r6, #12
 8006c9e:	3202      	adds	r2, #2
 8006ca0:	0092      	lsls	r2, r2, #2
 8006ca2:	300c      	adds	r0, #12
 8006ca4:	f000 f914 	bl	8006ed0 <memcpy>
 8006ca8:	2201      	movs	r2, #1
 8006caa:	4639      	mov	r1, r7
 8006cac:	4628      	mov	r0, r5
 8006cae:	f000 fb2b 	bl	8007308 <__lshift>
 8006cb2:	46b0      	mov	r8, r6
 8006cb4:	4606      	mov	r6, r0
 8006cb6:	9b03      	ldr	r3, [sp, #12]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	9308      	str	r3, [sp, #32]
 8006cbc:	9b03      	ldr	r3, [sp, #12]
 8006cbe:	444b      	add	r3, r9
 8006cc0:	930a      	str	r3, [sp, #40]	; 0x28
 8006cc2:	9b04      	ldr	r3, [sp, #16]
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cca:	9b08      	ldr	r3, [sp, #32]
 8006ccc:	4621      	mov	r1, r4
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	4658      	mov	r0, fp
 8006cd2:	9304      	str	r3, [sp, #16]
 8006cd4:	f7ff fa65 	bl	80061a2 <quorem>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	4641      	mov	r1, r8
 8006cdc:	3330      	adds	r3, #48	; 0x30
 8006cde:	9006      	str	r0, [sp, #24]
 8006ce0:	4658      	mov	r0, fp
 8006ce2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ce4:	f000 fb80 	bl	80073e8 <__mcmp>
 8006ce8:	4632      	mov	r2, r6
 8006cea:	4681      	mov	r9, r0
 8006cec:	4621      	mov	r1, r4
 8006cee:	4628      	mov	r0, r5
 8006cf0:	f000 fb96 	bl	8007420 <__mdiff>
 8006cf4:	68c2      	ldr	r2, [r0, #12]
 8006cf6:	4607      	mov	r7, r0
 8006cf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cfa:	bb02      	cbnz	r2, 8006d3e <_dtoa_r+0xa7e>
 8006cfc:	4601      	mov	r1, r0
 8006cfe:	4658      	mov	r0, fp
 8006d00:	f000 fb72 	bl	80073e8 <__mcmp>
 8006d04:	4602      	mov	r2, r0
 8006d06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d08:	4639      	mov	r1, r7
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006d10:	f000 f92c 	bl	8006f6c <_Bfree>
 8006d14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d18:	9f08      	ldr	r7, [sp, #32]
 8006d1a:	ea43 0102 	orr.w	r1, r3, r2
 8006d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d20:	430b      	orrs	r3, r1
 8006d22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d24:	d10d      	bne.n	8006d42 <_dtoa_r+0xa82>
 8006d26:	2b39      	cmp	r3, #57	; 0x39
 8006d28:	d029      	beq.n	8006d7e <_dtoa_r+0xabe>
 8006d2a:	f1b9 0f00 	cmp.w	r9, #0
 8006d2e:	dd01      	ble.n	8006d34 <_dtoa_r+0xa74>
 8006d30:	9b06      	ldr	r3, [sp, #24]
 8006d32:	3331      	adds	r3, #49	; 0x31
 8006d34:	9a04      	ldr	r2, [sp, #16]
 8006d36:	7013      	strb	r3, [r2, #0]
 8006d38:	e776      	b.n	8006c28 <_dtoa_r+0x968>
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	e7b9      	b.n	8006cb2 <_dtoa_r+0x9f2>
 8006d3e:	2201      	movs	r2, #1
 8006d40:	e7e2      	b.n	8006d08 <_dtoa_r+0xa48>
 8006d42:	f1b9 0f00 	cmp.w	r9, #0
 8006d46:	db06      	blt.n	8006d56 <_dtoa_r+0xa96>
 8006d48:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006d4a:	ea41 0909 	orr.w	r9, r1, r9
 8006d4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d50:	ea59 0101 	orrs.w	r1, r9, r1
 8006d54:	d120      	bne.n	8006d98 <_dtoa_r+0xad8>
 8006d56:	2a00      	cmp	r2, #0
 8006d58:	ddec      	ble.n	8006d34 <_dtoa_r+0xa74>
 8006d5a:	4659      	mov	r1, fp
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	4628      	mov	r0, r5
 8006d60:	9308      	str	r3, [sp, #32]
 8006d62:	f000 fad1 	bl	8007308 <__lshift>
 8006d66:	4621      	mov	r1, r4
 8006d68:	4683      	mov	fp, r0
 8006d6a:	f000 fb3d 	bl	80073e8 <__mcmp>
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	9b08      	ldr	r3, [sp, #32]
 8006d72:	dc02      	bgt.n	8006d7a <_dtoa_r+0xaba>
 8006d74:	d1de      	bne.n	8006d34 <_dtoa_r+0xa74>
 8006d76:	07da      	lsls	r2, r3, #31
 8006d78:	d5dc      	bpl.n	8006d34 <_dtoa_r+0xa74>
 8006d7a:	2b39      	cmp	r3, #57	; 0x39
 8006d7c:	d1d8      	bne.n	8006d30 <_dtoa_r+0xa70>
 8006d7e:	2339      	movs	r3, #57	; 0x39
 8006d80:	9a04      	ldr	r2, [sp, #16]
 8006d82:	7013      	strb	r3, [r2, #0]
 8006d84:	463b      	mov	r3, r7
 8006d86:	461f      	mov	r7, r3
 8006d88:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	2a39      	cmp	r2, #57	; 0x39
 8006d90:	d050      	beq.n	8006e34 <_dtoa_r+0xb74>
 8006d92:	3201      	adds	r2, #1
 8006d94:	701a      	strb	r2, [r3, #0]
 8006d96:	e747      	b.n	8006c28 <_dtoa_r+0x968>
 8006d98:	2a00      	cmp	r2, #0
 8006d9a:	dd03      	ble.n	8006da4 <_dtoa_r+0xae4>
 8006d9c:	2b39      	cmp	r3, #57	; 0x39
 8006d9e:	d0ee      	beq.n	8006d7e <_dtoa_r+0xabe>
 8006da0:	3301      	adds	r3, #1
 8006da2:	e7c7      	b.n	8006d34 <_dtoa_r+0xa74>
 8006da4:	9a08      	ldr	r2, [sp, #32]
 8006da6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006da8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006dac:	428a      	cmp	r2, r1
 8006dae:	d02a      	beq.n	8006e06 <_dtoa_r+0xb46>
 8006db0:	4659      	mov	r1, fp
 8006db2:	2300      	movs	r3, #0
 8006db4:	220a      	movs	r2, #10
 8006db6:	4628      	mov	r0, r5
 8006db8:	f000 f8fa 	bl	8006fb0 <__multadd>
 8006dbc:	45b0      	cmp	r8, r6
 8006dbe:	4683      	mov	fp, r0
 8006dc0:	f04f 0300 	mov.w	r3, #0
 8006dc4:	f04f 020a 	mov.w	r2, #10
 8006dc8:	4641      	mov	r1, r8
 8006dca:	4628      	mov	r0, r5
 8006dcc:	d107      	bne.n	8006dde <_dtoa_r+0xb1e>
 8006dce:	f000 f8ef 	bl	8006fb0 <__multadd>
 8006dd2:	4680      	mov	r8, r0
 8006dd4:	4606      	mov	r6, r0
 8006dd6:	9b08      	ldr	r3, [sp, #32]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	9308      	str	r3, [sp, #32]
 8006ddc:	e775      	b.n	8006cca <_dtoa_r+0xa0a>
 8006dde:	f000 f8e7 	bl	8006fb0 <__multadd>
 8006de2:	4631      	mov	r1, r6
 8006de4:	4680      	mov	r8, r0
 8006de6:	2300      	movs	r3, #0
 8006de8:	220a      	movs	r2, #10
 8006dea:	4628      	mov	r0, r5
 8006dec:	f000 f8e0 	bl	8006fb0 <__multadd>
 8006df0:	4606      	mov	r6, r0
 8006df2:	e7f0      	b.n	8006dd6 <_dtoa_r+0xb16>
 8006df4:	f1b9 0f00 	cmp.w	r9, #0
 8006df8:	bfcc      	ite	gt
 8006dfa:	464f      	movgt	r7, r9
 8006dfc:	2701      	movle	r7, #1
 8006dfe:	f04f 0800 	mov.w	r8, #0
 8006e02:	9a03      	ldr	r2, [sp, #12]
 8006e04:	4417      	add	r7, r2
 8006e06:	4659      	mov	r1, fp
 8006e08:	2201      	movs	r2, #1
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	9308      	str	r3, [sp, #32]
 8006e0e:	f000 fa7b 	bl	8007308 <__lshift>
 8006e12:	4621      	mov	r1, r4
 8006e14:	4683      	mov	fp, r0
 8006e16:	f000 fae7 	bl	80073e8 <__mcmp>
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	dcb2      	bgt.n	8006d84 <_dtoa_r+0xac4>
 8006e1e:	d102      	bne.n	8006e26 <_dtoa_r+0xb66>
 8006e20:	9b08      	ldr	r3, [sp, #32]
 8006e22:	07db      	lsls	r3, r3, #31
 8006e24:	d4ae      	bmi.n	8006d84 <_dtoa_r+0xac4>
 8006e26:	463b      	mov	r3, r7
 8006e28:	461f      	mov	r7, r3
 8006e2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e2e:	2a30      	cmp	r2, #48	; 0x30
 8006e30:	d0fa      	beq.n	8006e28 <_dtoa_r+0xb68>
 8006e32:	e6f9      	b.n	8006c28 <_dtoa_r+0x968>
 8006e34:	9a03      	ldr	r2, [sp, #12]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d1a5      	bne.n	8006d86 <_dtoa_r+0xac6>
 8006e3a:	2331      	movs	r3, #49	; 0x31
 8006e3c:	f10a 0a01 	add.w	sl, sl, #1
 8006e40:	e779      	b.n	8006d36 <_dtoa_r+0xa76>
 8006e42:	4b14      	ldr	r3, [pc, #80]	; (8006e94 <_dtoa_r+0xbd4>)
 8006e44:	f7ff baa8 	b.w	8006398 <_dtoa_r+0xd8>
 8006e48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f47f aa81 	bne.w	8006352 <_dtoa_r+0x92>
 8006e50:	4b11      	ldr	r3, [pc, #68]	; (8006e98 <_dtoa_r+0xbd8>)
 8006e52:	f7ff baa1 	b.w	8006398 <_dtoa_r+0xd8>
 8006e56:	f1b9 0f00 	cmp.w	r9, #0
 8006e5a:	dc03      	bgt.n	8006e64 <_dtoa_r+0xba4>
 8006e5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	f73f aecb 	bgt.w	8006bfa <_dtoa_r+0x93a>
 8006e64:	9f03      	ldr	r7, [sp, #12]
 8006e66:	4621      	mov	r1, r4
 8006e68:	4658      	mov	r0, fp
 8006e6a:	f7ff f99a 	bl	80061a2 <quorem>
 8006e6e:	9a03      	ldr	r2, [sp, #12]
 8006e70:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006e74:	f807 3b01 	strb.w	r3, [r7], #1
 8006e78:	1aba      	subs	r2, r7, r2
 8006e7a:	4591      	cmp	r9, r2
 8006e7c:	ddba      	ble.n	8006df4 <_dtoa_r+0xb34>
 8006e7e:	4659      	mov	r1, fp
 8006e80:	2300      	movs	r3, #0
 8006e82:	220a      	movs	r2, #10
 8006e84:	4628      	mov	r0, r5
 8006e86:	f000 f893 	bl	8006fb0 <__multadd>
 8006e8a:	4683      	mov	fp, r0
 8006e8c:	e7eb      	b.n	8006e66 <_dtoa_r+0xba6>
 8006e8e:	bf00      	nop
 8006e90:	080087bb 	.word	0x080087bb
 8006e94:	08008718 	.word	0x08008718
 8006e98:	0800873c 	.word	0x0800873c

08006e9c <_localeconv_r>:
 8006e9c:	4800      	ldr	r0, [pc, #0]	; (8006ea0 <_localeconv_r+0x4>)
 8006e9e:	4770      	bx	lr
 8006ea0:	20000170 	.word	0x20000170

08006ea4 <malloc>:
 8006ea4:	4b02      	ldr	r3, [pc, #8]	; (8006eb0 <malloc+0xc>)
 8006ea6:	4601      	mov	r1, r0
 8006ea8:	6818      	ldr	r0, [r3, #0]
 8006eaa:	f000 bc1d 	b.w	80076e8 <_malloc_r>
 8006eae:	bf00      	nop
 8006eb0:	2000001c 	.word	0x2000001c

08006eb4 <memchr>:
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	b510      	push	{r4, lr}
 8006eb8:	b2c9      	uxtb	r1, r1
 8006eba:	4402      	add	r2, r0
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	d101      	bne.n	8006ec6 <memchr+0x12>
 8006ec2:	2000      	movs	r0, #0
 8006ec4:	e003      	b.n	8006ece <memchr+0x1a>
 8006ec6:	7804      	ldrb	r4, [r0, #0]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	428c      	cmp	r4, r1
 8006ecc:	d1f6      	bne.n	8006ebc <memchr+0x8>
 8006ece:	bd10      	pop	{r4, pc}

08006ed0 <memcpy>:
 8006ed0:	440a      	add	r2, r1
 8006ed2:	4291      	cmp	r1, r2
 8006ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ed8:	d100      	bne.n	8006edc <memcpy+0xc>
 8006eda:	4770      	bx	lr
 8006edc:	b510      	push	{r4, lr}
 8006ede:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ee2:	4291      	cmp	r1, r2
 8006ee4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ee8:	d1f9      	bne.n	8006ede <memcpy+0xe>
 8006eea:	bd10      	pop	{r4, pc}

08006eec <_Balloc>:
 8006eec:	b570      	push	{r4, r5, r6, lr}
 8006eee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	460d      	mov	r5, r1
 8006ef4:	b976      	cbnz	r6, 8006f14 <_Balloc+0x28>
 8006ef6:	2010      	movs	r0, #16
 8006ef8:	f7ff ffd4 	bl	8006ea4 <malloc>
 8006efc:	4602      	mov	r2, r0
 8006efe:	6260      	str	r0, [r4, #36]	; 0x24
 8006f00:	b920      	cbnz	r0, 8006f0c <_Balloc+0x20>
 8006f02:	2166      	movs	r1, #102	; 0x66
 8006f04:	4b17      	ldr	r3, [pc, #92]	; (8006f64 <_Balloc+0x78>)
 8006f06:	4818      	ldr	r0, [pc, #96]	; (8006f68 <_Balloc+0x7c>)
 8006f08:	f000 fdce 	bl	8007aa8 <__assert_func>
 8006f0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f10:	6006      	str	r6, [r0, #0]
 8006f12:	60c6      	str	r6, [r0, #12]
 8006f14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f16:	68f3      	ldr	r3, [r6, #12]
 8006f18:	b183      	cbz	r3, 8006f3c <_Balloc+0x50>
 8006f1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f22:	b9b8      	cbnz	r0, 8006f54 <_Balloc+0x68>
 8006f24:	2101      	movs	r1, #1
 8006f26:	fa01 f605 	lsl.w	r6, r1, r5
 8006f2a:	1d72      	adds	r2, r6, #5
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	0092      	lsls	r2, r2, #2
 8006f30:	f000 fb5e 	bl	80075f0 <_calloc_r>
 8006f34:	b160      	cbz	r0, 8006f50 <_Balloc+0x64>
 8006f36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f3a:	e00e      	b.n	8006f5a <_Balloc+0x6e>
 8006f3c:	2221      	movs	r2, #33	; 0x21
 8006f3e:	2104      	movs	r1, #4
 8006f40:	4620      	mov	r0, r4
 8006f42:	f000 fb55 	bl	80075f0 <_calloc_r>
 8006f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f48:	60f0      	str	r0, [r6, #12]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1e4      	bne.n	8006f1a <_Balloc+0x2e>
 8006f50:	2000      	movs	r0, #0
 8006f52:	bd70      	pop	{r4, r5, r6, pc}
 8006f54:	6802      	ldr	r2, [r0, #0]
 8006f56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f60:	e7f7      	b.n	8006f52 <_Balloc+0x66>
 8006f62:	bf00      	nop
 8006f64:	08008749 	.word	0x08008749
 8006f68:	080087cc 	.word	0x080087cc

08006f6c <_Bfree>:
 8006f6c:	b570      	push	{r4, r5, r6, lr}
 8006f6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f70:	4605      	mov	r5, r0
 8006f72:	460c      	mov	r4, r1
 8006f74:	b976      	cbnz	r6, 8006f94 <_Bfree+0x28>
 8006f76:	2010      	movs	r0, #16
 8006f78:	f7ff ff94 	bl	8006ea4 <malloc>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	6268      	str	r0, [r5, #36]	; 0x24
 8006f80:	b920      	cbnz	r0, 8006f8c <_Bfree+0x20>
 8006f82:	218a      	movs	r1, #138	; 0x8a
 8006f84:	4b08      	ldr	r3, [pc, #32]	; (8006fa8 <_Bfree+0x3c>)
 8006f86:	4809      	ldr	r0, [pc, #36]	; (8006fac <_Bfree+0x40>)
 8006f88:	f000 fd8e 	bl	8007aa8 <__assert_func>
 8006f8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f90:	6006      	str	r6, [r0, #0]
 8006f92:	60c6      	str	r6, [r0, #12]
 8006f94:	b13c      	cbz	r4, 8006fa6 <_Bfree+0x3a>
 8006f96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f98:	6862      	ldr	r2, [r4, #4]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fa0:	6021      	str	r1, [r4, #0]
 8006fa2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006fa6:	bd70      	pop	{r4, r5, r6, pc}
 8006fa8:	08008749 	.word	0x08008749
 8006fac:	080087cc 	.word	0x080087cc

08006fb0 <__multadd>:
 8006fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb4:	4607      	mov	r7, r0
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	461e      	mov	r6, r3
 8006fba:	2000      	movs	r0, #0
 8006fbc:	690d      	ldr	r5, [r1, #16]
 8006fbe:	f101 0c14 	add.w	ip, r1, #20
 8006fc2:	f8dc 3000 	ldr.w	r3, [ip]
 8006fc6:	3001      	adds	r0, #1
 8006fc8:	b299      	uxth	r1, r3
 8006fca:	fb02 6101 	mla	r1, r2, r1, r6
 8006fce:	0c1e      	lsrs	r6, r3, #16
 8006fd0:	0c0b      	lsrs	r3, r1, #16
 8006fd2:	fb02 3306 	mla	r3, r2, r6, r3
 8006fd6:	b289      	uxth	r1, r1
 8006fd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006fdc:	4285      	cmp	r5, r0
 8006fde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006fe2:	f84c 1b04 	str.w	r1, [ip], #4
 8006fe6:	dcec      	bgt.n	8006fc2 <__multadd+0x12>
 8006fe8:	b30e      	cbz	r6, 800702e <__multadd+0x7e>
 8006fea:	68a3      	ldr	r3, [r4, #8]
 8006fec:	42ab      	cmp	r3, r5
 8006fee:	dc19      	bgt.n	8007024 <__multadd+0x74>
 8006ff0:	6861      	ldr	r1, [r4, #4]
 8006ff2:	4638      	mov	r0, r7
 8006ff4:	3101      	adds	r1, #1
 8006ff6:	f7ff ff79 	bl	8006eec <_Balloc>
 8006ffa:	4680      	mov	r8, r0
 8006ffc:	b928      	cbnz	r0, 800700a <__multadd+0x5a>
 8006ffe:	4602      	mov	r2, r0
 8007000:	21b5      	movs	r1, #181	; 0xb5
 8007002:	4b0c      	ldr	r3, [pc, #48]	; (8007034 <__multadd+0x84>)
 8007004:	480c      	ldr	r0, [pc, #48]	; (8007038 <__multadd+0x88>)
 8007006:	f000 fd4f 	bl	8007aa8 <__assert_func>
 800700a:	6922      	ldr	r2, [r4, #16]
 800700c:	f104 010c 	add.w	r1, r4, #12
 8007010:	3202      	adds	r2, #2
 8007012:	0092      	lsls	r2, r2, #2
 8007014:	300c      	adds	r0, #12
 8007016:	f7ff ff5b 	bl	8006ed0 <memcpy>
 800701a:	4621      	mov	r1, r4
 800701c:	4638      	mov	r0, r7
 800701e:	f7ff ffa5 	bl	8006f6c <_Bfree>
 8007022:	4644      	mov	r4, r8
 8007024:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007028:	3501      	adds	r5, #1
 800702a:	615e      	str	r6, [r3, #20]
 800702c:	6125      	str	r5, [r4, #16]
 800702e:	4620      	mov	r0, r4
 8007030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007034:	080087bb 	.word	0x080087bb
 8007038:	080087cc 	.word	0x080087cc

0800703c <__hi0bits>:
 800703c:	0c02      	lsrs	r2, r0, #16
 800703e:	0412      	lsls	r2, r2, #16
 8007040:	4603      	mov	r3, r0
 8007042:	b9ca      	cbnz	r2, 8007078 <__hi0bits+0x3c>
 8007044:	0403      	lsls	r3, r0, #16
 8007046:	2010      	movs	r0, #16
 8007048:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800704c:	bf04      	itt	eq
 800704e:	021b      	lsleq	r3, r3, #8
 8007050:	3008      	addeq	r0, #8
 8007052:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007056:	bf04      	itt	eq
 8007058:	011b      	lsleq	r3, r3, #4
 800705a:	3004      	addeq	r0, #4
 800705c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007060:	bf04      	itt	eq
 8007062:	009b      	lsleq	r3, r3, #2
 8007064:	3002      	addeq	r0, #2
 8007066:	2b00      	cmp	r3, #0
 8007068:	db05      	blt.n	8007076 <__hi0bits+0x3a>
 800706a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800706e:	f100 0001 	add.w	r0, r0, #1
 8007072:	bf08      	it	eq
 8007074:	2020      	moveq	r0, #32
 8007076:	4770      	bx	lr
 8007078:	2000      	movs	r0, #0
 800707a:	e7e5      	b.n	8007048 <__hi0bits+0xc>

0800707c <__lo0bits>:
 800707c:	6803      	ldr	r3, [r0, #0]
 800707e:	4602      	mov	r2, r0
 8007080:	f013 0007 	ands.w	r0, r3, #7
 8007084:	d00b      	beq.n	800709e <__lo0bits+0x22>
 8007086:	07d9      	lsls	r1, r3, #31
 8007088:	d421      	bmi.n	80070ce <__lo0bits+0x52>
 800708a:	0798      	lsls	r0, r3, #30
 800708c:	bf49      	itett	mi
 800708e:	085b      	lsrmi	r3, r3, #1
 8007090:	089b      	lsrpl	r3, r3, #2
 8007092:	2001      	movmi	r0, #1
 8007094:	6013      	strmi	r3, [r2, #0]
 8007096:	bf5c      	itt	pl
 8007098:	2002      	movpl	r0, #2
 800709a:	6013      	strpl	r3, [r2, #0]
 800709c:	4770      	bx	lr
 800709e:	b299      	uxth	r1, r3
 80070a0:	b909      	cbnz	r1, 80070a6 <__lo0bits+0x2a>
 80070a2:	2010      	movs	r0, #16
 80070a4:	0c1b      	lsrs	r3, r3, #16
 80070a6:	b2d9      	uxtb	r1, r3
 80070a8:	b909      	cbnz	r1, 80070ae <__lo0bits+0x32>
 80070aa:	3008      	adds	r0, #8
 80070ac:	0a1b      	lsrs	r3, r3, #8
 80070ae:	0719      	lsls	r1, r3, #28
 80070b0:	bf04      	itt	eq
 80070b2:	091b      	lsreq	r3, r3, #4
 80070b4:	3004      	addeq	r0, #4
 80070b6:	0799      	lsls	r1, r3, #30
 80070b8:	bf04      	itt	eq
 80070ba:	089b      	lsreq	r3, r3, #2
 80070bc:	3002      	addeq	r0, #2
 80070be:	07d9      	lsls	r1, r3, #31
 80070c0:	d403      	bmi.n	80070ca <__lo0bits+0x4e>
 80070c2:	085b      	lsrs	r3, r3, #1
 80070c4:	f100 0001 	add.w	r0, r0, #1
 80070c8:	d003      	beq.n	80070d2 <__lo0bits+0x56>
 80070ca:	6013      	str	r3, [r2, #0]
 80070cc:	4770      	bx	lr
 80070ce:	2000      	movs	r0, #0
 80070d0:	4770      	bx	lr
 80070d2:	2020      	movs	r0, #32
 80070d4:	4770      	bx	lr
	...

080070d8 <__i2b>:
 80070d8:	b510      	push	{r4, lr}
 80070da:	460c      	mov	r4, r1
 80070dc:	2101      	movs	r1, #1
 80070de:	f7ff ff05 	bl	8006eec <_Balloc>
 80070e2:	4602      	mov	r2, r0
 80070e4:	b928      	cbnz	r0, 80070f2 <__i2b+0x1a>
 80070e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80070ea:	4b04      	ldr	r3, [pc, #16]	; (80070fc <__i2b+0x24>)
 80070ec:	4804      	ldr	r0, [pc, #16]	; (8007100 <__i2b+0x28>)
 80070ee:	f000 fcdb 	bl	8007aa8 <__assert_func>
 80070f2:	2301      	movs	r3, #1
 80070f4:	6144      	str	r4, [r0, #20]
 80070f6:	6103      	str	r3, [r0, #16]
 80070f8:	bd10      	pop	{r4, pc}
 80070fa:	bf00      	nop
 80070fc:	080087bb 	.word	0x080087bb
 8007100:	080087cc 	.word	0x080087cc

08007104 <__multiply>:
 8007104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007108:	4691      	mov	r9, r2
 800710a:	690a      	ldr	r2, [r1, #16]
 800710c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007110:	460c      	mov	r4, r1
 8007112:	429a      	cmp	r2, r3
 8007114:	bfbe      	ittt	lt
 8007116:	460b      	movlt	r3, r1
 8007118:	464c      	movlt	r4, r9
 800711a:	4699      	movlt	r9, r3
 800711c:	6927      	ldr	r7, [r4, #16]
 800711e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007122:	68a3      	ldr	r3, [r4, #8]
 8007124:	6861      	ldr	r1, [r4, #4]
 8007126:	eb07 060a 	add.w	r6, r7, sl
 800712a:	42b3      	cmp	r3, r6
 800712c:	b085      	sub	sp, #20
 800712e:	bfb8      	it	lt
 8007130:	3101      	addlt	r1, #1
 8007132:	f7ff fedb 	bl	8006eec <_Balloc>
 8007136:	b930      	cbnz	r0, 8007146 <__multiply+0x42>
 8007138:	4602      	mov	r2, r0
 800713a:	f240 115d 	movw	r1, #349	; 0x15d
 800713e:	4b43      	ldr	r3, [pc, #268]	; (800724c <__multiply+0x148>)
 8007140:	4843      	ldr	r0, [pc, #268]	; (8007250 <__multiply+0x14c>)
 8007142:	f000 fcb1 	bl	8007aa8 <__assert_func>
 8007146:	f100 0514 	add.w	r5, r0, #20
 800714a:	462b      	mov	r3, r5
 800714c:	2200      	movs	r2, #0
 800714e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007152:	4543      	cmp	r3, r8
 8007154:	d321      	bcc.n	800719a <__multiply+0x96>
 8007156:	f104 0314 	add.w	r3, r4, #20
 800715a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800715e:	f109 0314 	add.w	r3, r9, #20
 8007162:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007166:	9202      	str	r2, [sp, #8]
 8007168:	1b3a      	subs	r2, r7, r4
 800716a:	3a15      	subs	r2, #21
 800716c:	f022 0203 	bic.w	r2, r2, #3
 8007170:	3204      	adds	r2, #4
 8007172:	f104 0115 	add.w	r1, r4, #21
 8007176:	428f      	cmp	r7, r1
 8007178:	bf38      	it	cc
 800717a:	2204      	movcc	r2, #4
 800717c:	9201      	str	r2, [sp, #4]
 800717e:	9a02      	ldr	r2, [sp, #8]
 8007180:	9303      	str	r3, [sp, #12]
 8007182:	429a      	cmp	r2, r3
 8007184:	d80c      	bhi.n	80071a0 <__multiply+0x9c>
 8007186:	2e00      	cmp	r6, #0
 8007188:	dd03      	ble.n	8007192 <__multiply+0x8e>
 800718a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800718e:	2b00      	cmp	r3, #0
 8007190:	d059      	beq.n	8007246 <__multiply+0x142>
 8007192:	6106      	str	r6, [r0, #16]
 8007194:	b005      	add	sp, #20
 8007196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800719a:	f843 2b04 	str.w	r2, [r3], #4
 800719e:	e7d8      	b.n	8007152 <__multiply+0x4e>
 80071a0:	f8b3 a000 	ldrh.w	sl, [r3]
 80071a4:	f1ba 0f00 	cmp.w	sl, #0
 80071a8:	d023      	beq.n	80071f2 <__multiply+0xee>
 80071aa:	46a9      	mov	r9, r5
 80071ac:	f04f 0c00 	mov.w	ip, #0
 80071b0:	f104 0e14 	add.w	lr, r4, #20
 80071b4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80071b8:	f8d9 1000 	ldr.w	r1, [r9]
 80071bc:	fa1f fb82 	uxth.w	fp, r2
 80071c0:	b289      	uxth	r1, r1
 80071c2:	fb0a 110b 	mla	r1, sl, fp, r1
 80071c6:	4461      	add	r1, ip
 80071c8:	f8d9 c000 	ldr.w	ip, [r9]
 80071cc:	0c12      	lsrs	r2, r2, #16
 80071ce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80071d2:	fb0a c202 	mla	r2, sl, r2, ip
 80071d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80071da:	b289      	uxth	r1, r1
 80071dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80071e0:	4577      	cmp	r7, lr
 80071e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80071e6:	f849 1b04 	str.w	r1, [r9], #4
 80071ea:	d8e3      	bhi.n	80071b4 <__multiply+0xb0>
 80071ec:	9a01      	ldr	r2, [sp, #4]
 80071ee:	f845 c002 	str.w	ip, [r5, r2]
 80071f2:	9a03      	ldr	r2, [sp, #12]
 80071f4:	3304      	adds	r3, #4
 80071f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80071fa:	f1b9 0f00 	cmp.w	r9, #0
 80071fe:	d020      	beq.n	8007242 <__multiply+0x13e>
 8007200:	46ae      	mov	lr, r5
 8007202:	f04f 0a00 	mov.w	sl, #0
 8007206:	6829      	ldr	r1, [r5, #0]
 8007208:	f104 0c14 	add.w	ip, r4, #20
 800720c:	f8bc b000 	ldrh.w	fp, [ip]
 8007210:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007214:	b289      	uxth	r1, r1
 8007216:	fb09 220b 	mla	r2, r9, fp, r2
 800721a:	4492      	add	sl, r2
 800721c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007220:	f84e 1b04 	str.w	r1, [lr], #4
 8007224:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007228:	f8be 1000 	ldrh.w	r1, [lr]
 800722c:	0c12      	lsrs	r2, r2, #16
 800722e:	fb09 1102 	mla	r1, r9, r2, r1
 8007232:	4567      	cmp	r7, ip
 8007234:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007238:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800723c:	d8e6      	bhi.n	800720c <__multiply+0x108>
 800723e:	9a01      	ldr	r2, [sp, #4]
 8007240:	50a9      	str	r1, [r5, r2]
 8007242:	3504      	adds	r5, #4
 8007244:	e79b      	b.n	800717e <__multiply+0x7a>
 8007246:	3e01      	subs	r6, #1
 8007248:	e79d      	b.n	8007186 <__multiply+0x82>
 800724a:	bf00      	nop
 800724c:	080087bb 	.word	0x080087bb
 8007250:	080087cc 	.word	0x080087cc

08007254 <__pow5mult>:
 8007254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007258:	4615      	mov	r5, r2
 800725a:	f012 0203 	ands.w	r2, r2, #3
 800725e:	4606      	mov	r6, r0
 8007260:	460f      	mov	r7, r1
 8007262:	d007      	beq.n	8007274 <__pow5mult+0x20>
 8007264:	4c25      	ldr	r4, [pc, #148]	; (80072fc <__pow5mult+0xa8>)
 8007266:	3a01      	subs	r2, #1
 8007268:	2300      	movs	r3, #0
 800726a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800726e:	f7ff fe9f 	bl	8006fb0 <__multadd>
 8007272:	4607      	mov	r7, r0
 8007274:	10ad      	asrs	r5, r5, #2
 8007276:	d03d      	beq.n	80072f4 <__pow5mult+0xa0>
 8007278:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800727a:	b97c      	cbnz	r4, 800729c <__pow5mult+0x48>
 800727c:	2010      	movs	r0, #16
 800727e:	f7ff fe11 	bl	8006ea4 <malloc>
 8007282:	4602      	mov	r2, r0
 8007284:	6270      	str	r0, [r6, #36]	; 0x24
 8007286:	b928      	cbnz	r0, 8007294 <__pow5mult+0x40>
 8007288:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800728c:	4b1c      	ldr	r3, [pc, #112]	; (8007300 <__pow5mult+0xac>)
 800728e:	481d      	ldr	r0, [pc, #116]	; (8007304 <__pow5mult+0xb0>)
 8007290:	f000 fc0a 	bl	8007aa8 <__assert_func>
 8007294:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007298:	6004      	str	r4, [r0, #0]
 800729a:	60c4      	str	r4, [r0, #12]
 800729c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80072a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072a4:	b94c      	cbnz	r4, 80072ba <__pow5mult+0x66>
 80072a6:	f240 2171 	movw	r1, #625	; 0x271
 80072aa:	4630      	mov	r0, r6
 80072ac:	f7ff ff14 	bl	80070d8 <__i2b>
 80072b0:	2300      	movs	r3, #0
 80072b2:	4604      	mov	r4, r0
 80072b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80072b8:	6003      	str	r3, [r0, #0]
 80072ba:	f04f 0900 	mov.w	r9, #0
 80072be:	07eb      	lsls	r3, r5, #31
 80072c0:	d50a      	bpl.n	80072d8 <__pow5mult+0x84>
 80072c2:	4639      	mov	r1, r7
 80072c4:	4622      	mov	r2, r4
 80072c6:	4630      	mov	r0, r6
 80072c8:	f7ff ff1c 	bl	8007104 <__multiply>
 80072cc:	4680      	mov	r8, r0
 80072ce:	4639      	mov	r1, r7
 80072d0:	4630      	mov	r0, r6
 80072d2:	f7ff fe4b 	bl	8006f6c <_Bfree>
 80072d6:	4647      	mov	r7, r8
 80072d8:	106d      	asrs	r5, r5, #1
 80072da:	d00b      	beq.n	80072f4 <__pow5mult+0xa0>
 80072dc:	6820      	ldr	r0, [r4, #0]
 80072de:	b938      	cbnz	r0, 80072f0 <__pow5mult+0x9c>
 80072e0:	4622      	mov	r2, r4
 80072e2:	4621      	mov	r1, r4
 80072e4:	4630      	mov	r0, r6
 80072e6:	f7ff ff0d 	bl	8007104 <__multiply>
 80072ea:	6020      	str	r0, [r4, #0]
 80072ec:	f8c0 9000 	str.w	r9, [r0]
 80072f0:	4604      	mov	r4, r0
 80072f2:	e7e4      	b.n	80072be <__pow5mult+0x6a>
 80072f4:	4638      	mov	r0, r7
 80072f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072fa:	bf00      	nop
 80072fc:	08008918 	.word	0x08008918
 8007300:	08008749 	.word	0x08008749
 8007304:	080087cc 	.word	0x080087cc

08007308 <__lshift>:
 8007308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800730c:	460c      	mov	r4, r1
 800730e:	4607      	mov	r7, r0
 8007310:	4691      	mov	r9, r2
 8007312:	6923      	ldr	r3, [r4, #16]
 8007314:	6849      	ldr	r1, [r1, #4]
 8007316:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800731a:	68a3      	ldr	r3, [r4, #8]
 800731c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007320:	f108 0601 	add.w	r6, r8, #1
 8007324:	42b3      	cmp	r3, r6
 8007326:	db0b      	blt.n	8007340 <__lshift+0x38>
 8007328:	4638      	mov	r0, r7
 800732a:	f7ff fddf 	bl	8006eec <_Balloc>
 800732e:	4605      	mov	r5, r0
 8007330:	b948      	cbnz	r0, 8007346 <__lshift+0x3e>
 8007332:	4602      	mov	r2, r0
 8007334:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007338:	4b29      	ldr	r3, [pc, #164]	; (80073e0 <__lshift+0xd8>)
 800733a:	482a      	ldr	r0, [pc, #168]	; (80073e4 <__lshift+0xdc>)
 800733c:	f000 fbb4 	bl	8007aa8 <__assert_func>
 8007340:	3101      	adds	r1, #1
 8007342:	005b      	lsls	r3, r3, #1
 8007344:	e7ee      	b.n	8007324 <__lshift+0x1c>
 8007346:	2300      	movs	r3, #0
 8007348:	f100 0114 	add.w	r1, r0, #20
 800734c:	f100 0210 	add.w	r2, r0, #16
 8007350:	4618      	mov	r0, r3
 8007352:	4553      	cmp	r3, sl
 8007354:	db37      	blt.n	80073c6 <__lshift+0xbe>
 8007356:	6920      	ldr	r0, [r4, #16]
 8007358:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800735c:	f104 0314 	add.w	r3, r4, #20
 8007360:	f019 091f 	ands.w	r9, r9, #31
 8007364:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007368:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800736c:	d02f      	beq.n	80073ce <__lshift+0xc6>
 800736e:	468a      	mov	sl, r1
 8007370:	f04f 0c00 	mov.w	ip, #0
 8007374:	f1c9 0e20 	rsb	lr, r9, #32
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	fa02 f209 	lsl.w	r2, r2, r9
 800737e:	ea42 020c 	orr.w	r2, r2, ip
 8007382:	f84a 2b04 	str.w	r2, [sl], #4
 8007386:	f853 2b04 	ldr.w	r2, [r3], #4
 800738a:	4298      	cmp	r0, r3
 800738c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007390:	d8f2      	bhi.n	8007378 <__lshift+0x70>
 8007392:	1b03      	subs	r3, r0, r4
 8007394:	3b15      	subs	r3, #21
 8007396:	f023 0303 	bic.w	r3, r3, #3
 800739a:	3304      	adds	r3, #4
 800739c:	f104 0215 	add.w	r2, r4, #21
 80073a0:	4290      	cmp	r0, r2
 80073a2:	bf38      	it	cc
 80073a4:	2304      	movcc	r3, #4
 80073a6:	f841 c003 	str.w	ip, [r1, r3]
 80073aa:	f1bc 0f00 	cmp.w	ip, #0
 80073ae:	d001      	beq.n	80073b4 <__lshift+0xac>
 80073b0:	f108 0602 	add.w	r6, r8, #2
 80073b4:	3e01      	subs	r6, #1
 80073b6:	4638      	mov	r0, r7
 80073b8:	4621      	mov	r1, r4
 80073ba:	612e      	str	r6, [r5, #16]
 80073bc:	f7ff fdd6 	bl	8006f6c <_Bfree>
 80073c0:	4628      	mov	r0, r5
 80073c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80073ca:	3301      	adds	r3, #1
 80073cc:	e7c1      	b.n	8007352 <__lshift+0x4a>
 80073ce:	3904      	subs	r1, #4
 80073d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80073d4:	4298      	cmp	r0, r3
 80073d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80073da:	d8f9      	bhi.n	80073d0 <__lshift+0xc8>
 80073dc:	e7ea      	b.n	80073b4 <__lshift+0xac>
 80073de:	bf00      	nop
 80073e0:	080087bb 	.word	0x080087bb
 80073e4:	080087cc 	.word	0x080087cc

080073e8 <__mcmp>:
 80073e8:	4603      	mov	r3, r0
 80073ea:	690a      	ldr	r2, [r1, #16]
 80073ec:	6900      	ldr	r0, [r0, #16]
 80073ee:	b530      	push	{r4, r5, lr}
 80073f0:	1a80      	subs	r0, r0, r2
 80073f2:	d10d      	bne.n	8007410 <__mcmp+0x28>
 80073f4:	3314      	adds	r3, #20
 80073f6:	3114      	adds	r1, #20
 80073f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80073fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007400:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007404:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007408:	4295      	cmp	r5, r2
 800740a:	d002      	beq.n	8007412 <__mcmp+0x2a>
 800740c:	d304      	bcc.n	8007418 <__mcmp+0x30>
 800740e:	2001      	movs	r0, #1
 8007410:	bd30      	pop	{r4, r5, pc}
 8007412:	42a3      	cmp	r3, r4
 8007414:	d3f4      	bcc.n	8007400 <__mcmp+0x18>
 8007416:	e7fb      	b.n	8007410 <__mcmp+0x28>
 8007418:	f04f 30ff 	mov.w	r0, #4294967295
 800741c:	e7f8      	b.n	8007410 <__mcmp+0x28>
	...

08007420 <__mdiff>:
 8007420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007424:	460d      	mov	r5, r1
 8007426:	4607      	mov	r7, r0
 8007428:	4611      	mov	r1, r2
 800742a:	4628      	mov	r0, r5
 800742c:	4614      	mov	r4, r2
 800742e:	f7ff ffdb 	bl	80073e8 <__mcmp>
 8007432:	1e06      	subs	r6, r0, #0
 8007434:	d111      	bne.n	800745a <__mdiff+0x3a>
 8007436:	4631      	mov	r1, r6
 8007438:	4638      	mov	r0, r7
 800743a:	f7ff fd57 	bl	8006eec <_Balloc>
 800743e:	4602      	mov	r2, r0
 8007440:	b928      	cbnz	r0, 800744e <__mdiff+0x2e>
 8007442:	f240 2132 	movw	r1, #562	; 0x232
 8007446:	4b3a      	ldr	r3, [pc, #232]	; (8007530 <__mdiff+0x110>)
 8007448:	483a      	ldr	r0, [pc, #232]	; (8007534 <__mdiff+0x114>)
 800744a:	f000 fb2d 	bl	8007aa8 <__assert_func>
 800744e:	2301      	movs	r3, #1
 8007450:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007454:	4610      	mov	r0, r2
 8007456:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800745a:	bfa4      	itt	ge
 800745c:	4623      	movge	r3, r4
 800745e:	462c      	movge	r4, r5
 8007460:	4638      	mov	r0, r7
 8007462:	6861      	ldr	r1, [r4, #4]
 8007464:	bfa6      	itte	ge
 8007466:	461d      	movge	r5, r3
 8007468:	2600      	movge	r6, #0
 800746a:	2601      	movlt	r6, #1
 800746c:	f7ff fd3e 	bl	8006eec <_Balloc>
 8007470:	4602      	mov	r2, r0
 8007472:	b918      	cbnz	r0, 800747c <__mdiff+0x5c>
 8007474:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007478:	4b2d      	ldr	r3, [pc, #180]	; (8007530 <__mdiff+0x110>)
 800747a:	e7e5      	b.n	8007448 <__mdiff+0x28>
 800747c:	f102 0814 	add.w	r8, r2, #20
 8007480:	46c2      	mov	sl, r8
 8007482:	f04f 0c00 	mov.w	ip, #0
 8007486:	6927      	ldr	r7, [r4, #16]
 8007488:	60c6      	str	r6, [r0, #12]
 800748a:	692e      	ldr	r6, [r5, #16]
 800748c:	f104 0014 	add.w	r0, r4, #20
 8007490:	f105 0914 	add.w	r9, r5, #20
 8007494:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007498:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800749c:	3410      	adds	r4, #16
 800749e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80074a2:	f859 3b04 	ldr.w	r3, [r9], #4
 80074a6:	fa1f f18b 	uxth.w	r1, fp
 80074aa:	448c      	add	ip, r1
 80074ac:	b299      	uxth	r1, r3
 80074ae:	0c1b      	lsrs	r3, r3, #16
 80074b0:	ebac 0101 	sub.w	r1, ip, r1
 80074b4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80074b8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80074bc:	b289      	uxth	r1, r1
 80074be:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80074c2:	454e      	cmp	r6, r9
 80074c4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80074c8:	f84a 3b04 	str.w	r3, [sl], #4
 80074cc:	d8e7      	bhi.n	800749e <__mdiff+0x7e>
 80074ce:	1b73      	subs	r3, r6, r5
 80074d0:	3b15      	subs	r3, #21
 80074d2:	f023 0303 	bic.w	r3, r3, #3
 80074d6:	3515      	adds	r5, #21
 80074d8:	3304      	adds	r3, #4
 80074da:	42ae      	cmp	r6, r5
 80074dc:	bf38      	it	cc
 80074de:	2304      	movcc	r3, #4
 80074e0:	4418      	add	r0, r3
 80074e2:	4443      	add	r3, r8
 80074e4:	461e      	mov	r6, r3
 80074e6:	4605      	mov	r5, r0
 80074e8:	4575      	cmp	r5, lr
 80074ea:	d30e      	bcc.n	800750a <__mdiff+0xea>
 80074ec:	f10e 0103 	add.w	r1, lr, #3
 80074f0:	1a09      	subs	r1, r1, r0
 80074f2:	f021 0103 	bic.w	r1, r1, #3
 80074f6:	3803      	subs	r0, #3
 80074f8:	4586      	cmp	lr, r0
 80074fa:	bf38      	it	cc
 80074fc:	2100      	movcc	r1, #0
 80074fe:	4419      	add	r1, r3
 8007500:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007504:	b18b      	cbz	r3, 800752a <__mdiff+0x10a>
 8007506:	6117      	str	r7, [r2, #16]
 8007508:	e7a4      	b.n	8007454 <__mdiff+0x34>
 800750a:	f855 8b04 	ldr.w	r8, [r5], #4
 800750e:	fa1f f188 	uxth.w	r1, r8
 8007512:	4461      	add	r1, ip
 8007514:	140c      	asrs	r4, r1, #16
 8007516:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800751a:	b289      	uxth	r1, r1
 800751c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007520:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007524:	f846 1b04 	str.w	r1, [r6], #4
 8007528:	e7de      	b.n	80074e8 <__mdiff+0xc8>
 800752a:	3f01      	subs	r7, #1
 800752c:	e7e8      	b.n	8007500 <__mdiff+0xe0>
 800752e:	bf00      	nop
 8007530:	080087bb 	.word	0x080087bb
 8007534:	080087cc 	.word	0x080087cc

08007538 <__d2b>:
 8007538:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800753c:	2101      	movs	r1, #1
 800753e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007542:	4690      	mov	r8, r2
 8007544:	461d      	mov	r5, r3
 8007546:	f7ff fcd1 	bl	8006eec <_Balloc>
 800754a:	4604      	mov	r4, r0
 800754c:	b930      	cbnz	r0, 800755c <__d2b+0x24>
 800754e:	4602      	mov	r2, r0
 8007550:	f240 310a 	movw	r1, #778	; 0x30a
 8007554:	4b24      	ldr	r3, [pc, #144]	; (80075e8 <__d2b+0xb0>)
 8007556:	4825      	ldr	r0, [pc, #148]	; (80075ec <__d2b+0xb4>)
 8007558:	f000 faa6 	bl	8007aa8 <__assert_func>
 800755c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007560:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007564:	bb2d      	cbnz	r5, 80075b2 <__d2b+0x7a>
 8007566:	9301      	str	r3, [sp, #4]
 8007568:	f1b8 0300 	subs.w	r3, r8, #0
 800756c:	d026      	beq.n	80075bc <__d2b+0x84>
 800756e:	4668      	mov	r0, sp
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	f7ff fd83 	bl	800707c <__lo0bits>
 8007576:	9900      	ldr	r1, [sp, #0]
 8007578:	b1f0      	cbz	r0, 80075b8 <__d2b+0x80>
 800757a:	9a01      	ldr	r2, [sp, #4]
 800757c:	f1c0 0320 	rsb	r3, r0, #32
 8007580:	fa02 f303 	lsl.w	r3, r2, r3
 8007584:	430b      	orrs	r3, r1
 8007586:	40c2      	lsrs	r2, r0
 8007588:	6163      	str	r3, [r4, #20]
 800758a:	9201      	str	r2, [sp, #4]
 800758c:	9b01      	ldr	r3, [sp, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	bf14      	ite	ne
 8007592:	2102      	movne	r1, #2
 8007594:	2101      	moveq	r1, #1
 8007596:	61a3      	str	r3, [r4, #24]
 8007598:	6121      	str	r1, [r4, #16]
 800759a:	b1c5      	cbz	r5, 80075ce <__d2b+0x96>
 800759c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80075a0:	4405      	add	r5, r0
 80075a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80075a6:	603d      	str	r5, [r7, #0]
 80075a8:	6030      	str	r0, [r6, #0]
 80075aa:	4620      	mov	r0, r4
 80075ac:	b002      	add	sp, #8
 80075ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075b6:	e7d6      	b.n	8007566 <__d2b+0x2e>
 80075b8:	6161      	str	r1, [r4, #20]
 80075ba:	e7e7      	b.n	800758c <__d2b+0x54>
 80075bc:	a801      	add	r0, sp, #4
 80075be:	f7ff fd5d 	bl	800707c <__lo0bits>
 80075c2:	2101      	movs	r1, #1
 80075c4:	9b01      	ldr	r3, [sp, #4]
 80075c6:	6121      	str	r1, [r4, #16]
 80075c8:	6163      	str	r3, [r4, #20]
 80075ca:	3020      	adds	r0, #32
 80075cc:	e7e5      	b.n	800759a <__d2b+0x62>
 80075ce:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80075d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075d6:	6038      	str	r0, [r7, #0]
 80075d8:	6918      	ldr	r0, [r3, #16]
 80075da:	f7ff fd2f 	bl	800703c <__hi0bits>
 80075de:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80075e2:	6031      	str	r1, [r6, #0]
 80075e4:	e7e1      	b.n	80075aa <__d2b+0x72>
 80075e6:	bf00      	nop
 80075e8:	080087bb 	.word	0x080087bb
 80075ec:	080087cc 	.word	0x080087cc

080075f0 <_calloc_r>:
 80075f0:	b570      	push	{r4, r5, r6, lr}
 80075f2:	fba1 5402 	umull	r5, r4, r1, r2
 80075f6:	b934      	cbnz	r4, 8007606 <_calloc_r+0x16>
 80075f8:	4629      	mov	r1, r5
 80075fa:	f000 f875 	bl	80076e8 <_malloc_r>
 80075fe:	4606      	mov	r6, r0
 8007600:	b928      	cbnz	r0, 800760e <_calloc_r+0x1e>
 8007602:	4630      	mov	r0, r6
 8007604:	bd70      	pop	{r4, r5, r6, pc}
 8007606:	220c      	movs	r2, #12
 8007608:	2600      	movs	r6, #0
 800760a:	6002      	str	r2, [r0, #0]
 800760c:	e7f9      	b.n	8007602 <_calloc_r+0x12>
 800760e:	462a      	mov	r2, r5
 8007610:	4621      	mov	r1, r4
 8007612:	f7fe f92b 	bl	800586c <memset>
 8007616:	e7f4      	b.n	8007602 <_calloc_r+0x12>

08007618 <_free_r>:
 8007618:	b538      	push	{r3, r4, r5, lr}
 800761a:	4605      	mov	r5, r0
 800761c:	2900      	cmp	r1, #0
 800761e:	d040      	beq.n	80076a2 <_free_r+0x8a>
 8007620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007624:	1f0c      	subs	r4, r1, #4
 8007626:	2b00      	cmp	r3, #0
 8007628:	bfb8      	it	lt
 800762a:	18e4      	addlt	r4, r4, r3
 800762c:	f000 fa98 	bl	8007b60 <__malloc_lock>
 8007630:	4a1c      	ldr	r2, [pc, #112]	; (80076a4 <_free_r+0x8c>)
 8007632:	6813      	ldr	r3, [r2, #0]
 8007634:	b933      	cbnz	r3, 8007644 <_free_r+0x2c>
 8007636:	6063      	str	r3, [r4, #4]
 8007638:	6014      	str	r4, [r2, #0]
 800763a:	4628      	mov	r0, r5
 800763c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007640:	f000 ba94 	b.w	8007b6c <__malloc_unlock>
 8007644:	42a3      	cmp	r3, r4
 8007646:	d908      	bls.n	800765a <_free_r+0x42>
 8007648:	6820      	ldr	r0, [r4, #0]
 800764a:	1821      	adds	r1, r4, r0
 800764c:	428b      	cmp	r3, r1
 800764e:	bf01      	itttt	eq
 8007650:	6819      	ldreq	r1, [r3, #0]
 8007652:	685b      	ldreq	r3, [r3, #4]
 8007654:	1809      	addeq	r1, r1, r0
 8007656:	6021      	streq	r1, [r4, #0]
 8007658:	e7ed      	b.n	8007636 <_free_r+0x1e>
 800765a:	461a      	mov	r2, r3
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	b10b      	cbz	r3, 8007664 <_free_r+0x4c>
 8007660:	42a3      	cmp	r3, r4
 8007662:	d9fa      	bls.n	800765a <_free_r+0x42>
 8007664:	6811      	ldr	r1, [r2, #0]
 8007666:	1850      	adds	r0, r2, r1
 8007668:	42a0      	cmp	r0, r4
 800766a:	d10b      	bne.n	8007684 <_free_r+0x6c>
 800766c:	6820      	ldr	r0, [r4, #0]
 800766e:	4401      	add	r1, r0
 8007670:	1850      	adds	r0, r2, r1
 8007672:	4283      	cmp	r3, r0
 8007674:	6011      	str	r1, [r2, #0]
 8007676:	d1e0      	bne.n	800763a <_free_r+0x22>
 8007678:	6818      	ldr	r0, [r3, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	4401      	add	r1, r0
 800767e:	6011      	str	r1, [r2, #0]
 8007680:	6053      	str	r3, [r2, #4]
 8007682:	e7da      	b.n	800763a <_free_r+0x22>
 8007684:	d902      	bls.n	800768c <_free_r+0x74>
 8007686:	230c      	movs	r3, #12
 8007688:	602b      	str	r3, [r5, #0]
 800768a:	e7d6      	b.n	800763a <_free_r+0x22>
 800768c:	6820      	ldr	r0, [r4, #0]
 800768e:	1821      	adds	r1, r4, r0
 8007690:	428b      	cmp	r3, r1
 8007692:	bf01      	itttt	eq
 8007694:	6819      	ldreq	r1, [r3, #0]
 8007696:	685b      	ldreq	r3, [r3, #4]
 8007698:	1809      	addeq	r1, r1, r0
 800769a:	6021      	streq	r1, [r4, #0]
 800769c:	6063      	str	r3, [r4, #4]
 800769e:	6054      	str	r4, [r2, #4]
 80076a0:	e7cb      	b.n	800763a <_free_r+0x22>
 80076a2:	bd38      	pop	{r3, r4, r5, pc}
 80076a4:	20000424 	.word	0x20000424

080076a8 <sbrk_aligned>:
 80076a8:	b570      	push	{r4, r5, r6, lr}
 80076aa:	4e0e      	ldr	r6, [pc, #56]	; (80076e4 <sbrk_aligned+0x3c>)
 80076ac:	460c      	mov	r4, r1
 80076ae:	6831      	ldr	r1, [r6, #0]
 80076b0:	4605      	mov	r5, r0
 80076b2:	b911      	cbnz	r1, 80076ba <sbrk_aligned+0x12>
 80076b4:	f000 f9e8 	bl	8007a88 <_sbrk_r>
 80076b8:	6030      	str	r0, [r6, #0]
 80076ba:	4621      	mov	r1, r4
 80076bc:	4628      	mov	r0, r5
 80076be:	f000 f9e3 	bl	8007a88 <_sbrk_r>
 80076c2:	1c43      	adds	r3, r0, #1
 80076c4:	d00a      	beq.n	80076dc <sbrk_aligned+0x34>
 80076c6:	1cc4      	adds	r4, r0, #3
 80076c8:	f024 0403 	bic.w	r4, r4, #3
 80076cc:	42a0      	cmp	r0, r4
 80076ce:	d007      	beq.n	80076e0 <sbrk_aligned+0x38>
 80076d0:	1a21      	subs	r1, r4, r0
 80076d2:	4628      	mov	r0, r5
 80076d4:	f000 f9d8 	bl	8007a88 <_sbrk_r>
 80076d8:	3001      	adds	r0, #1
 80076da:	d101      	bne.n	80076e0 <sbrk_aligned+0x38>
 80076dc:	f04f 34ff 	mov.w	r4, #4294967295
 80076e0:	4620      	mov	r0, r4
 80076e2:	bd70      	pop	{r4, r5, r6, pc}
 80076e4:	20000428 	.word	0x20000428

080076e8 <_malloc_r>:
 80076e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ec:	1ccd      	adds	r5, r1, #3
 80076ee:	f025 0503 	bic.w	r5, r5, #3
 80076f2:	3508      	adds	r5, #8
 80076f4:	2d0c      	cmp	r5, #12
 80076f6:	bf38      	it	cc
 80076f8:	250c      	movcc	r5, #12
 80076fa:	2d00      	cmp	r5, #0
 80076fc:	4607      	mov	r7, r0
 80076fe:	db01      	blt.n	8007704 <_malloc_r+0x1c>
 8007700:	42a9      	cmp	r1, r5
 8007702:	d905      	bls.n	8007710 <_malloc_r+0x28>
 8007704:	230c      	movs	r3, #12
 8007706:	2600      	movs	r6, #0
 8007708:	603b      	str	r3, [r7, #0]
 800770a:	4630      	mov	r0, r6
 800770c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007710:	4e2e      	ldr	r6, [pc, #184]	; (80077cc <_malloc_r+0xe4>)
 8007712:	f000 fa25 	bl	8007b60 <__malloc_lock>
 8007716:	6833      	ldr	r3, [r6, #0]
 8007718:	461c      	mov	r4, r3
 800771a:	bb34      	cbnz	r4, 800776a <_malloc_r+0x82>
 800771c:	4629      	mov	r1, r5
 800771e:	4638      	mov	r0, r7
 8007720:	f7ff ffc2 	bl	80076a8 <sbrk_aligned>
 8007724:	1c43      	adds	r3, r0, #1
 8007726:	4604      	mov	r4, r0
 8007728:	d14d      	bne.n	80077c6 <_malloc_r+0xde>
 800772a:	6834      	ldr	r4, [r6, #0]
 800772c:	4626      	mov	r6, r4
 800772e:	2e00      	cmp	r6, #0
 8007730:	d140      	bne.n	80077b4 <_malloc_r+0xcc>
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	4631      	mov	r1, r6
 8007736:	4638      	mov	r0, r7
 8007738:	eb04 0803 	add.w	r8, r4, r3
 800773c:	f000 f9a4 	bl	8007a88 <_sbrk_r>
 8007740:	4580      	cmp	r8, r0
 8007742:	d13a      	bne.n	80077ba <_malloc_r+0xd2>
 8007744:	6821      	ldr	r1, [r4, #0]
 8007746:	3503      	adds	r5, #3
 8007748:	1a6d      	subs	r5, r5, r1
 800774a:	f025 0503 	bic.w	r5, r5, #3
 800774e:	3508      	adds	r5, #8
 8007750:	2d0c      	cmp	r5, #12
 8007752:	bf38      	it	cc
 8007754:	250c      	movcc	r5, #12
 8007756:	4638      	mov	r0, r7
 8007758:	4629      	mov	r1, r5
 800775a:	f7ff ffa5 	bl	80076a8 <sbrk_aligned>
 800775e:	3001      	adds	r0, #1
 8007760:	d02b      	beq.n	80077ba <_malloc_r+0xd2>
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	442b      	add	r3, r5
 8007766:	6023      	str	r3, [r4, #0]
 8007768:	e00e      	b.n	8007788 <_malloc_r+0xa0>
 800776a:	6822      	ldr	r2, [r4, #0]
 800776c:	1b52      	subs	r2, r2, r5
 800776e:	d41e      	bmi.n	80077ae <_malloc_r+0xc6>
 8007770:	2a0b      	cmp	r2, #11
 8007772:	d916      	bls.n	80077a2 <_malloc_r+0xba>
 8007774:	1961      	adds	r1, r4, r5
 8007776:	42a3      	cmp	r3, r4
 8007778:	6025      	str	r5, [r4, #0]
 800777a:	bf18      	it	ne
 800777c:	6059      	strne	r1, [r3, #4]
 800777e:	6863      	ldr	r3, [r4, #4]
 8007780:	bf08      	it	eq
 8007782:	6031      	streq	r1, [r6, #0]
 8007784:	5162      	str	r2, [r4, r5]
 8007786:	604b      	str	r3, [r1, #4]
 8007788:	4638      	mov	r0, r7
 800778a:	f104 060b 	add.w	r6, r4, #11
 800778e:	f000 f9ed 	bl	8007b6c <__malloc_unlock>
 8007792:	f026 0607 	bic.w	r6, r6, #7
 8007796:	1d23      	adds	r3, r4, #4
 8007798:	1af2      	subs	r2, r6, r3
 800779a:	d0b6      	beq.n	800770a <_malloc_r+0x22>
 800779c:	1b9b      	subs	r3, r3, r6
 800779e:	50a3      	str	r3, [r4, r2]
 80077a0:	e7b3      	b.n	800770a <_malloc_r+0x22>
 80077a2:	6862      	ldr	r2, [r4, #4]
 80077a4:	42a3      	cmp	r3, r4
 80077a6:	bf0c      	ite	eq
 80077a8:	6032      	streq	r2, [r6, #0]
 80077aa:	605a      	strne	r2, [r3, #4]
 80077ac:	e7ec      	b.n	8007788 <_malloc_r+0xa0>
 80077ae:	4623      	mov	r3, r4
 80077b0:	6864      	ldr	r4, [r4, #4]
 80077b2:	e7b2      	b.n	800771a <_malloc_r+0x32>
 80077b4:	4634      	mov	r4, r6
 80077b6:	6876      	ldr	r6, [r6, #4]
 80077b8:	e7b9      	b.n	800772e <_malloc_r+0x46>
 80077ba:	230c      	movs	r3, #12
 80077bc:	4638      	mov	r0, r7
 80077be:	603b      	str	r3, [r7, #0]
 80077c0:	f000 f9d4 	bl	8007b6c <__malloc_unlock>
 80077c4:	e7a1      	b.n	800770a <_malloc_r+0x22>
 80077c6:	6025      	str	r5, [r4, #0]
 80077c8:	e7de      	b.n	8007788 <_malloc_r+0xa0>
 80077ca:	bf00      	nop
 80077cc:	20000424 	.word	0x20000424

080077d0 <__ssputs_r>:
 80077d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077d4:	688e      	ldr	r6, [r1, #8]
 80077d6:	4682      	mov	sl, r0
 80077d8:	429e      	cmp	r6, r3
 80077da:	460c      	mov	r4, r1
 80077dc:	4690      	mov	r8, r2
 80077de:	461f      	mov	r7, r3
 80077e0:	d838      	bhi.n	8007854 <__ssputs_r+0x84>
 80077e2:	898a      	ldrh	r2, [r1, #12]
 80077e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077e8:	d032      	beq.n	8007850 <__ssputs_r+0x80>
 80077ea:	6825      	ldr	r5, [r4, #0]
 80077ec:	6909      	ldr	r1, [r1, #16]
 80077ee:	3301      	adds	r3, #1
 80077f0:	eba5 0901 	sub.w	r9, r5, r1
 80077f4:	6965      	ldr	r5, [r4, #20]
 80077f6:	444b      	add	r3, r9
 80077f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007800:	106d      	asrs	r5, r5, #1
 8007802:	429d      	cmp	r5, r3
 8007804:	bf38      	it	cc
 8007806:	461d      	movcc	r5, r3
 8007808:	0553      	lsls	r3, r2, #21
 800780a:	d531      	bpl.n	8007870 <__ssputs_r+0xa0>
 800780c:	4629      	mov	r1, r5
 800780e:	f7ff ff6b 	bl	80076e8 <_malloc_r>
 8007812:	4606      	mov	r6, r0
 8007814:	b950      	cbnz	r0, 800782c <__ssputs_r+0x5c>
 8007816:	230c      	movs	r3, #12
 8007818:	f04f 30ff 	mov.w	r0, #4294967295
 800781c:	f8ca 3000 	str.w	r3, [sl]
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007826:	81a3      	strh	r3, [r4, #12]
 8007828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800782c:	464a      	mov	r2, r9
 800782e:	6921      	ldr	r1, [r4, #16]
 8007830:	f7ff fb4e 	bl	8006ed0 <memcpy>
 8007834:	89a3      	ldrh	r3, [r4, #12]
 8007836:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800783a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800783e:	81a3      	strh	r3, [r4, #12]
 8007840:	6126      	str	r6, [r4, #16]
 8007842:	444e      	add	r6, r9
 8007844:	6026      	str	r6, [r4, #0]
 8007846:	463e      	mov	r6, r7
 8007848:	6165      	str	r5, [r4, #20]
 800784a:	eba5 0509 	sub.w	r5, r5, r9
 800784e:	60a5      	str	r5, [r4, #8]
 8007850:	42be      	cmp	r6, r7
 8007852:	d900      	bls.n	8007856 <__ssputs_r+0x86>
 8007854:	463e      	mov	r6, r7
 8007856:	4632      	mov	r2, r6
 8007858:	4641      	mov	r1, r8
 800785a:	6820      	ldr	r0, [r4, #0]
 800785c:	f000 f966 	bl	8007b2c <memmove>
 8007860:	68a3      	ldr	r3, [r4, #8]
 8007862:	2000      	movs	r0, #0
 8007864:	1b9b      	subs	r3, r3, r6
 8007866:	60a3      	str	r3, [r4, #8]
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	4433      	add	r3, r6
 800786c:	6023      	str	r3, [r4, #0]
 800786e:	e7db      	b.n	8007828 <__ssputs_r+0x58>
 8007870:	462a      	mov	r2, r5
 8007872:	f000 f981 	bl	8007b78 <_realloc_r>
 8007876:	4606      	mov	r6, r0
 8007878:	2800      	cmp	r0, #0
 800787a:	d1e1      	bne.n	8007840 <__ssputs_r+0x70>
 800787c:	4650      	mov	r0, sl
 800787e:	6921      	ldr	r1, [r4, #16]
 8007880:	f7ff feca 	bl	8007618 <_free_r>
 8007884:	e7c7      	b.n	8007816 <__ssputs_r+0x46>
	...

08007888 <_svfiprintf_r>:
 8007888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800788c:	4698      	mov	r8, r3
 800788e:	898b      	ldrh	r3, [r1, #12]
 8007890:	4607      	mov	r7, r0
 8007892:	061b      	lsls	r3, r3, #24
 8007894:	460d      	mov	r5, r1
 8007896:	4614      	mov	r4, r2
 8007898:	b09d      	sub	sp, #116	; 0x74
 800789a:	d50e      	bpl.n	80078ba <_svfiprintf_r+0x32>
 800789c:	690b      	ldr	r3, [r1, #16]
 800789e:	b963      	cbnz	r3, 80078ba <_svfiprintf_r+0x32>
 80078a0:	2140      	movs	r1, #64	; 0x40
 80078a2:	f7ff ff21 	bl	80076e8 <_malloc_r>
 80078a6:	6028      	str	r0, [r5, #0]
 80078a8:	6128      	str	r0, [r5, #16]
 80078aa:	b920      	cbnz	r0, 80078b6 <_svfiprintf_r+0x2e>
 80078ac:	230c      	movs	r3, #12
 80078ae:	603b      	str	r3, [r7, #0]
 80078b0:	f04f 30ff 	mov.w	r0, #4294967295
 80078b4:	e0d1      	b.n	8007a5a <_svfiprintf_r+0x1d2>
 80078b6:	2340      	movs	r3, #64	; 0x40
 80078b8:	616b      	str	r3, [r5, #20]
 80078ba:	2300      	movs	r3, #0
 80078bc:	9309      	str	r3, [sp, #36]	; 0x24
 80078be:	2320      	movs	r3, #32
 80078c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078c4:	2330      	movs	r3, #48	; 0x30
 80078c6:	f04f 0901 	mov.w	r9, #1
 80078ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80078ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007a74 <_svfiprintf_r+0x1ec>
 80078d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078d6:	4623      	mov	r3, r4
 80078d8:	469a      	mov	sl, r3
 80078da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078de:	b10a      	cbz	r2, 80078e4 <_svfiprintf_r+0x5c>
 80078e0:	2a25      	cmp	r2, #37	; 0x25
 80078e2:	d1f9      	bne.n	80078d8 <_svfiprintf_r+0x50>
 80078e4:	ebba 0b04 	subs.w	fp, sl, r4
 80078e8:	d00b      	beq.n	8007902 <_svfiprintf_r+0x7a>
 80078ea:	465b      	mov	r3, fp
 80078ec:	4622      	mov	r2, r4
 80078ee:	4629      	mov	r1, r5
 80078f0:	4638      	mov	r0, r7
 80078f2:	f7ff ff6d 	bl	80077d0 <__ssputs_r>
 80078f6:	3001      	adds	r0, #1
 80078f8:	f000 80aa 	beq.w	8007a50 <_svfiprintf_r+0x1c8>
 80078fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078fe:	445a      	add	r2, fp
 8007900:	9209      	str	r2, [sp, #36]	; 0x24
 8007902:	f89a 3000 	ldrb.w	r3, [sl]
 8007906:	2b00      	cmp	r3, #0
 8007908:	f000 80a2 	beq.w	8007a50 <_svfiprintf_r+0x1c8>
 800790c:	2300      	movs	r3, #0
 800790e:	f04f 32ff 	mov.w	r2, #4294967295
 8007912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007916:	f10a 0a01 	add.w	sl, sl, #1
 800791a:	9304      	str	r3, [sp, #16]
 800791c:	9307      	str	r3, [sp, #28]
 800791e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007922:	931a      	str	r3, [sp, #104]	; 0x68
 8007924:	4654      	mov	r4, sl
 8007926:	2205      	movs	r2, #5
 8007928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800792c:	4851      	ldr	r0, [pc, #324]	; (8007a74 <_svfiprintf_r+0x1ec>)
 800792e:	f7ff fac1 	bl	8006eb4 <memchr>
 8007932:	9a04      	ldr	r2, [sp, #16]
 8007934:	b9d8      	cbnz	r0, 800796e <_svfiprintf_r+0xe6>
 8007936:	06d0      	lsls	r0, r2, #27
 8007938:	bf44      	itt	mi
 800793a:	2320      	movmi	r3, #32
 800793c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007940:	0711      	lsls	r1, r2, #28
 8007942:	bf44      	itt	mi
 8007944:	232b      	movmi	r3, #43	; 0x2b
 8007946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800794a:	f89a 3000 	ldrb.w	r3, [sl]
 800794e:	2b2a      	cmp	r3, #42	; 0x2a
 8007950:	d015      	beq.n	800797e <_svfiprintf_r+0xf6>
 8007952:	4654      	mov	r4, sl
 8007954:	2000      	movs	r0, #0
 8007956:	f04f 0c0a 	mov.w	ip, #10
 800795a:	9a07      	ldr	r2, [sp, #28]
 800795c:	4621      	mov	r1, r4
 800795e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007962:	3b30      	subs	r3, #48	; 0x30
 8007964:	2b09      	cmp	r3, #9
 8007966:	d94e      	bls.n	8007a06 <_svfiprintf_r+0x17e>
 8007968:	b1b0      	cbz	r0, 8007998 <_svfiprintf_r+0x110>
 800796a:	9207      	str	r2, [sp, #28]
 800796c:	e014      	b.n	8007998 <_svfiprintf_r+0x110>
 800796e:	eba0 0308 	sub.w	r3, r0, r8
 8007972:	fa09 f303 	lsl.w	r3, r9, r3
 8007976:	4313      	orrs	r3, r2
 8007978:	46a2      	mov	sl, r4
 800797a:	9304      	str	r3, [sp, #16]
 800797c:	e7d2      	b.n	8007924 <_svfiprintf_r+0x9c>
 800797e:	9b03      	ldr	r3, [sp, #12]
 8007980:	1d19      	adds	r1, r3, #4
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	9103      	str	r1, [sp, #12]
 8007986:	2b00      	cmp	r3, #0
 8007988:	bfbb      	ittet	lt
 800798a:	425b      	neglt	r3, r3
 800798c:	f042 0202 	orrlt.w	r2, r2, #2
 8007990:	9307      	strge	r3, [sp, #28]
 8007992:	9307      	strlt	r3, [sp, #28]
 8007994:	bfb8      	it	lt
 8007996:	9204      	strlt	r2, [sp, #16]
 8007998:	7823      	ldrb	r3, [r4, #0]
 800799a:	2b2e      	cmp	r3, #46	; 0x2e
 800799c:	d10c      	bne.n	80079b8 <_svfiprintf_r+0x130>
 800799e:	7863      	ldrb	r3, [r4, #1]
 80079a0:	2b2a      	cmp	r3, #42	; 0x2a
 80079a2:	d135      	bne.n	8007a10 <_svfiprintf_r+0x188>
 80079a4:	9b03      	ldr	r3, [sp, #12]
 80079a6:	3402      	adds	r4, #2
 80079a8:	1d1a      	adds	r2, r3, #4
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	9203      	str	r2, [sp, #12]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	bfb8      	it	lt
 80079b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80079b6:	9305      	str	r3, [sp, #20]
 80079b8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007a78 <_svfiprintf_r+0x1f0>
 80079bc:	2203      	movs	r2, #3
 80079be:	4650      	mov	r0, sl
 80079c0:	7821      	ldrb	r1, [r4, #0]
 80079c2:	f7ff fa77 	bl	8006eb4 <memchr>
 80079c6:	b140      	cbz	r0, 80079da <_svfiprintf_r+0x152>
 80079c8:	2340      	movs	r3, #64	; 0x40
 80079ca:	eba0 000a 	sub.w	r0, r0, sl
 80079ce:	fa03 f000 	lsl.w	r0, r3, r0
 80079d2:	9b04      	ldr	r3, [sp, #16]
 80079d4:	3401      	adds	r4, #1
 80079d6:	4303      	orrs	r3, r0
 80079d8:	9304      	str	r3, [sp, #16]
 80079da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079de:	2206      	movs	r2, #6
 80079e0:	4826      	ldr	r0, [pc, #152]	; (8007a7c <_svfiprintf_r+0x1f4>)
 80079e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079e6:	f7ff fa65 	bl	8006eb4 <memchr>
 80079ea:	2800      	cmp	r0, #0
 80079ec:	d038      	beq.n	8007a60 <_svfiprintf_r+0x1d8>
 80079ee:	4b24      	ldr	r3, [pc, #144]	; (8007a80 <_svfiprintf_r+0x1f8>)
 80079f0:	bb1b      	cbnz	r3, 8007a3a <_svfiprintf_r+0x1b2>
 80079f2:	9b03      	ldr	r3, [sp, #12]
 80079f4:	3307      	adds	r3, #7
 80079f6:	f023 0307 	bic.w	r3, r3, #7
 80079fa:	3308      	adds	r3, #8
 80079fc:	9303      	str	r3, [sp, #12]
 80079fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a00:	4433      	add	r3, r6
 8007a02:	9309      	str	r3, [sp, #36]	; 0x24
 8007a04:	e767      	b.n	80078d6 <_svfiprintf_r+0x4e>
 8007a06:	460c      	mov	r4, r1
 8007a08:	2001      	movs	r0, #1
 8007a0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a0e:	e7a5      	b.n	800795c <_svfiprintf_r+0xd4>
 8007a10:	2300      	movs	r3, #0
 8007a12:	f04f 0c0a 	mov.w	ip, #10
 8007a16:	4619      	mov	r1, r3
 8007a18:	3401      	adds	r4, #1
 8007a1a:	9305      	str	r3, [sp, #20]
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a22:	3a30      	subs	r2, #48	; 0x30
 8007a24:	2a09      	cmp	r2, #9
 8007a26:	d903      	bls.n	8007a30 <_svfiprintf_r+0x1a8>
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d0c5      	beq.n	80079b8 <_svfiprintf_r+0x130>
 8007a2c:	9105      	str	r1, [sp, #20]
 8007a2e:	e7c3      	b.n	80079b8 <_svfiprintf_r+0x130>
 8007a30:	4604      	mov	r4, r0
 8007a32:	2301      	movs	r3, #1
 8007a34:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a38:	e7f0      	b.n	8007a1c <_svfiprintf_r+0x194>
 8007a3a:	ab03      	add	r3, sp, #12
 8007a3c:	9300      	str	r3, [sp, #0]
 8007a3e:	462a      	mov	r2, r5
 8007a40:	4638      	mov	r0, r7
 8007a42:	4b10      	ldr	r3, [pc, #64]	; (8007a84 <_svfiprintf_r+0x1fc>)
 8007a44:	a904      	add	r1, sp, #16
 8007a46:	f7fd ffb7 	bl	80059b8 <_printf_float>
 8007a4a:	1c42      	adds	r2, r0, #1
 8007a4c:	4606      	mov	r6, r0
 8007a4e:	d1d6      	bne.n	80079fe <_svfiprintf_r+0x176>
 8007a50:	89ab      	ldrh	r3, [r5, #12]
 8007a52:	065b      	lsls	r3, r3, #25
 8007a54:	f53f af2c 	bmi.w	80078b0 <_svfiprintf_r+0x28>
 8007a58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a5a:	b01d      	add	sp, #116	; 0x74
 8007a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a60:	ab03      	add	r3, sp, #12
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	462a      	mov	r2, r5
 8007a66:	4638      	mov	r0, r7
 8007a68:	4b06      	ldr	r3, [pc, #24]	; (8007a84 <_svfiprintf_r+0x1fc>)
 8007a6a:	a904      	add	r1, sp, #16
 8007a6c:	f7fe fa40 	bl	8005ef0 <_printf_i>
 8007a70:	e7eb      	b.n	8007a4a <_svfiprintf_r+0x1c2>
 8007a72:	bf00      	nop
 8007a74:	08008924 	.word	0x08008924
 8007a78:	0800892a 	.word	0x0800892a
 8007a7c:	0800892e 	.word	0x0800892e
 8007a80:	080059b9 	.word	0x080059b9
 8007a84:	080077d1 	.word	0x080077d1

08007a88 <_sbrk_r>:
 8007a88:	b538      	push	{r3, r4, r5, lr}
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	4d05      	ldr	r5, [pc, #20]	; (8007aa4 <_sbrk_r+0x1c>)
 8007a8e:	4604      	mov	r4, r0
 8007a90:	4608      	mov	r0, r1
 8007a92:	602b      	str	r3, [r5, #0]
 8007a94:	f7fa fac0 	bl	8002018 <_sbrk>
 8007a98:	1c43      	adds	r3, r0, #1
 8007a9a:	d102      	bne.n	8007aa2 <_sbrk_r+0x1a>
 8007a9c:	682b      	ldr	r3, [r5, #0]
 8007a9e:	b103      	cbz	r3, 8007aa2 <_sbrk_r+0x1a>
 8007aa0:	6023      	str	r3, [r4, #0]
 8007aa2:	bd38      	pop	{r3, r4, r5, pc}
 8007aa4:	2000042c 	.word	0x2000042c

08007aa8 <__assert_func>:
 8007aa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007aaa:	4614      	mov	r4, r2
 8007aac:	461a      	mov	r2, r3
 8007aae:	4b09      	ldr	r3, [pc, #36]	; (8007ad4 <__assert_func+0x2c>)
 8007ab0:	4605      	mov	r5, r0
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68d8      	ldr	r0, [r3, #12]
 8007ab6:	b14c      	cbz	r4, 8007acc <__assert_func+0x24>
 8007ab8:	4b07      	ldr	r3, [pc, #28]	; (8007ad8 <__assert_func+0x30>)
 8007aba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007abe:	9100      	str	r1, [sp, #0]
 8007ac0:	462b      	mov	r3, r5
 8007ac2:	4906      	ldr	r1, [pc, #24]	; (8007adc <__assert_func+0x34>)
 8007ac4:	f000 f80e 	bl	8007ae4 <fiprintf>
 8007ac8:	f000 faaa 	bl	8008020 <abort>
 8007acc:	4b04      	ldr	r3, [pc, #16]	; (8007ae0 <__assert_func+0x38>)
 8007ace:	461c      	mov	r4, r3
 8007ad0:	e7f3      	b.n	8007aba <__assert_func+0x12>
 8007ad2:	bf00      	nop
 8007ad4:	2000001c 	.word	0x2000001c
 8007ad8:	08008935 	.word	0x08008935
 8007adc:	08008942 	.word	0x08008942
 8007ae0:	08008970 	.word	0x08008970

08007ae4 <fiprintf>:
 8007ae4:	b40e      	push	{r1, r2, r3}
 8007ae6:	b503      	push	{r0, r1, lr}
 8007ae8:	4601      	mov	r1, r0
 8007aea:	ab03      	add	r3, sp, #12
 8007aec:	4805      	ldr	r0, [pc, #20]	; (8007b04 <fiprintf+0x20>)
 8007aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8007af2:	6800      	ldr	r0, [r0, #0]
 8007af4:	9301      	str	r3, [sp, #4]
 8007af6:	f000 f895 	bl	8007c24 <_vfiprintf_r>
 8007afa:	b002      	add	sp, #8
 8007afc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b00:	b003      	add	sp, #12
 8007b02:	4770      	bx	lr
 8007b04:	2000001c 	.word	0x2000001c

08007b08 <__ascii_mbtowc>:
 8007b08:	b082      	sub	sp, #8
 8007b0a:	b901      	cbnz	r1, 8007b0e <__ascii_mbtowc+0x6>
 8007b0c:	a901      	add	r1, sp, #4
 8007b0e:	b142      	cbz	r2, 8007b22 <__ascii_mbtowc+0x1a>
 8007b10:	b14b      	cbz	r3, 8007b26 <__ascii_mbtowc+0x1e>
 8007b12:	7813      	ldrb	r3, [r2, #0]
 8007b14:	600b      	str	r3, [r1, #0]
 8007b16:	7812      	ldrb	r2, [r2, #0]
 8007b18:	1e10      	subs	r0, r2, #0
 8007b1a:	bf18      	it	ne
 8007b1c:	2001      	movne	r0, #1
 8007b1e:	b002      	add	sp, #8
 8007b20:	4770      	bx	lr
 8007b22:	4610      	mov	r0, r2
 8007b24:	e7fb      	b.n	8007b1e <__ascii_mbtowc+0x16>
 8007b26:	f06f 0001 	mvn.w	r0, #1
 8007b2a:	e7f8      	b.n	8007b1e <__ascii_mbtowc+0x16>

08007b2c <memmove>:
 8007b2c:	4288      	cmp	r0, r1
 8007b2e:	b510      	push	{r4, lr}
 8007b30:	eb01 0402 	add.w	r4, r1, r2
 8007b34:	d902      	bls.n	8007b3c <memmove+0x10>
 8007b36:	4284      	cmp	r4, r0
 8007b38:	4623      	mov	r3, r4
 8007b3a:	d807      	bhi.n	8007b4c <memmove+0x20>
 8007b3c:	1e43      	subs	r3, r0, #1
 8007b3e:	42a1      	cmp	r1, r4
 8007b40:	d008      	beq.n	8007b54 <memmove+0x28>
 8007b42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b4a:	e7f8      	b.n	8007b3e <memmove+0x12>
 8007b4c:	4601      	mov	r1, r0
 8007b4e:	4402      	add	r2, r0
 8007b50:	428a      	cmp	r2, r1
 8007b52:	d100      	bne.n	8007b56 <memmove+0x2a>
 8007b54:	bd10      	pop	{r4, pc}
 8007b56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b5e:	e7f7      	b.n	8007b50 <memmove+0x24>

08007b60 <__malloc_lock>:
 8007b60:	4801      	ldr	r0, [pc, #4]	; (8007b68 <__malloc_lock+0x8>)
 8007b62:	f000 bc19 	b.w	8008398 <__retarget_lock_acquire_recursive>
 8007b66:	bf00      	nop
 8007b68:	20000430 	.word	0x20000430

08007b6c <__malloc_unlock>:
 8007b6c:	4801      	ldr	r0, [pc, #4]	; (8007b74 <__malloc_unlock+0x8>)
 8007b6e:	f000 bc14 	b.w	800839a <__retarget_lock_release_recursive>
 8007b72:	bf00      	nop
 8007b74:	20000430 	.word	0x20000430

08007b78 <_realloc_r>:
 8007b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b7c:	4680      	mov	r8, r0
 8007b7e:	4614      	mov	r4, r2
 8007b80:	460e      	mov	r6, r1
 8007b82:	b921      	cbnz	r1, 8007b8e <_realloc_r+0x16>
 8007b84:	4611      	mov	r1, r2
 8007b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b8a:	f7ff bdad 	b.w	80076e8 <_malloc_r>
 8007b8e:	b92a      	cbnz	r2, 8007b9c <_realloc_r+0x24>
 8007b90:	f7ff fd42 	bl	8007618 <_free_r>
 8007b94:	4625      	mov	r5, r4
 8007b96:	4628      	mov	r0, r5
 8007b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b9c:	f000 fc64 	bl	8008468 <_malloc_usable_size_r>
 8007ba0:	4284      	cmp	r4, r0
 8007ba2:	4607      	mov	r7, r0
 8007ba4:	d802      	bhi.n	8007bac <_realloc_r+0x34>
 8007ba6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007baa:	d812      	bhi.n	8007bd2 <_realloc_r+0x5a>
 8007bac:	4621      	mov	r1, r4
 8007bae:	4640      	mov	r0, r8
 8007bb0:	f7ff fd9a 	bl	80076e8 <_malloc_r>
 8007bb4:	4605      	mov	r5, r0
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d0ed      	beq.n	8007b96 <_realloc_r+0x1e>
 8007bba:	42bc      	cmp	r4, r7
 8007bbc:	4622      	mov	r2, r4
 8007bbe:	4631      	mov	r1, r6
 8007bc0:	bf28      	it	cs
 8007bc2:	463a      	movcs	r2, r7
 8007bc4:	f7ff f984 	bl	8006ed0 <memcpy>
 8007bc8:	4631      	mov	r1, r6
 8007bca:	4640      	mov	r0, r8
 8007bcc:	f7ff fd24 	bl	8007618 <_free_r>
 8007bd0:	e7e1      	b.n	8007b96 <_realloc_r+0x1e>
 8007bd2:	4635      	mov	r5, r6
 8007bd4:	e7df      	b.n	8007b96 <_realloc_r+0x1e>

08007bd6 <__sfputc_r>:
 8007bd6:	6893      	ldr	r3, [r2, #8]
 8007bd8:	b410      	push	{r4}
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	6093      	str	r3, [r2, #8]
 8007be0:	da07      	bge.n	8007bf2 <__sfputc_r+0x1c>
 8007be2:	6994      	ldr	r4, [r2, #24]
 8007be4:	42a3      	cmp	r3, r4
 8007be6:	db01      	blt.n	8007bec <__sfputc_r+0x16>
 8007be8:	290a      	cmp	r1, #10
 8007bea:	d102      	bne.n	8007bf2 <__sfputc_r+0x1c>
 8007bec:	bc10      	pop	{r4}
 8007bee:	f000 b949 	b.w	8007e84 <__swbuf_r>
 8007bf2:	6813      	ldr	r3, [r2, #0]
 8007bf4:	1c58      	adds	r0, r3, #1
 8007bf6:	6010      	str	r0, [r2, #0]
 8007bf8:	7019      	strb	r1, [r3, #0]
 8007bfa:	4608      	mov	r0, r1
 8007bfc:	bc10      	pop	{r4}
 8007bfe:	4770      	bx	lr

08007c00 <__sfputs_r>:
 8007c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c02:	4606      	mov	r6, r0
 8007c04:	460f      	mov	r7, r1
 8007c06:	4614      	mov	r4, r2
 8007c08:	18d5      	adds	r5, r2, r3
 8007c0a:	42ac      	cmp	r4, r5
 8007c0c:	d101      	bne.n	8007c12 <__sfputs_r+0x12>
 8007c0e:	2000      	movs	r0, #0
 8007c10:	e007      	b.n	8007c22 <__sfputs_r+0x22>
 8007c12:	463a      	mov	r2, r7
 8007c14:	4630      	mov	r0, r6
 8007c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c1a:	f7ff ffdc 	bl	8007bd6 <__sfputc_r>
 8007c1e:	1c43      	adds	r3, r0, #1
 8007c20:	d1f3      	bne.n	8007c0a <__sfputs_r+0xa>
 8007c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007c24 <_vfiprintf_r>:
 8007c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c28:	460d      	mov	r5, r1
 8007c2a:	4614      	mov	r4, r2
 8007c2c:	4698      	mov	r8, r3
 8007c2e:	4606      	mov	r6, r0
 8007c30:	b09d      	sub	sp, #116	; 0x74
 8007c32:	b118      	cbz	r0, 8007c3c <_vfiprintf_r+0x18>
 8007c34:	6983      	ldr	r3, [r0, #24]
 8007c36:	b90b      	cbnz	r3, 8007c3c <_vfiprintf_r+0x18>
 8007c38:	f000 fb10 	bl	800825c <__sinit>
 8007c3c:	4b89      	ldr	r3, [pc, #548]	; (8007e64 <_vfiprintf_r+0x240>)
 8007c3e:	429d      	cmp	r5, r3
 8007c40:	d11b      	bne.n	8007c7a <_vfiprintf_r+0x56>
 8007c42:	6875      	ldr	r5, [r6, #4]
 8007c44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c46:	07d9      	lsls	r1, r3, #31
 8007c48:	d405      	bmi.n	8007c56 <_vfiprintf_r+0x32>
 8007c4a:	89ab      	ldrh	r3, [r5, #12]
 8007c4c:	059a      	lsls	r2, r3, #22
 8007c4e:	d402      	bmi.n	8007c56 <_vfiprintf_r+0x32>
 8007c50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c52:	f000 fba1 	bl	8008398 <__retarget_lock_acquire_recursive>
 8007c56:	89ab      	ldrh	r3, [r5, #12]
 8007c58:	071b      	lsls	r3, r3, #28
 8007c5a:	d501      	bpl.n	8007c60 <_vfiprintf_r+0x3c>
 8007c5c:	692b      	ldr	r3, [r5, #16]
 8007c5e:	b9eb      	cbnz	r3, 8007c9c <_vfiprintf_r+0x78>
 8007c60:	4629      	mov	r1, r5
 8007c62:	4630      	mov	r0, r6
 8007c64:	f000 f96e 	bl	8007f44 <__swsetup_r>
 8007c68:	b1c0      	cbz	r0, 8007c9c <_vfiprintf_r+0x78>
 8007c6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c6c:	07dc      	lsls	r4, r3, #31
 8007c6e:	d50e      	bpl.n	8007c8e <_vfiprintf_r+0x6a>
 8007c70:	f04f 30ff 	mov.w	r0, #4294967295
 8007c74:	b01d      	add	sp, #116	; 0x74
 8007c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c7a:	4b7b      	ldr	r3, [pc, #492]	; (8007e68 <_vfiprintf_r+0x244>)
 8007c7c:	429d      	cmp	r5, r3
 8007c7e:	d101      	bne.n	8007c84 <_vfiprintf_r+0x60>
 8007c80:	68b5      	ldr	r5, [r6, #8]
 8007c82:	e7df      	b.n	8007c44 <_vfiprintf_r+0x20>
 8007c84:	4b79      	ldr	r3, [pc, #484]	; (8007e6c <_vfiprintf_r+0x248>)
 8007c86:	429d      	cmp	r5, r3
 8007c88:	bf08      	it	eq
 8007c8a:	68f5      	ldreq	r5, [r6, #12]
 8007c8c:	e7da      	b.n	8007c44 <_vfiprintf_r+0x20>
 8007c8e:	89ab      	ldrh	r3, [r5, #12]
 8007c90:	0598      	lsls	r0, r3, #22
 8007c92:	d4ed      	bmi.n	8007c70 <_vfiprintf_r+0x4c>
 8007c94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c96:	f000 fb80 	bl	800839a <__retarget_lock_release_recursive>
 8007c9a:	e7e9      	b.n	8007c70 <_vfiprintf_r+0x4c>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007ca0:	2320      	movs	r3, #32
 8007ca2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ca6:	2330      	movs	r3, #48	; 0x30
 8007ca8:	f04f 0901 	mov.w	r9, #1
 8007cac:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cb0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007e70 <_vfiprintf_r+0x24c>
 8007cb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cb8:	4623      	mov	r3, r4
 8007cba:	469a      	mov	sl, r3
 8007cbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cc0:	b10a      	cbz	r2, 8007cc6 <_vfiprintf_r+0xa2>
 8007cc2:	2a25      	cmp	r2, #37	; 0x25
 8007cc4:	d1f9      	bne.n	8007cba <_vfiprintf_r+0x96>
 8007cc6:	ebba 0b04 	subs.w	fp, sl, r4
 8007cca:	d00b      	beq.n	8007ce4 <_vfiprintf_r+0xc0>
 8007ccc:	465b      	mov	r3, fp
 8007cce:	4622      	mov	r2, r4
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	f7ff ff94 	bl	8007c00 <__sfputs_r>
 8007cd8:	3001      	adds	r0, #1
 8007cda:	f000 80aa 	beq.w	8007e32 <_vfiprintf_r+0x20e>
 8007cde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ce0:	445a      	add	r2, fp
 8007ce2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f000 80a2 	beq.w	8007e32 <_vfiprintf_r+0x20e>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cf8:	f10a 0a01 	add.w	sl, sl, #1
 8007cfc:	9304      	str	r3, [sp, #16]
 8007cfe:	9307      	str	r3, [sp, #28]
 8007d00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d04:	931a      	str	r3, [sp, #104]	; 0x68
 8007d06:	4654      	mov	r4, sl
 8007d08:	2205      	movs	r2, #5
 8007d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d0e:	4858      	ldr	r0, [pc, #352]	; (8007e70 <_vfiprintf_r+0x24c>)
 8007d10:	f7ff f8d0 	bl	8006eb4 <memchr>
 8007d14:	9a04      	ldr	r2, [sp, #16]
 8007d16:	b9d8      	cbnz	r0, 8007d50 <_vfiprintf_r+0x12c>
 8007d18:	06d1      	lsls	r1, r2, #27
 8007d1a:	bf44      	itt	mi
 8007d1c:	2320      	movmi	r3, #32
 8007d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d22:	0713      	lsls	r3, r2, #28
 8007d24:	bf44      	itt	mi
 8007d26:	232b      	movmi	r3, #43	; 0x2b
 8007d28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d2c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d30:	2b2a      	cmp	r3, #42	; 0x2a
 8007d32:	d015      	beq.n	8007d60 <_vfiprintf_r+0x13c>
 8007d34:	4654      	mov	r4, sl
 8007d36:	2000      	movs	r0, #0
 8007d38:	f04f 0c0a 	mov.w	ip, #10
 8007d3c:	9a07      	ldr	r2, [sp, #28]
 8007d3e:	4621      	mov	r1, r4
 8007d40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d44:	3b30      	subs	r3, #48	; 0x30
 8007d46:	2b09      	cmp	r3, #9
 8007d48:	d94e      	bls.n	8007de8 <_vfiprintf_r+0x1c4>
 8007d4a:	b1b0      	cbz	r0, 8007d7a <_vfiprintf_r+0x156>
 8007d4c:	9207      	str	r2, [sp, #28]
 8007d4e:	e014      	b.n	8007d7a <_vfiprintf_r+0x156>
 8007d50:	eba0 0308 	sub.w	r3, r0, r8
 8007d54:	fa09 f303 	lsl.w	r3, r9, r3
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	46a2      	mov	sl, r4
 8007d5c:	9304      	str	r3, [sp, #16]
 8007d5e:	e7d2      	b.n	8007d06 <_vfiprintf_r+0xe2>
 8007d60:	9b03      	ldr	r3, [sp, #12]
 8007d62:	1d19      	adds	r1, r3, #4
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	9103      	str	r1, [sp, #12]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	bfbb      	ittet	lt
 8007d6c:	425b      	neglt	r3, r3
 8007d6e:	f042 0202 	orrlt.w	r2, r2, #2
 8007d72:	9307      	strge	r3, [sp, #28]
 8007d74:	9307      	strlt	r3, [sp, #28]
 8007d76:	bfb8      	it	lt
 8007d78:	9204      	strlt	r2, [sp, #16]
 8007d7a:	7823      	ldrb	r3, [r4, #0]
 8007d7c:	2b2e      	cmp	r3, #46	; 0x2e
 8007d7e:	d10c      	bne.n	8007d9a <_vfiprintf_r+0x176>
 8007d80:	7863      	ldrb	r3, [r4, #1]
 8007d82:	2b2a      	cmp	r3, #42	; 0x2a
 8007d84:	d135      	bne.n	8007df2 <_vfiprintf_r+0x1ce>
 8007d86:	9b03      	ldr	r3, [sp, #12]
 8007d88:	3402      	adds	r4, #2
 8007d8a:	1d1a      	adds	r2, r3, #4
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	9203      	str	r2, [sp, #12]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	bfb8      	it	lt
 8007d94:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d98:	9305      	str	r3, [sp, #20]
 8007d9a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007e74 <_vfiprintf_r+0x250>
 8007d9e:	2203      	movs	r2, #3
 8007da0:	4650      	mov	r0, sl
 8007da2:	7821      	ldrb	r1, [r4, #0]
 8007da4:	f7ff f886 	bl	8006eb4 <memchr>
 8007da8:	b140      	cbz	r0, 8007dbc <_vfiprintf_r+0x198>
 8007daa:	2340      	movs	r3, #64	; 0x40
 8007dac:	eba0 000a 	sub.w	r0, r0, sl
 8007db0:	fa03 f000 	lsl.w	r0, r3, r0
 8007db4:	9b04      	ldr	r3, [sp, #16]
 8007db6:	3401      	adds	r4, #1
 8007db8:	4303      	orrs	r3, r0
 8007dba:	9304      	str	r3, [sp, #16]
 8007dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dc0:	2206      	movs	r2, #6
 8007dc2:	482d      	ldr	r0, [pc, #180]	; (8007e78 <_vfiprintf_r+0x254>)
 8007dc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007dc8:	f7ff f874 	bl	8006eb4 <memchr>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	d03f      	beq.n	8007e50 <_vfiprintf_r+0x22c>
 8007dd0:	4b2a      	ldr	r3, [pc, #168]	; (8007e7c <_vfiprintf_r+0x258>)
 8007dd2:	bb1b      	cbnz	r3, 8007e1c <_vfiprintf_r+0x1f8>
 8007dd4:	9b03      	ldr	r3, [sp, #12]
 8007dd6:	3307      	adds	r3, #7
 8007dd8:	f023 0307 	bic.w	r3, r3, #7
 8007ddc:	3308      	adds	r3, #8
 8007dde:	9303      	str	r3, [sp, #12]
 8007de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de2:	443b      	add	r3, r7
 8007de4:	9309      	str	r3, [sp, #36]	; 0x24
 8007de6:	e767      	b.n	8007cb8 <_vfiprintf_r+0x94>
 8007de8:	460c      	mov	r4, r1
 8007dea:	2001      	movs	r0, #1
 8007dec:	fb0c 3202 	mla	r2, ip, r2, r3
 8007df0:	e7a5      	b.n	8007d3e <_vfiprintf_r+0x11a>
 8007df2:	2300      	movs	r3, #0
 8007df4:	f04f 0c0a 	mov.w	ip, #10
 8007df8:	4619      	mov	r1, r3
 8007dfa:	3401      	adds	r4, #1
 8007dfc:	9305      	str	r3, [sp, #20]
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e04:	3a30      	subs	r2, #48	; 0x30
 8007e06:	2a09      	cmp	r2, #9
 8007e08:	d903      	bls.n	8007e12 <_vfiprintf_r+0x1ee>
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d0c5      	beq.n	8007d9a <_vfiprintf_r+0x176>
 8007e0e:	9105      	str	r1, [sp, #20]
 8007e10:	e7c3      	b.n	8007d9a <_vfiprintf_r+0x176>
 8007e12:	4604      	mov	r4, r0
 8007e14:	2301      	movs	r3, #1
 8007e16:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e1a:	e7f0      	b.n	8007dfe <_vfiprintf_r+0x1da>
 8007e1c:	ab03      	add	r3, sp, #12
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	462a      	mov	r2, r5
 8007e22:	4630      	mov	r0, r6
 8007e24:	4b16      	ldr	r3, [pc, #88]	; (8007e80 <_vfiprintf_r+0x25c>)
 8007e26:	a904      	add	r1, sp, #16
 8007e28:	f7fd fdc6 	bl	80059b8 <_printf_float>
 8007e2c:	4607      	mov	r7, r0
 8007e2e:	1c78      	adds	r0, r7, #1
 8007e30:	d1d6      	bne.n	8007de0 <_vfiprintf_r+0x1bc>
 8007e32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e34:	07d9      	lsls	r1, r3, #31
 8007e36:	d405      	bmi.n	8007e44 <_vfiprintf_r+0x220>
 8007e38:	89ab      	ldrh	r3, [r5, #12]
 8007e3a:	059a      	lsls	r2, r3, #22
 8007e3c:	d402      	bmi.n	8007e44 <_vfiprintf_r+0x220>
 8007e3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e40:	f000 faab 	bl	800839a <__retarget_lock_release_recursive>
 8007e44:	89ab      	ldrh	r3, [r5, #12]
 8007e46:	065b      	lsls	r3, r3, #25
 8007e48:	f53f af12 	bmi.w	8007c70 <_vfiprintf_r+0x4c>
 8007e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e4e:	e711      	b.n	8007c74 <_vfiprintf_r+0x50>
 8007e50:	ab03      	add	r3, sp, #12
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	462a      	mov	r2, r5
 8007e56:	4630      	mov	r0, r6
 8007e58:	4b09      	ldr	r3, [pc, #36]	; (8007e80 <_vfiprintf_r+0x25c>)
 8007e5a:	a904      	add	r1, sp, #16
 8007e5c:	f7fe f848 	bl	8005ef0 <_printf_i>
 8007e60:	e7e4      	b.n	8007e2c <_vfiprintf_r+0x208>
 8007e62:	bf00      	nop
 8007e64:	08008a9c 	.word	0x08008a9c
 8007e68:	08008abc 	.word	0x08008abc
 8007e6c:	08008a7c 	.word	0x08008a7c
 8007e70:	08008924 	.word	0x08008924
 8007e74:	0800892a 	.word	0x0800892a
 8007e78:	0800892e 	.word	0x0800892e
 8007e7c:	080059b9 	.word	0x080059b9
 8007e80:	08007c01 	.word	0x08007c01

08007e84 <__swbuf_r>:
 8007e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e86:	460e      	mov	r6, r1
 8007e88:	4614      	mov	r4, r2
 8007e8a:	4605      	mov	r5, r0
 8007e8c:	b118      	cbz	r0, 8007e96 <__swbuf_r+0x12>
 8007e8e:	6983      	ldr	r3, [r0, #24]
 8007e90:	b90b      	cbnz	r3, 8007e96 <__swbuf_r+0x12>
 8007e92:	f000 f9e3 	bl	800825c <__sinit>
 8007e96:	4b21      	ldr	r3, [pc, #132]	; (8007f1c <__swbuf_r+0x98>)
 8007e98:	429c      	cmp	r4, r3
 8007e9a:	d12b      	bne.n	8007ef4 <__swbuf_r+0x70>
 8007e9c:	686c      	ldr	r4, [r5, #4]
 8007e9e:	69a3      	ldr	r3, [r4, #24]
 8007ea0:	60a3      	str	r3, [r4, #8]
 8007ea2:	89a3      	ldrh	r3, [r4, #12]
 8007ea4:	071a      	lsls	r2, r3, #28
 8007ea6:	d52f      	bpl.n	8007f08 <__swbuf_r+0x84>
 8007ea8:	6923      	ldr	r3, [r4, #16]
 8007eaa:	b36b      	cbz	r3, 8007f08 <__swbuf_r+0x84>
 8007eac:	6923      	ldr	r3, [r4, #16]
 8007eae:	6820      	ldr	r0, [r4, #0]
 8007eb0:	b2f6      	uxtb	r6, r6
 8007eb2:	1ac0      	subs	r0, r0, r3
 8007eb4:	6963      	ldr	r3, [r4, #20]
 8007eb6:	4637      	mov	r7, r6
 8007eb8:	4283      	cmp	r3, r0
 8007eba:	dc04      	bgt.n	8007ec6 <__swbuf_r+0x42>
 8007ebc:	4621      	mov	r1, r4
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	f000 f938 	bl	8008134 <_fflush_r>
 8007ec4:	bb30      	cbnz	r0, 8007f14 <__swbuf_r+0x90>
 8007ec6:	68a3      	ldr	r3, [r4, #8]
 8007ec8:	3001      	adds	r0, #1
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	60a3      	str	r3, [r4, #8]
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	1c5a      	adds	r2, r3, #1
 8007ed2:	6022      	str	r2, [r4, #0]
 8007ed4:	701e      	strb	r6, [r3, #0]
 8007ed6:	6963      	ldr	r3, [r4, #20]
 8007ed8:	4283      	cmp	r3, r0
 8007eda:	d004      	beq.n	8007ee6 <__swbuf_r+0x62>
 8007edc:	89a3      	ldrh	r3, [r4, #12]
 8007ede:	07db      	lsls	r3, r3, #31
 8007ee0:	d506      	bpl.n	8007ef0 <__swbuf_r+0x6c>
 8007ee2:	2e0a      	cmp	r6, #10
 8007ee4:	d104      	bne.n	8007ef0 <__swbuf_r+0x6c>
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	4628      	mov	r0, r5
 8007eea:	f000 f923 	bl	8008134 <_fflush_r>
 8007eee:	b988      	cbnz	r0, 8007f14 <__swbuf_r+0x90>
 8007ef0:	4638      	mov	r0, r7
 8007ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ef4:	4b0a      	ldr	r3, [pc, #40]	; (8007f20 <__swbuf_r+0x9c>)
 8007ef6:	429c      	cmp	r4, r3
 8007ef8:	d101      	bne.n	8007efe <__swbuf_r+0x7a>
 8007efa:	68ac      	ldr	r4, [r5, #8]
 8007efc:	e7cf      	b.n	8007e9e <__swbuf_r+0x1a>
 8007efe:	4b09      	ldr	r3, [pc, #36]	; (8007f24 <__swbuf_r+0xa0>)
 8007f00:	429c      	cmp	r4, r3
 8007f02:	bf08      	it	eq
 8007f04:	68ec      	ldreq	r4, [r5, #12]
 8007f06:	e7ca      	b.n	8007e9e <__swbuf_r+0x1a>
 8007f08:	4621      	mov	r1, r4
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	f000 f81a 	bl	8007f44 <__swsetup_r>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d0cb      	beq.n	8007eac <__swbuf_r+0x28>
 8007f14:	f04f 37ff 	mov.w	r7, #4294967295
 8007f18:	e7ea      	b.n	8007ef0 <__swbuf_r+0x6c>
 8007f1a:	bf00      	nop
 8007f1c:	08008a9c 	.word	0x08008a9c
 8007f20:	08008abc 	.word	0x08008abc
 8007f24:	08008a7c 	.word	0x08008a7c

08007f28 <__ascii_wctomb>:
 8007f28:	4603      	mov	r3, r0
 8007f2a:	4608      	mov	r0, r1
 8007f2c:	b141      	cbz	r1, 8007f40 <__ascii_wctomb+0x18>
 8007f2e:	2aff      	cmp	r2, #255	; 0xff
 8007f30:	d904      	bls.n	8007f3c <__ascii_wctomb+0x14>
 8007f32:	228a      	movs	r2, #138	; 0x8a
 8007f34:	f04f 30ff 	mov.w	r0, #4294967295
 8007f38:	601a      	str	r2, [r3, #0]
 8007f3a:	4770      	bx	lr
 8007f3c:	2001      	movs	r0, #1
 8007f3e:	700a      	strb	r2, [r1, #0]
 8007f40:	4770      	bx	lr
	...

08007f44 <__swsetup_r>:
 8007f44:	4b32      	ldr	r3, [pc, #200]	; (8008010 <__swsetup_r+0xcc>)
 8007f46:	b570      	push	{r4, r5, r6, lr}
 8007f48:	681d      	ldr	r5, [r3, #0]
 8007f4a:	4606      	mov	r6, r0
 8007f4c:	460c      	mov	r4, r1
 8007f4e:	b125      	cbz	r5, 8007f5a <__swsetup_r+0x16>
 8007f50:	69ab      	ldr	r3, [r5, #24]
 8007f52:	b913      	cbnz	r3, 8007f5a <__swsetup_r+0x16>
 8007f54:	4628      	mov	r0, r5
 8007f56:	f000 f981 	bl	800825c <__sinit>
 8007f5a:	4b2e      	ldr	r3, [pc, #184]	; (8008014 <__swsetup_r+0xd0>)
 8007f5c:	429c      	cmp	r4, r3
 8007f5e:	d10f      	bne.n	8007f80 <__swsetup_r+0x3c>
 8007f60:	686c      	ldr	r4, [r5, #4]
 8007f62:	89a3      	ldrh	r3, [r4, #12]
 8007f64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f68:	0719      	lsls	r1, r3, #28
 8007f6a:	d42c      	bmi.n	8007fc6 <__swsetup_r+0x82>
 8007f6c:	06dd      	lsls	r5, r3, #27
 8007f6e:	d411      	bmi.n	8007f94 <__swsetup_r+0x50>
 8007f70:	2309      	movs	r3, #9
 8007f72:	6033      	str	r3, [r6, #0]
 8007f74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f78:	f04f 30ff 	mov.w	r0, #4294967295
 8007f7c:	81a3      	strh	r3, [r4, #12]
 8007f7e:	e03e      	b.n	8007ffe <__swsetup_r+0xba>
 8007f80:	4b25      	ldr	r3, [pc, #148]	; (8008018 <__swsetup_r+0xd4>)
 8007f82:	429c      	cmp	r4, r3
 8007f84:	d101      	bne.n	8007f8a <__swsetup_r+0x46>
 8007f86:	68ac      	ldr	r4, [r5, #8]
 8007f88:	e7eb      	b.n	8007f62 <__swsetup_r+0x1e>
 8007f8a:	4b24      	ldr	r3, [pc, #144]	; (800801c <__swsetup_r+0xd8>)
 8007f8c:	429c      	cmp	r4, r3
 8007f8e:	bf08      	it	eq
 8007f90:	68ec      	ldreq	r4, [r5, #12]
 8007f92:	e7e6      	b.n	8007f62 <__swsetup_r+0x1e>
 8007f94:	0758      	lsls	r0, r3, #29
 8007f96:	d512      	bpl.n	8007fbe <__swsetup_r+0x7a>
 8007f98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f9a:	b141      	cbz	r1, 8007fae <__swsetup_r+0x6a>
 8007f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fa0:	4299      	cmp	r1, r3
 8007fa2:	d002      	beq.n	8007faa <__swsetup_r+0x66>
 8007fa4:	4630      	mov	r0, r6
 8007fa6:	f7ff fb37 	bl	8007618 <_free_r>
 8007faa:	2300      	movs	r3, #0
 8007fac:	6363      	str	r3, [r4, #52]	; 0x34
 8007fae:	89a3      	ldrh	r3, [r4, #12]
 8007fb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007fb4:	81a3      	strh	r3, [r4, #12]
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	6063      	str	r3, [r4, #4]
 8007fba:	6923      	ldr	r3, [r4, #16]
 8007fbc:	6023      	str	r3, [r4, #0]
 8007fbe:	89a3      	ldrh	r3, [r4, #12]
 8007fc0:	f043 0308 	orr.w	r3, r3, #8
 8007fc4:	81a3      	strh	r3, [r4, #12]
 8007fc6:	6923      	ldr	r3, [r4, #16]
 8007fc8:	b94b      	cbnz	r3, 8007fde <__swsetup_r+0x9a>
 8007fca:	89a3      	ldrh	r3, [r4, #12]
 8007fcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fd4:	d003      	beq.n	8007fde <__swsetup_r+0x9a>
 8007fd6:	4621      	mov	r1, r4
 8007fd8:	4630      	mov	r0, r6
 8007fda:	f000 fa05 	bl	80083e8 <__smakebuf_r>
 8007fde:	89a0      	ldrh	r0, [r4, #12]
 8007fe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fe4:	f010 0301 	ands.w	r3, r0, #1
 8007fe8:	d00a      	beq.n	8008000 <__swsetup_r+0xbc>
 8007fea:	2300      	movs	r3, #0
 8007fec:	60a3      	str	r3, [r4, #8]
 8007fee:	6963      	ldr	r3, [r4, #20]
 8007ff0:	425b      	negs	r3, r3
 8007ff2:	61a3      	str	r3, [r4, #24]
 8007ff4:	6923      	ldr	r3, [r4, #16]
 8007ff6:	b943      	cbnz	r3, 800800a <__swsetup_r+0xc6>
 8007ff8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ffc:	d1ba      	bne.n	8007f74 <__swsetup_r+0x30>
 8007ffe:	bd70      	pop	{r4, r5, r6, pc}
 8008000:	0781      	lsls	r1, r0, #30
 8008002:	bf58      	it	pl
 8008004:	6963      	ldrpl	r3, [r4, #20]
 8008006:	60a3      	str	r3, [r4, #8]
 8008008:	e7f4      	b.n	8007ff4 <__swsetup_r+0xb0>
 800800a:	2000      	movs	r0, #0
 800800c:	e7f7      	b.n	8007ffe <__swsetup_r+0xba>
 800800e:	bf00      	nop
 8008010:	2000001c 	.word	0x2000001c
 8008014:	08008a9c 	.word	0x08008a9c
 8008018:	08008abc 	.word	0x08008abc
 800801c:	08008a7c 	.word	0x08008a7c

08008020 <abort>:
 8008020:	2006      	movs	r0, #6
 8008022:	b508      	push	{r3, lr}
 8008024:	f000 fa50 	bl	80084c8 <raise>
 8008028:	2001      	movs	r0, #1
 800802a:	f7f9 ff82 	bl	8001f32 <_exit>
	...

08008030 <__sflush_r>:
 8008030:	898a      	ldrh	r2, [r1, #12]
 8008032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008034:	4605      	mov	r5, r0
 8008036:	0710      	lsls	r0, r2, #28
 8008038:	460c      	mov	r4, r1
 800803a:	d457      	bmi.n	80080ec <__sflush_r+0xbc>
 800803c:	684b      	ldr	r3, [r1, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	dc04      	bgt.n	800804c <__sflush_r+0x1c>
 8008042:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008044:	2b00      	cmp	r3, #0
 8008046:	dc01      	bgt.n	800804c <__sflush_r+0x1c>
 8008048:	2000      	movs	r0, #0
 800804a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800804c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800804e:	2e00      	cmp	r6, #0
 8008050:	d0fa      	beq.n	8008048 <__sflush_r+0x18>
 8008052:	2300      	movs	r3, #0
 8008054:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008058:	682f      	ldr	r7, [r5, #0]
 800805a:	602b      	str	r3, [r5, #0]
 800805c:	d032      	beq.n	80080c4 <__sflush_r+0x94>
 800805e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008060:	89a3      	ldrh	r3, [r4, #12]
 8008062:	075a      	lsls	r2, r3, #29
 8008064:	d505      	bpl.n	8008072 <__sflush_r+0x42>
 8008066:	6863      	ldr	r3, [r4, #4]
 8008068:	1ac0      	subs	r0, r0, r3
 800806a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800806c:	b10b      	cbz	r3, 8008072 <__sflush_r+0x42>
 800806e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008070:	1ac0      	subs	r0, r0, r3
 8008072:	2300      	movs	r3, #0
 8008074:	4602      	mov	r2, r0
 8008076:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008078:	4628      	mov	r0, r5
 800807a:	6a21      	ldr	r1, [r4, #32]
 800807c:	47b0      	blx	r6
 800807e:	1c43      	adds	r3, r0, #1
 8008080:	89a3      	ldrh	r3, [r4, #12]
 8008082:	d106      	bne.n	8008092 <__sflush_r+0x62>
 8008084:	6829      	ldr	r1, [r5, #0]
 8008086:	291d      	cmp	r1, #29
 8008088:	d82c      	bhi.n	80080e4 <__sflush_r+0xb4>
 800808a:	4a29      	ldr	r2, [pc, #164]	; (8008130 <__sflush_r+0x100>)
 800808c:	40ca      	lsrs	r2, r1
 800808e:	07d6      	lsls	r6, r2, #31
 8008090:	d528      	bpl.n	80080e4 <__sflush_r+0xb4>
 8008092:	2200      	movs	r2, #0
 8008094:	6062      	str	r2, [r4, #4]
 8008096:	6922      	ldr	r2, [r4, #16]
 8008098:	04d9      	lsls	r1, r3, #19
 800809a:	6022      	str	r2, [r4, #0]
 800809c:	d504      	bpl.n	80080a8 <__sflush_r+0x78>
 800809e:	1c42      	adds	r2, r0, #1
 80080a0:	d101      	bne.n	80080a6 <__sflush_r+0x76>
 80080a2:	682b      	ldr	r3, [r5, #0]
 80080a4:	b903      	cbnz	r3, 80080a8 <__sflush_r+0x78>
 80080a6:	6560      	str	r0, [r4, #84]	; 0x54
 80080a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080aa:	602f      	str	r7, [r5, #0]
 80080ac:	2900      	cmp	r1, #0
 80080ae:	d0cb      	beq.n	8008048 <__sflush_r+0x18>
 80080b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080b4:	4299      	cmp	r1, r3
 80080b6:	d002      	beq.n	80080be <__sflush_r+0x8e>
 80080b8:	4628      	mov	r0, r5
 80080ba:	f7ff faad 	bl	8007618 <_free_r>
 80080be:	2000      	movs	r0, #0
 80080c0:	6360      	str	r0, [r4, #52]	; 0x34
 80080c2:	e7c2      	b.n	800804a <__sflush_r+0x1a>
 80080c4:	6a21      	ldr	r1, [r4, #32]
 80080c6:	2301      	movs	r3, #1
 80080c8:	4628      	mov	r0, r5
 80080ca:	47b0      	blx	r6
 80080cc:	1c41      	adds	r1, r0, #1
 80080ce:	d1c7      	bne.n	8008060 <__sflush_r+0x30>
 80080d0:	682b      	ldr	r3, [r5, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d0c4      	beq.n	8008060 <__sflush_r+0x30>
 80080d6:	2b1d      	cmp	r3, #29
 80080d8:	d001      	beq.n	80080de <__sflush_r+0xae>
 80080da:	2b16      	cmp	r3, #22
 80080dc:	d101      	bne.n	80080e2 <__sflush_r+0xb2>
 80080de:	602f      	str	r7, [r5, #0]
 80080e0:	e7b2      	b.n	8008048 <__sflush_r+0x18>
 80080e2:	89a3      	ldrh	r3, [r4, #12]
 80080e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080e8:	81a3      	strh	r3, [r4, #12]
 80080ea:	e7ae      	b.n	800804a <__sflush_r+0x1a>
 80080ec:	690f      	ldr	r7, [r1, #16]
 80080ee:	2f00      	cmp	r7, #0
 80080f0:	d0aa      	beq.n	8008048 <__sflush_r+0x18>
 80080f2:	0793      	lsls	r3, r2, #30
 80080f4:	bf18      	it	ne
 80080f6:	2300      	movne	r3, #0
 80080f8:	680e      	ldr	r6, [r1, #0]
 80080fa:	bf08      	it	eq
 80080fc:	694b      	ldreq	r3, [r1, #20]
 80080fe:	1bf6      	subs	r6, r6, r7
 8008100:	600f      	str	r7, [r1, #0]
 8008102:	608b      	str	r3, [r1, #8]
 8008104:	2e00      	cmp	r6, #0
 8008106:	dd9f      	ble.n	8008048 <__sflush_r+0x18>
 8008108:	4633      	mov	r3, r6
 800810a:	463a      	mov	r2, r7
 800810c:	4628      	mov	r0, r5
 800810e:	6a21      	ldr	r1, [r4, #32]
 8008110:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008114:	47e0      	blx	ip
 8008116:	2800      	cmp	r0, #0
 8008118:	dc06      	bgt.n	8008128 <__sflush_r+0xf8>
 800811a:	89a3      	ldrh	r3, [r4, #12]
 800811c:	f04f 30ff 	mov.w	r0, #4294967295
 8008120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008124:	81a3      	strh	r3, [r4, #12]
 8008126:	e790      	b.n	800804a <__sflush_r+0x1a>
 8008128:	4407      	add	r7, r0
 800812a:	1a36      	subs	r6, r6, r0
 800812c:	e7ea      	b.n	8008104 <__sflush_r+0xd4>
 800812e:	bf00      	nop
 8008130:	20400001 	.word	0x20400001

08008134 <_fflush_r>:
 8008134:	b538      	push	{r3, r4, r5, lr}
 8008136:	690b      	ldr	r3, [r1, #16]
 8008138:	4605      	mov	r5, r0
 800813a:	460c      	mov	r4, r1
 800813c:	b913      	cbnz	r3, 8008144 <_fflush_r+0x10>
 800813e:	2500      	movs	r5, #0
 8008140:	4628      	mov	r0, r5
 8008142:	bd38      	pop	{r3, r4, r5, pc}
 8008144:	b118      	cbz	r0, 800814e <_fflush_r+0x1a>
 8008146:	6983      	ldr	r3, [r0, #24]
 8008148:	b90b      	cbnz	r3, 800814e <_fflush_r+0x1a>
 800814a:	f000 f887 	bl	800825c <__sinit>
 800814e:	4b14      	ldr	r3, [pc, #80]	; (80081a0 <_fflush_r+0x6c>)
 8008150:	429c      	cmp	r4, r3
 8008152:	d11b      	bne.n	800818c <_fflush_r+0x58>
 8008154:	686c      	ldr	r4, [r5, #4]
 8008156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0ef      	beq.n	800813e <_fflush_r+0xa>
 800815e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008160:	07d0      	lsls	r0, r2, #31
 8008162:	d404      	bmi.n	800816e <_fflush_r+0x3a>
 8008164:	0599      	lsls	r1, r3, #22
 8008166:	d402      	bmi.n	800816e <_fflush_r+0x3a>
 8008168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800816a:	f000 f915 	bl	8008398 <__retarget_lock_acquire_recursive>
 800816e:	4628      	mov	r0, r5
 8008170:	4621      	mov	r1, r4
 8008172:	f7ff ff5d 	bl	8008030 <__sflush_r>
 8008176:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008178:	4605      	mov	r5, r0
 800817a:	07da      	lsls	r2, r3, #31
 800817c:	d4e0      	bmi.n	8008140 <_fflush_r+0xc>
 800817e:	89a3      	ldrh	r3, [r4, #12]
 8008180:	059b      	lsls	r3, r3, #22
 8008182:	d4dd      	bmi.n	8008140 <_fflush_r+0xc>
 8008184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008186:	f000 f908 	bl	800839a <__retarget_lock_release_recursive>
 800818a:	e7d9      	b.n	8008140 <_fflush_r+0xc>
 800818c:	4b05      	ldr	r3, [pc, #20]	; (80081a4 <_fflush_r+0x70>)
 800818e:	429c      	cmp	r4, r3
 8008190:	d101      	bne.n	8008196 <_fflush_r+0x62>
 8008192:	68ac      	ldr	r4, [r5, #8]
 8008194:	e7df      	b.n	8008156 <_fflush_r+0x22>
 8008196:	4b04      	ldr	r3, [pc, #16]	; (80081a8 <_fflush_r+0x74>)
 8008198:	429c      	cmp	r4, r3
 800819a:	bf08      	it	eq
 800819c:	68ec      	ldreq	r4, [r5, #12]
 800819e:	e7da      	b.n	8008156 <_fflush_r+0x22>
 80081a0:	08008a9c 	.word	0x08008a9c
 80081a4:	08008abc 	.word	0x08008abc
 80081a8:	08008a7c 	.word	0x08008a7c

080081ac <std>:
 80081ac:	2300      	movs	r3, #0
 80081ae:	b510      	push	{r4, lr}
 80081b0:	4604      	mov	r4, r0
 80081b2:	e9c0 3300 	strd	r3, r3, [r0]
 80081b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081ba:	6083      	str	r3, [r0, #8]
 80081bc:	8181      	strh	r1, [r0, #12]
 80081be:	6643      	str	r3, [r0, #100]	; 0x64
 80081c0:	81c2      	strh	r2, [r0, #14]
 80081c2:	6183      	str	r3, [r0, #24]
 80081c4:	4619      	mov	r1, r3
 80081c6:	2208      	movs	r2, #8
 80081c8:	305c      	adds	r0, #92	; 0x5c
 80081ca:	f7fd fb4f 	bl	800586c <memset>
 80081ce:	4b05      	ldr	r3, [pc, #20]	; (80081e4 <std+0x38>)
 80081d0:	6224      	str	r4, [r4, #32]
 80081d2:	6263      	str	r3, [r4, #36]	; 0x24
 80081d4:	4b04      	ldr	r3, [pc, #16]	; (80081e8 <std+0x3c>)
 80081d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80081d8:	4b04      	ldr	r3, [pc, #16]	; (80081ec <std+0x40>)
 80081da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081dc:	4b04      	ldr	r3, [pc, #16]	; (80081f0 <std+0x44>)
 80081de:	6323      	str	r3, [r4, #48]	; 0x30
 80081e0:	bd10      	pop	{r4, pc}
 80081e2:	bf00      	nop
 80081e4:	08008501 	.word	0x08008501
 80081e8:	08008523 	.word	0x08008523
 80081ec:	0800855b 	.word	0x0800855b
 80081f0:	0800857f 	.word	0x0800857f

080081f4 <_cleanup_r>:
 80081f4:	4901      	ldr	r1, [pc, #4]	; (80081fc <_cleanup_r+0x8>)
 80081f6:	f000 b8af 	b.w	8008358 <_fwalk_reent>
 80081fa:	bf00      	nop
 80081fc:	08008135 	.word	0x08008135

08008200 <__sfmoreglue>:
 8008200:	2268      	movs	r2, #104	; 0x68
 8008202:	b570      	push	{r4, r5, r6, lr}
 8008204:	1e4d      	subs	r5, r1, #1
 8008206:	4355      	muls	r5, r2
 8008208:	460e      	mov	r6, r1
 800820a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800820e:	f7ff fa6b 	bl	80076e8 <_malloc_r>
 8008212:	4604      	mov	r4, r0
 8008214:	b140      	cbz	r0, 8008228 <__sfmoreglue+0x28>
 8008216:	2100      	movs	r1, #0
 8008218:	e9c0 1600 	strd	r1, r6, [r0]
 800821c:	300c      	adds	r0, #12
 800821e:	60a0      	str	r0, [r4, #8]
 8008220:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008224:	f7fd fb22 	bl	800586c <memset>
 8008228:	4620      	mov	r0, r4
 800822a:	bd70      	pop	{r4, r5, r6, pc}

0800822c <__sfp_lock_acquire>:
 800822c:	4801      	ldr	r0, [pc, #4]	; (8008234 <__sfp_lock_acquire+0x8>)
 800822e:	f000 b8b3 	b.w	8008398 <__retarget_lock_acquire_recursive>
 8008232:	bf00      	nop
 8008234:	20000431 	.word	0x20000431

08008238 <__sfp_lock_release>:
 8008238:	4801      	ldr	r0, [pc, #4]	; (8008240 <__sfp_lock_release+0x8>)
 800823a:	f000 b8ae 	b.w	800839a <__retarget_lock_release_recursive>
 800823e:	bf00      	nop
 8008240:	20000431 	.word	0x20000431

08008244 <__sinit_lock_acquire>:
 8008244:	4801      	ldr	r0, [pc, #4]	; (800824c <__sinit_lock_acquire+0x8>)
 8008246:	f000 b8a7 	b.w	8008398 <__retarget_lock_acquire_recursive>
 800824a:	bf00      	nop
 800824c:	20000432 	.word	0x20000432

08008250 <__sinit_lock_release>:
 8008250:	4801      	ldr	r0, [pc, #4]	; (8008258 <__sinit_lock_release+0x8>)
 8008252:	f000 b8a2 	b.w	800839a <__retarget_lock_release_recursive>
 8008256:	bf00      	nop
 8008258:	20000432 	.word	0x20000432

0800825c <__sinit>:
 800825c:	b510      	push	{r4, lr}
 800825e:	4604      	mov	r4, r0
 8008260:	f7ff fff0 	bl	8008244 <__sinit_lock_acquire>
 8008264:	69a3      	ldr	r3, [r4, #24]
 8008266:	b11b      	cbz	r3, 8008270 <__sinit+0x14>
 8008268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800826c:	f7ff bff0 	b.w	8008250 <__sinit_lock_release>
 8008270:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008274:	6523      	str	r3, [r4, #80]	; 0x50
 8008276:	4b13      	ldr	r3, [pc, #76]	; (80082c4 <__sinit+0x68>)
 8008278:	4a13      	ldr	r2, [pc, #76]	; (80082c8 <__sinit+0x6c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	62a2      	str	r2, [r4, #40]	; 0x28
 800827e:	42a3      	cmp	r3, r4
 8008280:	bf08      	it	eq
 8008282:	2301      	moveq	r3, #1
 8008284:	4620      	mov	r0, r4
 8008286:	bf08      	it	eq
 8008288:	61a3      	streq	r3, [r4, #24]
 800828a:	f000 f81f 	bl	80082cc <__sfp>
 800828e:	6060      	str	r0, [r4, #4]
 8008290:	4620      	mov	r0, r4
 8008292:	f000 f81b 	bl	80082cc <__sfp>
 8008296:	60a0      	str	r0, [r4, #8]
 8008298:	4620      	mov	r0, r4
 800829a:	f000 f817 	bl	80082cc <__sfp>
 800829e:	2200      	movs	r2, #0
 80082a0:	2104      	movs	r1, #4
 80082a2:	60e0      	str	r0, [r4, #12]
 80082a4:	6860      	ldr	r0, [r4, #4]
 80082a6:	f7ff ff81 	bl	80081ac <std>
 80082aa:	2201      	movs	r2, #1
 80082ac:	2109      	movs	r1, #9
 80082ae:	68a0      	ldr	r0, [r4, #8]
 80082b0:	f7ff ff7c 	bl	80081ac <std>
 80082b4:	2202      	movs	r2, #2
 80082b6:	2112      	movs	r1, #18
 80082b8:	68e0      	ldr	r0, [r4, #12]
 80082ba:	f7ff ff77 	bl	80081ac <std>
 80082be:	2301      	movs	r3, #1
 80082c0:	61a3      	str	r3, [r4, #24]
 80082c2:	e7d1      	b.n	8008268 <__sinit+0xc>
 80082c4:	08008704 	.word	0x08008704
 80082c8:	080081f5 	.word	0x080081f5

080082cc <__sfp>:
 80082cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ce:	4607      	mov	r7, r0
 80082d0:	f7ff ffac 	bl	800822c <__sfp_lock_acquire>
 80082d4:	4b1e      	ldr	r3, [pc, #120]	; (8008350 <__sfp+0x84>)
 80082d6:	681e      	ldr	r6, [r3, #0]
 80082d8:	69b3      	ldr	r3, [r6, #24]
 80082da:	b913      	cbnz	r3, 80082e2 <__sfp+0x16>
 80082dc:	4630      	mov	r0, r6
 80082de:	f7ff ffbd 	bl	800825c <__sinit>
 80082e2:	3648      	adds	r6, #72	; 0x48
 80082e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80082e8:	3b01      	subs	r3, #1
 80082ea:	d503      	bpl.n	80082f4 <__sfp+0x28>
 80082ec:	6833      	ldr	r3, [r6, #0]
 80082ee:	b30b      	cbz	r3, 8008334 <__sfp+0x68>
 80082f0:	6836      	ldr	r6, [r6, #0]
 80082f2:	e7f7      	b.n	80082e4 <__sfp+0x18>
 80082f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80082f8:	b9d5      	cbnz	r5, 8008330 <__sfp+0x64>
 80082fa:	4b16      	ldr	r3, [pc, #88]	; (8008354 <__sfp+0x88>)
 80082fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008300:	60e3      	str	r3, [r4, #12]
 8008302:	6665      	str	r5, [r4, #100]	; 0x64
 8008304:	f000 f847 	bl	8008396 <__retarget_lock_init_recursive>
 8008308:	f7ff ff96 	bl	8008238 <__sfp_lock_release>
 800830c:	2208      	movs	r2, #8
 800830e:	4629      	mov	r1, r5
 8008310:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008314:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008318:	6025      	str	r5, [r4, #0]
 800831a:	61a5      	str	r5, [r4, #24]
 800831c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008320:	f7fd faa4 	bl	800586c <memset>
 8008324:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008328:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800832c:	4620      	mov	r0, r4
 800832e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008330:	3468      	adds	r4, #104	; 0x68
 8008332:	e7d9      	b.n	80082e8 <__sfp+0x1c>
 8008334:	2104      	movs	r1, #4
 8008336:	4638      	mov	r0, r7
 8008338:	f7ff ff62 	bl	8008200 <__sfmoreglue>
 800833c:	4604      	mov	r4, r0
 800833e:	6030      	str	r0, [r6, #0]
 8008340:	2800      	cmp	r0, #0
 8008342:	d1d5      	bne.n	80082f0 <__sfp+0x24>
 8008344:	f7ff ff78 	bl	8008238 <__sfp_lock_release>
 8008348:	230c      	movs	r3, #12
 800834a:	603b      	str	r3, [r7, #0]
 800834c:	e7ee      	b.n	800832c <__sfp+0x60>
 800834e:	bf00      	nop
 8008350:	08008704 	.word	0x08008704
 8008354:	ffff0001 	.word	0xffff0001

08008358 <_fwalk_reent>:
 8008358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800835c:	4606      	mov	r6, r0
 800835e:	4688      	mov	r8, r1
 8008360:	2700      	movs	r7, #0
 8008362:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008366:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800836a:	f1b9 0901 	subs.w	r9, r9, #1
 800836e:	d505      	bpl.n	800837c <_fwalk_reent+0x24>
 8008370:	6824      	ldr	r4, [r4, #0]
 8008372:	2c00      	cmp	r4, #0
 8008374:	d1f7      	bne.n	8008366 <_fwalk_reent+0xe>
 8008376:	4638      	mov	r0, r7
 8008378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800837c:	89ab      	ldrh	r3, [r5, #12]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d907      	bls.n	8008392 <_fwalk_reent+0x3a>
 8008382:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008386:	3301      	adds	r3, #1
 8008388:	d003      	beq.n	8008392 <_fwalk_reent+0x3a>
 800838a:	4629      	mov	r1, r5
 800838c:	4630      	mov	r0, r6
 800838e:	47c0      	blx	r8
 8008390:	4307      	orrs	r7, r0
 8008392:	3568      	adds	r5, #104	; 0x68
 8008394:	e7e9      	b.n	800836a <_fwalk_reent+0x12>

08008396 <__retarget_lock_init_recursive>:
 8008396:	4770      	bx	lr

08008398 <__retarget_lock_acquire_recursive>:
 8008398:	4770      	bx	lr

0800839a <__retarget_lock_release_recursive>:
 800839a:	4770      	bx	lr

0800839c <__swhatbuf_r>:
 800839c:	b570      	push	{r4, r5, r6, lr}
 800839e:	460e      	mov	r6, r1
 80083a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a4:	4614      	mov	r4, r2
 80083a6:	2900      	cmp	r1, #0
 80083a8:	461d      	mov	r5, r3
 80083aa:	b096      	sub	sp, #88	; 0x58
 80083ac:	da08      	bge.n	80083c0 <__swhatbuf_r+0x24>
 80083ae:	2200      	movs	r2, #0
 80083b0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80083b4:	602a      	str	r2, [r5, #0]
 80083b6:	061a      	lsls	r2, r3, #24
 80083b8:	d410      	bmi.n	80083dc <__swhatbuf_r+0x40>
 80083ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083be:	e00e      	b.n	80083de <__swhatbuf_r+0x42>
 80083c0:	466a      	mov	r2, sp
 80083c2:	f000 f903 	bl	80085cc <_fstat_r>
 80083c6:	2800      	cmp	r0, #0
 80083c8:	dbf1      	blt.n	80083ae <__swhatbuf_r+0x12>
 80083ca:	9a01      	ldr	r2, [sp, #4]
 80083cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80083d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80083d4:	425a      	negs	r2, r3
 80083d6:	415a      	adcs	r2, r3
 80083d8:	602a      	str	r2, [r5, #0]
 80083da:	e7ee      	b.n	80083ba <__swhatbuf_r+0x1e>
 80083dc:	2340      	movs	r3, #64	; 0x40
 80083de:	2000      	movs	r0, #0
 80083e0:	6023      	str	r3, [r4, #0]
 80083e2:	b016      	add	sp, #88	; 0x58
 80083e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080083e8 <__smakebuf_r>:
 80083e8:	898b      	ldrh	r3, [r1, #12]
 80083ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083ec:	079d      	lsls	r5, r3, #30
 80083ee:	4606      	mov	r6, r0
 80083f0:	460c      	mov	r4, r1
 80083f2:	d507      	bpl.n	8008404 <__smakebuf_r+0x1c>
 80083f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083f8:	6023      	str	r3, [r4, #0]
 80083fa:	6123      	str	r3, [r4, #16]
 80083fc:	2301      	movs	r3, #1
 80083fe:	6163      	str	r3, [r4, #20]
 8008400:	b002      	add	sp, #8
 8008402:	bd70      	pop	{r4, r5, r6, pc}
 8008404:	466a      	mov	r2, sp
 8008406:	ab01      	add	r3, sp, #4
 8008408:	f7ff ffc8 	bl	800839c <__swhatbuf_r>
 800840c:	9900      	ldr	r1, [sp, #0]
 800840e:	4605      	mov	r5, r0
 8008410:	4630      	mov	r0, r6
 8008412:	f7ff f969 	bl	80076e8 <_malloc_r>
 8008416:	b948      	cbnz	r0, 800842c <__smakebuf_r+0x44>
 8008418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800841c:	059a      	lsls	r2, r3, #22
 800841e:	d4ef      	bmi.n	8008400 <__smakebuf_r+0x18>
 8008420:	f023 0303 	bic.w	r3, r3, #3
 8008424:	f043 0302 	orr.w	r3, r3, #2
 8008428:	81a3      	strh	r3, [r4, #12]
 800842a:	e7e3      	b.n	80083f4 <__smakebuf_r+0xc>
 800842c:	4b0d      	ldr	r3, [pc, #52]	; (8008464 <__smakebuf_r+0x7c>)
 800842e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008430:	89a3      	ldrh	r3, [r4, #12]
 8008432:	6020      	str	r0, [r4, #0]
 8008434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008438:	81a3      	strh	r3, [r4, #12]
 800843a:	9b00      	ldr	r3, [sp, #0]
 800843c:	6120      	str	r0, [r4, #16]
 800843e:	6163      	str	r3, [r4, #20]
 8008440:	9b01      	ldr	r3, [sp, #4]
 8008442:	b15b      	cbz	r3, 800845c <__smakebuf_r+0x74>
 8008444:	4630      	mov	r0, r6
 8008446:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800844a:	f000 f8d1 	bl	80085f0 <_isatty_r>
 800844e:	b128      	cbz	r0, 800845c <__smakebuf_r+0x74>
 8008450:	89a3      	ldrh	r3, [r4, #12]
 8008452:	f023 0303 	bic.w	r3, r3, #3
 8008456:	f043 0301 	orr.w	r3, r3, #1
 800845a:	81a3      	strh	r3, [r4, #12]
 800845c:	89a0      	ldrh	r0, [r4, #12]
 800845e:	4305      	orrs	r5, r0
 8008460:	81a5      	strh	r5, [r4, #12]
 8008462:	e7cd      	b.n	8008400 <__smakebuf_r+0x18>
 8008464:	080081f5 	.word	0x080081f5

08008468 <_malloc_usable_size_r>:
 8008468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800846c:	1f18      	subs	r0, r3, #4
 800846e:	2b00      	cmp	r3, #0
 8008470:	bfbc      	itt	lt
 8008472:	580b      	ldrlt	r3, [r1, r0]
 8008474:	18c0      	addlt	r0, r0, r3
 8008476:	4770      	bx	lr

08008478 <_raise_r>:
 8008478:	291f      	cmp	r1, #31
 800847a:	b538      	push	{r3, r4, r5, lr}
 800847c:	4604      	mov	r4, r0
 800847e:	460d      	mov	r5, r1
 8008480:	d904      	bls.n	800848c <_raise_r+0x14>
 8008482:	2316      	movs	r3, #22
 8008484:	6003      	str	r3, [r0, #0]
 8008486:	f04f 30ff 	mov.w	r0, #4294967295
 800848a:	bd38      	pop	{r3, r4, r5, pc}
 800848c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800848e:	b112      	cbz	r2, 8008496 <_raise_r+0x1e>
 8008490:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008494:	b94b      	cbnz	r3, 80084aa <_raise_r+0x32>
 8008496:	4620      	mov	r0, r4
 8008498:	f000 f830 	bl	80084fc <_getpid_r>
 800849c:	462a      	mov	r2, r5
 800849e:	4601      	mov	r1, r0
 80084a0:	4620      	mov	r0, r4
 80084a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084a6:	f000 b817 	b.w	80084d8 <_kill_r>
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d00a      	beq.n	80084c4 <_raise_r+0x4c>
 80084ae:	1c59      	adds	r1, r3, #1
 80084b0:	d103      	bne.n	80084ba <_raise_r+0x42>
 80084b2:	2316      	movs	r3, #22
 80084b4:	6003      	str	r3, [r0, #0]
 80084b6:	2001      	movs	r0, #1
 80084b8:	e7e7      	b.n	800848a <_raise_r+0x12>
 80084ba:	2400      	movs	r4, #0
 80084bc:	4628      	mov	r0, r5
 80084be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80084c2:	4798      	blx	r3
 80084c4:	2000      	movs	r0, #0
 80084c6:	e7e0      	b.n	800848a <_raise_r+0x12>

080084c8 <raise>:
 80084c8:	4b02      	ldr	r3, [pc, #8]	; (80084d4 <raise+0xc>)
 80084ca:	4601      	mov	r1, r0
 80084cc:	6818      	ldr	r0, [r3, #0]
 80084ce:	f7ff bfd3 	b.w	8008478 <_raise_r>
 80084d2:	bf00      	nop
 80084d4:	2000001c 	.word	0x2000001c

080084d8 <_kill_r>:
 80084d8:	b538      	push	{r3, r4, r5, lr}
 80084da:	2300      	movs	r3, #0
 80084dc:	4d06      	ldr	r5, [pc, #24]	; (80084f8 <_kill_r+0x20>)
 80084de:	4604      	mov	r4, r0
 80084e0:	4608      	mov	r0, r1
 80084e2:	4611      	mov	r1, r2
 80084e4:	602b      	str	r3, [r5, #0]
 80084e6:	f7f9 fd14 	bl	8001f12 <_kill>
 80084ea:	1c43      	adds	r3, r0, #1
 80084ec:	d102      	bne.n	80084f4 <_kill_r+0x1c>
 80084ee:	682b      	ldr	r3, [r5, #0]
 80084f0:	b103      	cbz	r3, 80084f4 <_kill_r+0x1c>
 80084f2:	6023      	str	r3, [r4, #0]
 80084f4:	bd38      	pop	{r3, r4, r5, pc}
 80084f6:	bf00      	nop
 80084f8:	2000042c 	.word	0x2000042c

080084fc <_getpid_r>:
 80084fc:	f7f9 bd02 	b.w	8001f04 <_getpid>

08008500 <__sread>:
 8008500:	b510      	push	{r4, lr}
 8008502:	460c      	mov	r4, r1
 8008504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008508:	f000 f894 	bl	8008634 <_read_r>
 800850c:	2800      	cmp	r0, #0
 800850e:	bfab      	itete	ge
 8008510:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008512:	89a3      	ldrhlt	r3, [r4, #12]
 8008514:	181b      	addge	r3, r3, r0
 8008516:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800851a:	bfac      	ite	ge
 800851c:	6563      	strge	r3, [r4, #84]	; 0x54
 800851e:	81a3      	strhlt	r3, [r4, #12]
 8008520:	bd10      	pop	{r4, pc}

08008522 <__swrite>:
 8008522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008526:	461f      	mov	r7, r3
 8008528:	898b      	ldrh	r3, [r1, #12]
 800852a:	4605      	mov	r5, r0
 800852c:	05db      	lsls	r3, r3, #23
 800852e:	460c      	mov	r4, r1
 8008530:	4616      	mov	r6, r2
 8008532:	d505      	bpl.n	8008540 <__swrite+0x1e>
 8008534:	2302      	movs	r3, #2
 8008536:	2200      	movs	r2, #0
 8008538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800853c:	f000 f868 	bl	8008610 <_lseek_r>
 8008540:	89a3      	ldrh	r3, [r4, #12]
 8008542:	4632      	mov	r2, r6
 8008544:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008548:	81a3      	strh	r3, [r4, #12]
 800854a:	4628      	mov	r0, r5
 800854c:	463b      	mov	r3, r7
 800854e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008556:	f000 b817 	b.w	8008588 <_write_r>

0800855a <__sseek>:
 800855a:	b510      	push	{r4, lr}
 800855c:	460c      	mov	r4, r1
 800855e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008562:	f000 f855 	bl	8008610 <_lseek_r>
 8008566:	1c43      	adds	r3, r0, #1
 8008568:	89a3      	ldrh	r3, [r4, #12]
 800856a:	bf15      	itete	ne
 800856c:	6560      	strne	r0, [r4, #84]	; 0x54
 800856e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008572:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008576:	81a3      	strheq	r3, [r4, #12]
 8008578:	bf18      	it	ne
 800857a:	81a3      	strhne	r3, [r4, #12]
 800857c:	bd10      	pop	{r4, pc}

0800857e <__sclose>:
 800857e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008582:	f000 b813 	b.w	80085ac <_close_r>
	...

08008588 <_write_r>:
 8008588:	b538      	push	{r3, r4, r5, lr}
 800858a:	4604      	mov	r4, r0
 800858c:	4608      	mov	r0, r1
 800858e:	4611      	mov	r1, r2
 8008590:	2200      	movs	r2, #0
 8008592:	4d05      	ldr	r5, [pc, #20]	; (80085a8 <_write_r+0x20>)
 8008594:	602a      	str	r2, [r5, #0]
 8008596:	461a      	mov	r2, r3
 8008598:	f7f9 fcf2 	bl	8001f80 <_write>
 800859c:	1c43      	adds	r3, r0, #1
 800859e:	d102      	bne.n	80085a6 <_write_r+0x1e>
 80085a0:	682b      	ldr	r3, [r5, #0]
 80085a2:	b103      	cbz	r3, 80085a6 <_write_r+0x1e>
 80085a4:	6023      	str	r3, [r4, #0]
 80085a6:	bd38      	pop	{r3, r4, r5, pc}
 80085a8:	2000042c 	.word	0x2000042c

080085ac <_close_r>:
 80085ac:	b538      	push	{r3, r4, r5, lr}
 80085ae:	2300      	movs	r3, #0
 80085b0:	4d05      	ldr	r5, [pc, #20]	; (80085c8 <_close_r+0x1c>)
 80085b2:	4604      	mov	r4, r0
 80085b4:	4608      	mov	r0, r1
 80085b6:	602b      	str	r3, [r5, #0]
 80085b8:	f7f9 fcfe 	bl	8001fb8 <_close>
 80085bc:	1c43      	adds	r3, r0, #1
 80085be:	d102      	bne.n	80085c6 <_close_r+0x1a>
 80085c0:	682b      	ldr	r3, [r5, #0]
 80085c2:	b103      	cbz	r3, 80085c6 <_close_r+0x1a>
 80085c4:	6023      	str	r3, [r4, #0]
 80085c6:	bd38      	pop	{r3, r4, r5, pc}
 80085c8:	2000042c 	.word	0x2000042c

080085cc <_fstat_r>:
 80085cc:	b538      	push	{r3, r4, r5, lr}
 80085ce:	2300      	movs	r3, #0
 80085d0:	4d06      	ldr	r5, [pc, #24]	; (80085ec <_fstat_r+0x20>)
 80085d2:	4604      	mov	r4, r0
 80085d4:	4608      	mov	r0, r1
 80085d6:	4611      	mov	r1, r2
 80085d8:	602b      	str	r3, [r5, #0]
 80085da:	f7f9 fcf8 	bl	8001fce <_fstat>
 80085de:	1c43      	adds	r3, r0, #1
 80085e0:	d102      	bne.n	80085e8 <_fstat_r+0x1c>
 80085e2:	682b      	ldr	r3, [r5, #0]
 80085e4:	b103      	cbz	r3, 80085e8 <_fstat_r+0x1c>
 80085e6:	6023      	str	r3, [r4, #0]
 80085e8:	bd38      	pop	{r3, r4, r5, pc}
 80085ea:	bf00      	nop
 80085ec:	2000042c 	.word	0x2000042c

080085f0 <_isatty_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	2300      	movs	r3, #0
 80085f4:	4d05      	ldr	r5, [pc, #20]	; (800860c <_isatty_r+0x1c>)
 80085f6:	4604      	mov	r4, r0
 80085f8:	4608      	mov	r0, r1
 80085fa:	602b      	str	r3, [r5, #0]
 80085fc:	f7f9 fcf6 	bl	8001fec <_isatty>
 8008600:	1c43      	adds	r3, r0, #1
 8008602:	d102      	bne.n	800860a <_isatty_r+0x1a>
 8008604:	682b      	ldr	r3, [r5, #0]
 8008606:	b103      	cbz	r3, 800860a <_isatty_r+0x1a>
 8008608:	6023      	str	r3, [r4, #0]
 800860a:	bd38      	pop	{r3, r4, r5, pc}
 800860c:	2000042c 	.word	0x2000042c

08008610 <_lseek_r>:
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	4604      	mov	r4, r0
 8008614:	4608      	mov	r0, r1
 8008616:	4611      	mov	r1, r2
 8008618:	2200      	movs	r2, #0
 800861a:	4d05      	ldr	r5, [pc, #20]	; (8008630 <_lseek_r+0x20>)
 800861c:	602a      	str	r2, [r5, #0]
 800861e:	461a      	mov	r2, r3
 8008620:	f7f9 fcee 	bl	8002000 <_lseek>
 8008624:	1c43      	adds	r3, r0, #1
 8008626:	d102      	bne.n	800862e <_lseek_r+0x1e>
 8008628:	682b      	ldr	r3, [r5, #0]
 800862a:	b103      	cbz	r3, 800862e <_lseek_r+0x1e>
 800862c:	6023      	str	r3, [r4, #0]
 800862e:	bd38      	pop	{r3, r4, r5, pc}
 8008630:	2000042c 	.word	0x2000042c

08008634 <_read_r>:
 8008634:	b538      	push	{r3, r4, r5, lr}
 8008636:	4604      	mov	r4, r0
 8008638:	4608      	mov	r0, r1
 800863a:	4611      	mov	r1, r2
 800863c:	2200      	movs	r2, #0
 800863e:	4d05      	ldr	r5, [pc, #20]	; (8008654 <_read_r+0x20>)
 8008640:	602a      	str	r2, [r5, #0]
 8008642:	461a      	mov	r2, r3
 8008644:	f7f9 fc7f 	bl	8001f46 <_read>
 8008648:	1c43      	adds	r3, r0, #1
 800864a:	d102      	bne.n	8008652 <_read_r+0x1e>
 800864c:	682b      	ldr	r3, [r5, #0]
 800864e:	b103      	cbz	r3, 8008652 <_read_r+0x1e>
 8008650:	6023      	str	r3, [r4, #0]
 8008652:	bd38      	pop	{r3, r4, r5, pc}
 8008654:	2000042c 	.word	0x2000042c

08008658 <_init>:
 8008658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865a:	bf00      	nop
 800865c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800865e:	bc08      	pop	{r3}
 8008660:	469e      	mov	lr, r3
 8008662:	4770      	bx	lr

08008664 <_fini>:
 8008664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008666:	bf00      	nop
 8008668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800866a:	bc08      	pop	{r3}
 800866c:	469e      	mov	lr, r3
 800866e:	4770      	bx	lr
