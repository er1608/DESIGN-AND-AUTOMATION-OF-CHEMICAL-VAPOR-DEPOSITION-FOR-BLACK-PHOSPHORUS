
PID_CONTROL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d3c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08007e50  08007e50  00017e50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082ac  080082ac  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  080082ac  080082ac  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080082ac  080082ac  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082ac  080082ac  000182ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082b0  080082b0  000182b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080082b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  200001ec  080084a0  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  080084a0  000203dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7cd  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023fd  00000000  00000000  0002f9e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  00031de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  00032ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001933f  00000000  00000000  00033a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010603  00000000  00000000  0004cdb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009117b  00000000  00000000  0005d3ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee535  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005064  00000000  00000000  000ee588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000004e  00000000  00000000  000f35ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08007e34 	.word	0x08007e34

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08007e34 	.word	0x08007e34

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <KalmanFilter_Init>:
#include "kalman.h"

void KalmanFilter_Init(KalmanFilter *kf, float Q, float R) {
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
    kf->x = 0.0f;      // Initial state estimate
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
    kf->P = 1.0f;      // Initial error covariance
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800112a:	605a      	str	r2, [r3, #4]
    kf->Q = Q;         // Process noise covariance
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	609a      	str	r2, [r3, #8]
    kf->R = R;         // Measurement noise covariance
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	60da      	str	r2, [r3, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr

08001142 <KalmanFilter_Update>:

float KalmanFilter_Update(KalmanFilter *kf, float z) {
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]
    // Prediction update
    float x_pred = kf->x;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	617b      	str	r3, [r7, #20]
    float P_pred = kf->P + kf->Q;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	4619      	mov	r1, r3
 800115c:	4610      	mov	r0, r2
 800115e:	f7ff fd09 	bl	8000b74 <__addsf3>
 8001162:	4603      	mov	r3, r0
 8001164:	613b      	str	r3, [r7, #16]

    // Measurement update (Kalman gain calculation)
    float K = P_pred / (P_pred + kf->R);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	6939      	ldr	r1, [r7, #16]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fd01 	bl	8000b74 <__addsf3>
 8001172:	4603      	mov	r3, r0
 8001174:	4619      	mov	r1, r3
 8001176:	6938      	ldr	r0, [r7, #16]
 8001178:	f7ff feb8 	bl	8000eec <__aeabi_fdiv>
 800117c:	4603      	mov	r3, r0
 800117e:	60fb      	str	r3, [r7, #12]

    // State update
    kf->x = x_pred + K * (z - x_pred);
 8001180:	6979      	ldr	r1, [r7, #20]
 8001182:	6838      	ldr	r0, [r7, #0]
 8001184:	f7ff fcf4 	bl	8000b70 <__aeabi_fsub>
 8001188:	4603      	mov	r3, r0
 800118a:	68f9      	ldr	r1, [r7, #12]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fdf9 	bl	8000d84 <__aeabi_fmul>
 8001192:	4603      	mov	r3, r0
 8001194:	6979      	ldr	r1, [r7, #20]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fcec 	bl	8000b74 <__addsf3>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	601a      	str	r2, [r3, #0]

    // Error covariance update
    kf->P = (1 - K) * P_pred;
 80011a4:	68f9      	ldr	r1, [r7, #12]
 80011a6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80011aa:	f7ff fce1 	bl	8000b70 <__aeabi_fsub>
 80011ae:	4603      	mov	r3, r0
 80011b0:	6939      	ldr	r1, [r7, #16]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fde6 	bl	8000d84 <__aeabi_fmul>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	605a      	str	r2, [r3, #4]

    return kf->x;   // Return the filtered value
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <Send_UART>:
int get_random_number(){
	int values[] = {-2, -1 , 0, 0, 0, 1, 2, 7, 8, 7, 7};
	return values[rand() % 11];
}

void Send_UART() {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	  // Time out 100ms
	  sprintf((char *)SET_UART, "%u\n", SETT);
 80011d0:	4b1e      	ldr	r3, [pc, #120]	; (800124c <Send_UART+0x80>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	461a      	mov	r2, r3
 80011d8:	491d      	ldr	r1, [pc, #116]	; (8001250 <Send_UART+0x84>)
 80011da:	481e      	ldr	r0, [pc, #120]	; (8001254 <Send_UART+0x88>)
 80011dc:	f004 fbb0 	bl	8005940 <siprintf>
	  // Send SET
	  HAL_UART_Transmit(&huart1, (uint8_t *)SET_UART, strlen((char *)SET_UART), 100);
 80011e0:	481c      	ldr	r0, [pc, #112]	; (8001254 <Send_UART+0x88>)
 80011e2:	f7fe ffb5 	bl	8000150 <strlen>
 80011e6:	4603      	mov	r3, r0
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	2364      	movs	r3, #100	; 0x64
 80011ec:	4919      	ldr	r1, [pc, #100]	; (8001254 <Send_UART+0x88>)
 80011ee:	481a      	ldr	r0, [pc, #104]	; (8001258 <Send_UART+0x8c>)
 80011f0:	f003 f8fa 	bl	80043e8 <HAL_UART_Transmit>

	  sprintf((char *)Current_Temperature_UART, "Temperature: %.2f\n", Current_Temperature);
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <Send_UART+0x90>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f915 	bl	8000428 <__aeabi_f2d>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4917      	ldr	r1, [pc, #92]	; (8001260 <Send_UART+0x94>)
 8001204:	4817      	ldr	r0, [pc, #92]	; (8001264 <Send_UART+0x98>)
 8001206:	f004 fb9b 	bl	8005940 <siprintf>
	  // Send current TEMP
	  HAL_UART_Transmit(&huart1, (uint8_t *)Current_Temperature_UART, strlen((char *)Current_Temperature_UART), 100);
 800120a:	4816      	ldr	r0, [pc, #88]	; (8001264 <Send_UART+0x98>)
 800120c:	f7fe ffa0 	bl	8000150 <strlen>
 8001210:	4603      	mov	r3, r0
 8001212:	b29a      	uxth	r2, r3
 8001214:	2364      	movs	r3, #100	; 0x64
 8001216:	4913      	ldr	r1, [pc, #76]	; (8001264 <Send_UART+0x98>)
 8001218:	480f      	ldr	r0, [pc, #60]	; (8001258 <Send_UART+0x8c>)
 800121a:	f003 f8e5 	bl	80043e8 <HAL_UART_Transmit>

	  sprintf((char *)Setpoint_Temperature_UART, "Set: %.2f\n", Current_Temperature_Kalman);
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <Send_UART+0x9c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f900 	bl	8000428 <__aeabi_f2d>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	490f      	ldr	r1, [pc, #60]	; (800126c <Send_UART+0xa0>)
 800122e:	4810      	ldr	r0, [pc, #64]	; (8001270 <Send_UART+0xa4>)
 8001230:	f004 fb86 	bl	8005940 <siprintf>
	  // Send set point
	  HAL_UART_Transmit(&huart1, (uint8_t *)Setpoint_Temperature_UART, strlen((char *)Setpoint_Temperature_UART), 100);
 8001234:	480e      	ldr	r0, [pc, #56]	; (8001270 <Send_UART+0xa4>)
 8001236:	f7fe ff8b 	bl	8000150 <strlen>
 800123a:	4603      	mov	r3, r0
 800123c:	b29a      	uxth	r2, r3
 800123e:	2364      	movs	r3, #100	; 0x64
 8001240:	490b      	ldr	r1, [pc, #44]	; (8001270 <Send_UART+0xa4>)
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <Send_UART+0x8c>)
 8001244:	f003 f8d0 	bl	80043e8 <HAL_UART_Transmit>
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200002cc 	.word	0x200002cc
 8001250:	08007e7c 	.word	0x08007e7c
 8001254:	2000033c 	.word	0x2000033c
 8001258:	20000280 	.word	0x20000280
 800125c:	20000004 	.word	0x20000004
 8001260:	08007e80 	.word	0x08007e80
 8001264:	2000036c 	.word	0x2000036c
 8001268:	20000008 	.word	0x20000008
 800126c:	08007e94 	.word	0x08007e94
 8001270:	2000038c 	.word	0x2000038c

08001274 <PID_Controller>:

float PID_Controller() {
 8001274:	b5b0      	push	{r4, r5, r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
	float sum = 0;
 800127a:	f04f 0300 	mov.w	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
	float u_Kp, u_Ki, u_Kd, error;

	error = Setpoint - Current_Temperature;
 8001280:	4b38      	ldr	r3, [pc, #224]	; (8001364 <PID_Controller+0xf0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a38      	ldr	r2, [pc, #224]	; (8001368 <PID_Controller+0xf4>)
 8001286:	6812      	ldr	r2, [r2, #0]
 8001288:	4611      	mov	r1, r2
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fc70 	bl	8000b70 <__aeabi_fsub>
 8001290:	4603      	mov	r3, r0
 8001292:	613b      	str	r3, [r7, #16]

	u_Kp = PID.Kp * error;		// KHUECH DAI
 8001294:	4b35      	ldr	r3, [pc, #212]	; (800136c <PID_Controller+0xf8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4619      	mov	r1, r3
 800129a:	6938      	ldr	r0, [r7, #16]
 800129c:	f7ff fd72 	bl	8000d84 <__aeabi_fmul>
 80012a0:	4603      	mov	r3, r0
 80012a2:	60fb      	str	r3, [r7, #12]
	u_Ki = PID.Ki * PID.Tp * (error + PID.Previous_Error) / 2.0 + PID.Previous_u_Ki;	// TICH PHAN HINH THANG
 80012a4:	4b31      	ldr	r3, [pc, #196]	; (800136c <PID_Controller+0xf8>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	4a30      	ldr	r2, [pc, #192]	; (800136c <PID_Controller+0xf8>)
 80012aa:	68d2      	ldr	r2, [r2, #12]
 80012ac:	4611      	mov	r1, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fd68 	bl	8000d84 <__aeabi_fmul>
 80012b4:	4603      	mov	r3, r0
 80012b6:	461c      	mov	r4, r3
 80012b8:	4b2c      	ldr	r3, [pc, #176]	; (800136c <PID_Controller+0xf8>)
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	6939      	ldr	r1, [r7, #16]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fc58 	bl	8000b74 <__addsf3>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4619      	mov	r1, r3
 80012c8:	4620      	mov	r0, r4
 80012ca:	f7ff fd5b 	bl	8000d84 <__aeabi_fmul>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f8a9 	bl	8000428 <__aeabi_f2d>
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012de:	f7ff fa25 	bl	800072c <__aeabi_ddiv>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4614      	mov	r4, r2
 80012e8:	461d      	mov	r5, r3
 80012ea:	4b20      	ldr	r3, [pc, #128]	; (800136c <PID_Controller+0xf8>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f89a 	bl	8000428 <__aeabi_f2d>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4620      	mov	r0, r4
 80012fa:	4629      	mov	r1, r5
 80012fc:	f7fe ff36 	bl	800016c <__adddf3>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fbde 	bl	8000ac8 <__aeabi_d2f>
 800130c:	4603      	mov	r3, r0
 800130e:	60bb      	str	r3, [r7, #8]
	u_Kd = PID.Kd * (error - PID.Previous_Error) / PID.Tp;		// DAO HAM
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <PID_Controller+0xf8>)
 8001312:	689c      	ldr	r4, [r3, #8]
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <PID_Controller+0xf8>)
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	4619      	mov	r1, r3
 800131a:	6938      	ldr	r0, [r7, #16]
 800131c:	f7ff fc28 	bl	8000b70 <__aeabi_fsub>
 8001320:	4603      	mov	r3, r0
 8001322:	4619      	mov	r1, r3
 8001324:	4620      	mov	r0, r4
 8001326:	f7ff fd2d 	bl	8000d84 <__aeabi_fmul>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <PID_Controller+0xf8>)
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	4619      	mov	r1, r3
 8001334:	4610      	mov	r0, r2
 8001336:	f7ff fdd9 	bl	8000eec <__aeabi_fdiv>
 800133a:	4603      	mov	r3, r0
 800133c:	607b      	str	r3, [r7, #4]

	PID.Previous_Error = error;	// Update error
 800133e:	4a0b      	ldr	r2, [pc, #44]	; (800136c <PID_Controller+0xf8>)
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	6113      	str	r3, [r2, #16]

	sum = u_Kp + u_Ki + u_Kd;	// TINH TONG
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f7ff fc14 	bl	8000b74 <__addsf3>
 800134c:	4603      	mov	r3, r0
 800134e:	4619      	mov	r1, r3
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff fc0f 	bl	8000b74 <__addsf3>
 8001356:	4603      	mov	r3, r0
 8001358:	617b      	str	r3, [r7, #20]
	return sum;
 800135a:	697b      	ldr	r3, [r7, #20]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bdb0      	pop	{r4, r5, r7, pc}
 8001364:	2000000c 	.word	0x2000000c
 8001368:	20000004 	.word	0x20000004
 800136c:	200003ac 	.word	0x200003ac

08001370 <PID2STEPS>:

//--------------------STEPPER PART---------------------------
int8_t PID2STEPS(float PID) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	uint8_t target_Position;
	int8_t Steps2Move;
	float angle = PID * MAX_ANGLE; // PID (0;1)
 8001378:	491f      	ldr	r1, [pc, #124]	; (80013f8 <PID2STEPS+0x88>)
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff fd02 	bl	8000d84 <__aeabi_fmul>
 8001380:	4603      	mov	r3, r0
 8001382:	60fb      	str	r3, [r7, #12]

	// Avoid out of Stepper Range
	if (angle > MAX_ANGLE) angle = MAX_ANGLE;
 8001384:	491c      	ldr	r1, [pc, #112]	; (80013f8 <PID2STEPS+0x88>)
 8001386:	68f8      	ldr	r0, [r7, #12]
 8001388:	f7ff feb8 	bl	80010fc <__aeabi_fcmpgt>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <PID2STEPS+0x26>
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <PID2STEPS+0x88>)
 8001394:	60fb      	str	r3, [r7, #12]
	if (angle < MIN_ANGLE) angle = MIN_ANGLE;
 8001396:	f04f 0100 	mov.w	r1, #0
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f7ff fe90 	bl	80010c0 <__aeabi_fcmplt>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d002      	beq.n	80013ac <PID2STEPS+0x3c>
 80013a6:	f04f 0300 	mov.w	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]

	target_Position = (uint8_t)(angle * Steps_Per_Cycle / 360.0);	// TINH VI TRI XOAY
 80013ac:	4913      	ldr	r1, [pc, #76]	; (80013fc <PID2STEPS+0x8c>)
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f7ff fce8 	bl	8000d84 <__aeabi_fmul>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f836 	bl	8000428 <__aeabi_f2d>
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <PID2STEPS+0x90>)
 80013c2:	f7ff f9b3 	bl	800072c <__aeabi_ddiv>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f7ff fb5b 	bl	8000a88 <__aeabi_d2uiz>
 80013d2:	4603      	mov	r3, r0
 80013d4:	72fb      	strb	r3, [r7, #11]
	Steps2Move = target_Position - Previous_Position;	// TINH SO BUOC CAN QUAY
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <PID2STEPS+0x94>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	7afa      	ldrb	r2, [r7, #11]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	72bb      	strb	r3, [r7, #10]
	Previous_Position = target_Position;
 80013e4:	4a07      	ldr	r2, [pc, #28]	; (8001404 <PID2STEPS+0x94>)
 80013e6:	7afb      	ldrb	r3, [r7, #11]
 80013e8:	7013      	strb	r3, [r2, #0]

	return Steps2Move;
 80013ea:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	43b40000 	.word	0x43b40000
 80013fc:	43480000 	.word	0x43480000
 8001400:	40768000 	.word	0x40768000
 8001404:	20000339 	.word	0x20000339

08001408 <Stepper>:

void Stepper(int8_t Steps_Move)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
	uint8_t steps = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	73fb      	strb	r3, [r7, #15]

	if (Steps_Move > 0) {
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	dd0a      	ble.n	8001434 <Stepper+0x2c>
		DIR = 1;
 800141e:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <Stepper+0x90>)
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, DIR);
 8001424:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <Stepper+0x90>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	461a      	mov	r2, r3
 800142c:	2102      	movs	r1, #2
 800142e:	481b      	ldr	r0, [pc, #108]	; (800149c <Stepper+0x94>)
 8001430:	f001 fe8c 	bl	800314c <HAL_GPIO_WritePin>
	}

	if (Steps_Move < 0) {
 8001434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001438:	2b00      	cmp	r3, #0
 800143a:	da22      	bge.n	8001482 <Stepper+0x7a>
		DIR = 0;
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <Stepper+0x90>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, DIR);
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <Stepper+0x90>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	461a      	mov	r2, r3
 800144a:	2102      	movs	r1, #2
 800144c:	4813      	ldr	r0, [pc, #76]	; (800149c <Stepper+0x94>)
 800144e:	f001 fe7d 	bl	800314c <HAL_GPIO_WritePin>
		Steps_Move *= (-1);
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	425b      	negs	r3, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	71fb      	strb	r3, [r7, #7]
	}

	while (steps < Steps_Move)
 800145a:	e012      	b.n	8001482 <Stepper+0x7a>
	{
			steps++;
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	3301      	adds	r3, #1
 8001460:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2101      	movs	r1, #1
 8001466:	480d      	ldr	r0, [pc, #52]	; (800149c <Stepper+0x94>)
 8001468:	f001 fe70 	bl	800314c <HAL_GPIO_WritePin>
			HAL_Delay(3);
 800146c:	2003      	movs	r0, #3
 800146e:	f000 ff07 	bl	8002280 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8001472:	2201      	movs	r2, #1
 8001474:	2101      	movs	r1, #1
 8001476:	4809      	ldr	r0, [pc, #36]	; (800149c <Stepper+0x94>)
 8001478:	f001 fe68 	bl	800314c <HAL_GPIO_WritePin>
		  	HAL_Delay(3);
 800147c:	2003      	movs	r0, #3
 800147e:	f000 feff 	bl	8002280 <HAL_Delay>
	while (steps < Steps_Move)
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	429a      	cmp	r2, r3
 800148a:	dbe7      	blt.n	800145c <Stepper+0x54>
	}
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200002c8 	.word	0x200002c8
 800149c:	40010800 	.word	0x40010800

080014a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a6:	f000 fe89 	bl	80021bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014aa:	f000 f86f 	bl	800158c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ae:	f000 f987 	bl	80017c0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80014b2:	f000 f905 	bl	80016c0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80014b6:	f000 f951 	bl	800175c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80014ba:	f000 f8c3 	bl	8001644 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer));
 80014be:	2264      	movs	r2, #100	; 0x64
 80014c0:	4924      	ldr	r1, [pc, #144]	; (8001554 <main+0xb4>)
 80014c2:	4825      	ldr	r0, [pc, #148]	; (8001558 <main+0xb8>)
 80014c4:	f003 f81b 	bl	80044fe <HAL_UART_Receive_IT>
  // ----------------------Initialize PID----------------
  PID.Kp = 0.03928;
 80014c8:	4b24      	ldr	r3, [pc, #144]	; (800155c <main+0xbc>)
 80014ca:	4a25      	ldr	r2, [pc, #148]	; (8001560 <main+0xc0>)
 80014cc:	601a      	str	r2, [r3, #0]
  PID.Ki = 0.0002692;
 80014ce:	4b23      	ldr	r3, [pc, #140]	; (800155c <main+0xbc>)
 80014d0:	4a24      	ldr	r2, [pc, #144]	; (8001564 <main+0xc4>)
 80014d2:	605a      	str	r2, [r3, #4]
  PID.Kd = 0.01957;
 80014d4:	4b21      	ldr	r3, [pc, #132]	; (800155c <main+0xbc>)
 80014d6:	4a24      	ldr	r2, [pc, #144]	; (8001568 <main+0xc8>)
 80014d8:	609a      	str	r2, [r3, #8]
  PID.Tp = 1;
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <main+0xbc>)
 80014dc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80014e0:	60da      	str	r2, [r3, #12]
  PID.Previous_Error = 0;
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <main+0xbc>)
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  PID.Previous_u_Ki = 0;
 80014ea:	4b1c      	ldr	r3, [pc, #112]	; (800155c <main+0xbc>)
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]

  // ----------------------Initialize Kalman Filter----------------
  float Q = 0.01f;
 80014f2:	4b1e      	ldr	r3, [pc, #120]	; (800156c <main+0xcc>)
 80014f4:	607b      	str	r3, [r7, #4]
  float R = 0.1f;
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <main+0xd0>)
 80014f8:	603b      	str	r3, [r7, #0]

  KalmanFilter_Init(&myFilter, Q, R);
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	481d      	ldr	r0, [pc, #116]	; (8001574 <main+0xd4>)
 8001500:	f7ff fe06 	bl	8001110 <KalmanFilter_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (rxBuffer[0] == '1')
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <main+0xb4>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b31      	cmp	r3, #49	; 0x31
 800150a:	d109      	bne.n	8001520 <main+0x80>
	  {
		  if (TIM2_SET == 0)
 800150c:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <main+0xd8>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d105      	bne.n	8001520 <main+0x80>
		  {
			  HAL_TIM_Base_Start_IT(&htim2);
 8001514:	4819      	ldr	r0, [pc, #100]	; (800157c <main+0xdc>)
 8001516:	f002 fb47 	bl	8003ba8 <HAL_TIM_Base_Start_IT>
			  TIM2_SET = 1;
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <main+0xd8>)
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if (Stepper_flag) {
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <main+0xe0>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d008      	beq.n	800153c <main+0x9c>
		  Stepper(Steps2Move);
 800152a:	4b16      	ldr	r3, [pc, #88]	; (8001584 <main+0xe4>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	b25b      	sxtb	r3, r3
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff69 	bl	8001408 <Stepper>
		  Stepper_flag = 0;
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <main+0xe0>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
	  }

	  if (UART_flag) {
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <main+0xe8>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0de      	beq.n	8001504 <main+0x64>
		  Send_UART();
 8001546:	f7ff fe41 	bl	80011cc <Send_UART>
		  UART_flag = 0;
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <main+0xe8>)
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
	  if (rxBuffer[0] == '1')
 8001550:	e7d8      	b.n	8001504 <main+0x64>
 8001552:	bf00      	nop
 8001554:	200002d4 	.word	0x200002d4
 8001558:	20000280 	.word	0x20000280
 800155c:	200003ac 	.word	0x200003ac
 8001560:	3d20e411 	.word	0x3d20e411
 8001564:	398d236a 	.word	0x398d236a
 8001568:	3ca05144 	.word	0x3ca05144
 800156c:	3c23d70a 	.word	0x3c23d70a
 8001570:	3dcccccd 	.word	0x3dcccccd
 8001574:	2000035c 	.word	0x2000035c
 8001578:	200002d0 	.word	0x200002d0
 800157c:	20000238 	.word	0x20000238
 8001580:	2000033a 	.word	0x2000033a
 8001584:	20000000 	.word	0x20000000
 8001588:	2000033b 	.word	0x2000033b

0800158c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b094      	sub	sp, #80	; 0x50
 8001590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001592:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001596:	2228      	movs	r2, #40	; 0x28
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f003 fd68 	bl	8005070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015bc:	2301      	movs	r3, #1
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ca:	2301      	movs	r3, #1
 80015cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ce:	2302      	movs	r3, #2
 80015d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015d8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 fdca 	bl	800317c <HAL_RCC_OscConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80015ee:	f000 fbbf 	bl	8001d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f2:	230f      	movs	r3, #15
 80015f4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f6:	2302      	movs	r3, #2
 80015f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001602:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2102      	movs	r1, #2
 800160e:	4618      	mov	r0, r3
 8001610:	f002 f836 	bl	8003680 <HAL_RCC_ClockConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800161a:	f000 fba9 	bl	8001d70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800161e:	2302      	movs	r3, #2
 8001620:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001626:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	4618      	mov	r0, r3
 800162c:	f002 f9b6 	bl	800399c <HAL_RCCEx_PeriphCLKConfig>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001636:	f000 fb9b 	bl	8001d70 <Error_Handler>
  }
}
 800163a:	bf00      	nop
 800163c:	3750      	adds	r7, #80	; 0x50
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001654:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <MX_ADC1_Init+0x74>)
 8001656:	4a19      	ldr	r2, [pc, #100]	; (80016bc <MX_ADC1_Init+0x78>)
 8001658:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <MX_ADC1_Init+0x74>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <MX_ADC1_Init+0x74>)
 8001662:	2200      	movs	r2, #0
 8001664:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <MX_ADC1_Init+0x74>)
 8001668:	2200      	movs	r2, #0
 800166a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <MX_ADC1_Init+0x74>)
 800166e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001672:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001674:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <MX_ADC1_Init+0x74>)
 8001676:	2200      	movs	r2, #0
 8001678:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MX_ADC1_Init+0x74>)
 800167c:	2201      	movs	r2, #1
 800167e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001680:	480d      	ldr	r0, [pc, #52]	; (80016b8 <MX_ADC1_Init+0x74>)
 8001682:	f000 fe21 	bl	80022c8 <HAL_ADC_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800168c:	f000 fb70 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001690:	2302      	movs	r3, #2
 8001692:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001694:	2301      	movs	r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001698:	2302      	movs	r3, #2
 800169a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_ADC1_Init+0x74>)
 80016a2:	f001 f873 	bl	800278c <HAL_ADC_ConfigChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80016ac:	f000 fb60 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000208 	.word	0x20000208
 80016bc:	40012400 	.word	0x40012400

080016c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c6:	f107 0308 	add.w	r3, r7, #8
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d4:	463b      	mov	r3, r7
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016dc:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <MX_TIM2_Init+0x98>)
 80016de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80016e4:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <MX_TIM2_Init+0x98>)
 80016e6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80016ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <MX_TIM2_Init+0x98>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80016f2:	4b19      	ldr	r3, [pc, #100]	; (8001758 <MX_TIM2_Init+0x98>)
 80016f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80016f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fa:	4b17      	ldr	r3, [pc, #92]	; (8001758 <MX_TIM2_Init+0x98>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001700:	4b15      	ldr	r3, [pc, #84]	; (8001758 <MX_TIM2_Init+0x98>)
 8001702:	2200      	movs	r2, #0
 8001704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001706:	4814      	ldr	r0, [pc, #80]	; (8001758 <MX_TIM2_Init+0x98>)
 8001708:	f002 f9fe 	bl	8003b08 <HAL_TIM_Base_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001712:	f000 fb2d 	bl	8001d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800171c:	f107 0308 	add.w	r3, r7, #8
 8001720:	4619      	mov	r1, r3
 8001722:	480d      	ldr	r0, [pc, #52]	; (8001758 <MX_TIM2_Init+0x98>)
 8001724:	f002 fbb0 	bl	8003e88 <HAL_TIM_ConfigClockSource>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800172e:	f000 fb1f 	bl	8001d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800173a:	463b      	mov	r3, r7
 800173c:	4619      	mov	r1, r3
 800173e:	4806      	ldr	r0, [pc, #24]	; (8001758 <MX_TIM2_Init+0x98>)
 8001740:	f002 fd92 	bl	8004268 <HAL_TIMEx_MasterConfigSynchronization>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800174a:	f000 fb11 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000238 	.word	0x20000238

0800175c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001760:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <MX_USART1_UART_Init+0x5c>)
 8001762:	4a16      	ldr	r2, [pc, #88]	; (80017bc <MX_USART1_UART_Init+0x60>)
 8001764:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001766:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <MX_USART1_UART_Init+0x5c>)
 8001768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800176c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <MX_USART1_UART_Init+0x5c>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001774:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <MX_USART1_UART_Init+0x5c>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <MX_USART1_UART_Init+0x5c>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001780:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <MX_USART1_UART_Init+0x5c>)
 8001782:	220c      	movs	r2, #12
 8001784:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <MX_USART1_UART_Init+0x5c>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800178c:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <MX_USART1_UART_Init+0x5c>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001792:	4809      	ldr	r0, [pc, #36]	; (80017b8 <MX_USART1_UART_Init+0x5c>)
 8001794:	f002 fdd8 	bl	8004348 <HAL_UART_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800179e:	f000 fae7 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2100      	movs	r1, #0
 80017a6:	2025      	movs	r0, #37	; 0x25
 80017a8:	f001 fa63 	bl	8002c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017ac:	2025      	movs	r0, #37	; 0x25
 80017ae:	f001 fa7c 	bl	8002caa <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART1_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000280 	.word	0x20000280
 80017bc:	40013800 	.word	0x40013800

080017c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c6:	f107 0308 	add.w	r3, r7, #8
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d4:	4b17      	ldr	r3, [pc, #92]	; (8001834 <MX_GPIO_Init+0x74>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a16      	ldr	r2, [pc, #88]	; (8001834 <MX_GPIO_Init+0x74>)
 80017da:	f043 0320 	orr.w	r3, r3, #32
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <MX_GPIO_Init+0x74>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0320 	and.w	r3, r3, #32
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <MX_GPIO_Init+0x74>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a10      	ldr	r2, [pc, #64]	; (8001834 <MX_GPIO_Init+0x74>)
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <MX_GPIO_Init+0x74>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	2103      	movs	r1, #3
 8001808:	480b      	ldr	r0, [pc, #44]	; (8001838 <MX_GPIO_Init+0x78>)
 800180a:	f001 fc9f 	bl	800314c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800180e:	2303      	movs	r3, #3
 8001810:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001812:	2301      	movs	r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181e:	f107 0308 	add.w	r3, r7, #8
 8001822:	4619      	mov	r1, r3
 8001824:	4804      	ldr	r0, [pc, #16]	; (8001838 <MX_GPIO_Init+0x78>)
 8001826:	f001 fb0d 	bl	8002e44 <HAL_GPIO_Init>

}
 800182a:	bf00      	nop
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000
 8001838:	40010800 	.word	0x40010800

0800183c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	uint32_t adc_value;
	if (hadc->Instance == ADC1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a12      	ldr	r2, [pc, #72]	; (8001894 <HAL_ADC_ConvCpltCallback+0x58>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d11d      	bne.n	800188a <HAL_ADC_ConvCpltCallback+0x4e>
	{
		adc_value = HAL_ADC_GetValue(&hadc1);
 800184e:	4812      	ldr	r0, [pc, #72]	; (8001898 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001850:	f000 fec8 	bl	80025e4 <HAL_ADC_GetValue>
 8001854:	60f8      	str	r0, [r7, #12]
		Current_Temperature = (adc_value * (800.0f / 4096)) + 9;
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f7ff fa3c 	bl	8000cd4 <__aeabi_ui2f>
 800185c:	4603      	mov	r3, r0
 800185e:	490f      	ldr	r1, [pc, #60]	; (800189c <HAL_ADC_ConvCpltCallback+0x60>)
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fa8f 	bl	8000d84 <__aeabi_fmul>
 8001866:	4603      	mov	r3, r0
 8001868:	490d      	ldr	r1, [pc, #52]	; (80018a0 <HAL_ADC_ConvCpltCallback+0x64>)
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff f982 	bl	8000b74 <__addsf3>
 8001870:	4603      	mov	r3, r0
 8001872:	461a      	mov	r2, r3
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <HAL_ADC_ConvCpltCallback+0x68>)
 8001876:	601a      	str	r2, [r3, #0]
		Current_Temperature_Kalman = KalmanFilter_Update(&myFilter, Current_Temperature);
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_ADC_ConvCpltCallback+0x68>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4619      	mov	r1, r3
 800187e:	480a      	ldr	r0, [pc, #40]	; (80018a8 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001880:	f7ff fc5f 	bl	8001142 <KalmanFilter_Update>
 8001884:	4603      	mov	r3, r0
 8001886:	4a09      	ldr	r2, [pc, #36]	; (80018ac <HAL_ADC_ConvCpltCallback+0x70>)
 8001888:	6013      	str	r3, [r2, #0]
	}
}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40012400 	.word	0x40012400
 8001898:	20000208 	.word	0x20000208
 800189c:	3e480000 	.word	0x3e480000
 80018a0:	41100000 	.word	0x41100000
 80018a4:	20000004 	.word	0x20000004
 80018a8:	2000035c 	.word	0x2000035c
 80018ac:	20000008 	.word	0x20000008

080018b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <HAL_UART_RxCpltCallback+0x24>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d104      	bne.n	80018cc <HAL_UART_RxCpltCallback+0x1c>
//        if (strcmp(received_data, "ON") == 0 && TIM2_SET == 0)
//        {
//            HAL_TIM_Base_Start_IT(&htim2);
//            TIM2_SET = 1;
//        }
        HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer));  // Tiếp tục nhận dữ liệu
 80018c2:	2264      	movs	r2, #100	; 0x64
 80018c4:	4904      	ldr	r1, [pc, #16]	; (80018d8 <HAL_UART_RxCpltCallback+0x28>)
 80018c6:	4805      	ldr	r0, [pc, #20]	; (80018dc <HAL_UART_RxCpltCallback+0x2c>)
 80018c8:	f002 fe19 	bl	80044fe <HAL_UART_Receive_IT>
    }
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40013800 	.word	0x40013800
 80018d8:	200002d4 	.word	0x200002d4
 80018dc:	20000280 	.word	0x20000280

080018e0 <HAL_TIM_PeriodElapsedCallback>:
//	if (PID_Output > 1) PID_Output = 1;
//	if (PID_Output < 0) PID_Output = 0;
//	Current_Temperature += alpha * PID_Output - beta * (Current_Temperature - T_ambient);
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f0:	f040 8211 	bne.w	8001d16 <HAL_TIM_PeriodElapsedCallback+0x436>
		float PID_Output;

		HAL_ADC_Start_IT(&hadc1);
 80018f4:	48a5      	ldr	r0, [pc, #660]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80018f6:	f000 fdbf 	bl	8002478 <HAL_ADC_Start_IT>

		time_count++;
 80018fa:	4ba5      	ldr	r3, [pc, #660]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	3301      	adds	r3, #1
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4ba2      	ldr	r3, [pc, #648]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001906:	701a      	strb	r2, [r3, #0]

		// TEMP------------GET TEMPERATURE-------------

		switch (Tset) {
 8001908:	4ba2      	ldr	r3, [pc, #648]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b04      	cmp	r3, #4
 800190e:	f200 8204 	bhi.w	8001d1a <HAL_TIM_PeriodElapsedCallback+0x43a>
 8001912:	a201      	add	r2, pc, #4	; (adr r2, 8001918 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001918:	0800192d 	.word	0x0800192d
 800191c:	08001a1f 	.word	0x08001a1f
 8001920:	08001a99 	.word	0x08001a99
 8001924:	08001b61 	.word	0x08001b61
 8001928:	08001c1b 	.word	0x08001c1b
			case TempSET1:
				SETT = 1;
 800192c:	4b9a      	ldr	r3, [pc, #616]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]

				if (time_count < 9) { //600
 8001932:	4b97      	ldr	r3, [pc, #604]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b08      	cmp	r3, #8
 800193a:	d80c      	bhi.n	8001956 <HAL_TIM_PeriodElapsedCallback+0x76>
					// Holding the temperature in 10mins
					PID_Output = PID_Controller();
 800193c:	f7ff fc9a 	bl	8001274 <PID_Controller>
 8001940:	60f8      	str	r0, [r7, #12]
					Steps2Move = PID2STEPS(PID_Output);
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f7ff fd14 	bl	8001370 <PID2STEPS>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	4b93      	ldr	r3, [pc, #588]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800194e:	701a      	strb	r2, [r3, #0]
//					Simulate_Temperature(PID_Output);
					Stepper_flag = 1;
 8001950:	4b93      	ldr	r3, [pc, #588]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
				}

				if (time_count - previous_time == 3) { //10
 8001956:	4b8e      	ldr	r3, [pc, #568]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	461a      	mov	r2, r3
 800195e:	4b91      	ldr	r3, [pc, #580]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	b2db      	uxtb	r3, r3
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b03      	cmp	r3, #3
 8001968:	d107      	bne.n	800197a <HAL_TIM_PeriodElapsedCallback+0x9a>
					previous_time = time_count;
 800196a:	4b89      	ldr	r3, [pc, #548]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	4b8c      	ldr	r3, [pc, #560]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001972:	701a      	strb	r2, [r3, #0]
					UART_flag = 1;
 8001974:	4b8c      	ldr	r3, [pc, #560]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001976:	2201      	movs	r2, #1
 8001978:	701a      	strb	r2, [r3, #0]
				}

				if (time_count == 9) { // 10min = 600
 800197a:	4b85      	ldr	r3, [pc, #532]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b09      	cmp	r3, #9
 8001982:	f040 81cc 	bne.w	8001d1e <HAL_TIM_PeriodElapsedCallback+0x43e>
					if (TempSET1_count == 3) { // 650/200 = 3
 8001986:	4b89      	ldr	r3, [pc, #548]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b03      	cmp	r3, #3
 800198e:	d10f      	bne.n	80019b0 <HAL_TIM_PeriodElapsedCallback+0xd0>
						Tset = TempSET2;
 8001990:	4b80      	ldr	r3, [pc, #512]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001992:	2201      	movs	r2, #1
 8001994:	701a      	strb	r2, [r3, #0]
						TempSET1_count = 0;
 8001996:	4b85      	ldr	r3, [pc, #532]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
						previous_time = 0;
 800199c:	4b81      	ldr	r3, [pc, #516]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
						time_count = 0;
 80019a2:	4b7b      	ldr	r3, [pc, #492]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
						time_hold = 0;
 80019a8:	4b81      	ldr	r3, [pc, #516]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
						break;
 80019ae:	e1bf      	b.n	8001d30 <HAL_TIM_PeriodElapsedCallback+0x450>
					}

					time_hold += time_count;
 80019b0:	4b77      	ldr	r3, [pc, #476]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4b7e      	ldr	r3, [pc, #504]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	4413      	add	r3, r2
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	4b7b      	ldr	r3, [pc, #492]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80019c2:	701a      	strb	r2, [r3, #0]
					if (time_hold == 54)  {
 80019c4:	4b7a      	ldr	r3, [pc, #488]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b36      	cmp	r3, #54	; 0x36
 80019cc:	d109      	bne.n	80019e2 <HAL_TIM_PeriodElapsedCallback+0x102>
						TempSET1_count++; // 1h = 3600s
 80019ce:	4b77      	ldr	r3, [pc, #476]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	3301      	adds	r3, #1
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	4b74      	ldr	r3, [pc, #464]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80019da:	701a      	strb	r2, [r3, #0]
						time_hold = 0;
 80019dc:	4b74      	ldr	r3, [pc, #464]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
					}
					previous_time = 0;
 80019e2:	4b70      	ldr	r3, [pc, #448]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
					time_count = 0;
 80019e8:	4b69      	ldr	r3, [pc, #420]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]

					// ----------Command to set PID---------
					// Increasing 33C after 10mins // 200C/6 (6 times 10mins) = 33
					Setpoint += 33;
 80019ee:	4b71      	ldr	r3, [pc, #452]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4971      	ldr	r1, [pc, #452]	; (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff f8bd 	bl	8000b74 <__addsf3>
 80019fa:	4603      	mov	r3, r0
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b6d      	ldr	r3, [pc, #436]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001a00:	601a      	str	r2, [r3, #0]
					if (Setpoint > MAX_TEMP) Setpoint = MAX_TEMP;
 8001a02:	4b6c      	ldr	r3, [pc, #432]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	496d      	ldr	r1, [pc, #436]	; (8001bbc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fb77 	bl	80010fc <__aeabi_fcmpgt>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d100      	bne.n	8001a16 <HAL_TIM_PeriodElapsedCallback+0x136>
				}
				break;
 8001a14:	e183      	b.n	8001d1e <HAL_TIM_PeriodElapsedCallback+0x43e>
					if (Setpoint > MAX_TEMP) Setpoint = MAX_TEMP;
 8001a16:	4b67      	ldr	r3, [pc, #412]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001a18:	4a68      	ldr	r2, [pc, #416]	; (8001bbc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001a1a:	601a      	str	r2, [r3, #0]
				break;
 8001a1c:	e17f      	b.n	8001d1e <HAL_TIM_PeriodElapsedCallback+0x43e>

			case TempSET2:
				SETT = 2;
 8001a1e:	4b5e      	ldr	r3, [pc, #376]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001a20:	2202      	movs	r2, #2
 8001a22:	701a      	strb	r2, [r3, #0]

				if (time_count < 27) { //1800
 8001a24:	4b5a      	ldr	r3, [pc, #360]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b1a      	cmp	r3, #26
 8001a2c:	d80d      	bhi.n	8001a4a <HAL_TIM_PeriodElapsedCallback+0x16a>
					// Holding the temperature at 650C in 30mins
					PID_Output = PID_Controller();
 8001a2e:	f7ff fc21 	bl	8001274 <PID_Controller>
 8001a32:	60f8      	str	r0, [r7, #12]
					Steps2Move = PID2STEPS(PID_Output);
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f7ff fc9b 	bl	8001370 <PID2STEPS>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b57      	ldr	r3, [pc, #348]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001a40:	701a      	strb	r2, [r3, #0]
//					Simulate_Temperature(PID_Output);
					Stepper_flag = 1;
 8001a42:	4b57      	ldr	r3, [pc, #348]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]
 8001a48:	e012      	b.n	8001a70 <HAL_TIM_PeriodElapsedCallback+0x190>
				}
				else {
					Tset = TempSET3;
 8001a4a:	4b52      	ldr	r3, [pc, #328]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	701a      	strb	r2, [r3, #0]
					previous_time = 0;
 8001a50:	4b54      	ldr	r3, [pc, #336]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
					time_count = 0;
 8001a56:	4b4e      	ldr	r3, [pc, #312]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
					Setpoint -= 12;
 8001a5c:	4b55      	ldr	r3, [pc, #340]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4957      	ldr	r1, [pc, #348]	; (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff f884 	bl	8000b70 <__aeabi_fsub>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4b51      	ldr	r3, [pc, #324]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001a6e:	601a      	str	r2, [r3, #0]
				}

				if (time_count - previous_time == 3) { //10
 8001a70:	4b47      	ldr	r3, [pc, #284]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b4a      	ldr	r3, [pc, #296]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	f040 814e 	bne.w	8001d22 <HAL_TIM_PeriodElapsedCallback+0x442>
					previous_time = time_count;
 8001a86:	4b42      	ldr	r3, [pc, #264]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	4b45      	ldr	r3, [pc, #276]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001a8e:	701a      	strb	r2, [r3, #0]
					UART_flag = 1;
 8001a90:	4b45      	ldr	r3, [pc, #276]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
				}

				break;
 8001a96:	e144      	b.n	8001d22 <HAL_TIM_PeriodElapsedCallback+0x442>

			case TempSET3:
				SETT = 3;
 8001a98:	4b3f      	ldr	r3, [pc, #252]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	701a      	strb	r2, [r3, #0]

				if (time_count < 54) { //3600
 8001a9e:	4b3c      	ldr	r3, [pc, #240]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b35      	cmp	r3, #53	; 0x35
 8001aa6:	d80c      	bhi.n	8001ac2 <HAL_TIM_PeriodElapsedCallback+0x1e2>
					// Holding the temperature in 1h
					PID_Output = PID_Controller();
 8001aa8:	f7ff fbe4 	bl	8001274 <PID_Controller>
 8001aac:	60f8      	str	r0, [r7, #12]
					Steps2Move = PID2STEPS(PID_Output);
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f7ff fc5e 	bl	8001370 <PID2STEPS>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4b38      	ldr	r3, [pc, #224]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001aba:	701a      	strb	r2, [r3, #0]
//					Simulate_Temperature(PID_Output);
					Stepper_flag = 1;
 8001abc:	4b38      	ldr	r3, [pc, #224]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	701a      	strb	r2, [r3, #0]
				}

				if (time_count - previous_time == 3) { //10
 8001ac2:	4b33      	ldr	r3, [pc, #204]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b36      	ldr	r3, [pc, #216]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d107      	bne.n	8001ae6 <HAL_TIM_PeriodElapsedCallback+0x206>
					previous_time = time_count;
 8001ad6:	4b2e      	ldr	r3, [pc, #184]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001ade:	701a      	strb	r2, [r3, #0]
					UART_flag = 1;
 8001ae0:	4b31      	ldr	r3, [pc, #196]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	701a      	strb	r2, [r3, #0]
				}

				if (time_count == 54) { //3600
 8001ae6:	4b2a      	ldr	r3, [pc, #168]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b36      	cmp	r3, #54	; 0x36
 8001aee:	f040 811a 	bne.w	8001d26 <HAL_TIM_PeriodElapsedCallback+0x446>
					if (TempSET3_count == 7) {
 8001af2:	4b34      	ldr	r3, [pc, #208]	; (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b07      	cmp	r3, #7
 8001afa:	d10c      	bne.n	8001b16 <HAL_TIM_PeriodElapsedCallback+0x236>
						Tset = TempSET4;
 8001afc:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001afe:	2203      	movs	r2, #3
 8001b00:	701a      	strb	r2, [r3, #0]
						TempSET3_count = 0;
 8001b02:	4b30      	ldr	r3, [pc, #192]	; (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
						previous_time = 0;
 8001b08:	4b26      	ldr	r3, [pc, #152]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
						time_count = 0;
 8001b0e:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
						break;
 8001b14:	e10c      	b.n	8001d30 <HAL_TIM_PeriodElapsedCallback+0x450>
					}

					TempSET3_count++; // 1h = 3600
 8001b16:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	4b28      	ldr	r3, [pc, #160]	; (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001b22:	701a      	strb	r2, [r3, #0]
					previous_time = 0;
 8001b24:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
					time_count = 0;
 8001b2a:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]

					// ----------Command to set PID---------
					// Decreasing 12C after 1h
					Setpoint -= 12;
 8001b30:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4922      	ldr	r1, [pc, #136]	; (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff f81a 	bl	8000b70 <__aeabi_fsub>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001b42:	601a      	str	r2, [r3, #0]
					if (Setpoint < MIN_TEMP) Setpoint = MIN_TEMP;
 8001b44:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	491f      	ldr	r1, [pc, #124]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fab8 	bl	80010c0 <__aeabi_fcmplt>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d100      	bne.n	8001b58 <HAL_TIM_PeriodElapsedCallback+0x278>
				}
				break;
 8001b56:	e0e6      	b.n	8001d26 <HAL_TIM_PeriodElapsedCallback+0x446>
					if (Setpoint < MIN_TEMP) Setpoint = MIN_TEMP;
 8001b58:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001b5a:	4a1b      	ldr	r2, [pc, #108]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001b5c:	601a      	str	r2, [r3, #0]
				break;
 8001b5e:	e0e2      	b.n	8001d26 <HAL_TIM_PeriodElapsedCallback+0x446>

			case TempSET4:
				SETT = 4;
 8001b60:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001b62:	2204      	movs	r2, #4
 8001b64:	701a      	strb	r2, [r3, #0]

				if (time_count < 54) { //3600
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b35      	cmp	r3, #53	; 0x35
 8001b6e:	d82d      	bhi.n	8001bcc <HAL_TIM_PeriodElapsedCallback+0x2ec>
					// Holding the temperature at 550C in 1h
					PID_Output = PID_Controller();
 8001b70:	f7ff fb80 	bl	8001274 <PID_Controller>
 8001b74:	60f8      	str	r0, [r7, #12]
					Steps2Move = PID2STEPS(PID_Output);
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f7ff fbfa 	bl	8001370 <PID2STEPS>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001b82:	701a      	strb	r2, [r3, #0]
//					Simulate_Temperature(PID_Output);
					Stepper_flag = 1;
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	701a      	strb	r2, [r3, #0]
 8001b8a:	e032      	b.n	8001bf2 <HAL_TIM_PeriodElapsedCallback+0x312>
 8001b8c:	20000208 	.word	0x20000208
 8001b90:	200002c9 	.word	0x200002c9
 8001b94:	20000338 	.word	0x20000338
 8001b98:	200002cc 	.word	0x200002cc
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	2000033a 	.word	0x2000033a
 8001ba4:	200002cb 	.word	0x200002cb
 8001ba8:	2000033b 	.word	0x2000033b
 8001bac:	200002cd 	.word	0x200002cd
 8001bb0:	200002ca 	.word	0x200002ca
 8001bb4:	2000000c 	.word	0x2000000c
 8001bb8:	42040000 	.word	0x42040000
 8001bbc:	44228000 	.word	0x44228000
 8001bc0:	41400000 	.word	0x41400000
 8001bc4:	200002ce 	.word	0x200002ce
 8001bc8:	41c80000 	.word	0x41c80000
				}
				else {
					Tset = TempSET5;
 8001bcc:	4b5a      	ldr	r3, [pc, #360]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x458>)
 8001bce:	2204      	movs	r2, #4
 8001bd0:	701a      	strb	r2, [r3, #0]
					previous_time = 0;
 8001bd2:	4b5a      	ldr	r3, [pc, #360]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x45c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
					time_count = 0;
 8001bd8:	4b59      	ldr	r3, [pc, #356]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
					Setpoint -= 17;
 8001bde:	4b59      	ldr	r3, [pc, #356]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x464>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4959      	ldr	r1, [pc, #356]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe ffc3 	bl	8000b70 <__aeabi_fsub>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b55      	ldr	r3, [pc, #340]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x464>)
 8001bf0:	601a      	str	r2, [r3, #0]
				}

				if (time_count - previous_time == 3) { //10
 8001bf2:	4b53      	ldr	r3, [pc, #332]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b50      	ldr	r3, [pc, #320]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x45c>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	f040 8091 	bne.w	8001d2a <HAL_TIM_PeriodElapsedCallback+0x44a>
					previous_time = time_count;
 8001c08:	4b4d      	ldr	r3, [pc, #308]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4b4b      	ldr	r3, [pc, #300]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x45c>)
 8001c10:	701a      	strb	r2, [r3, #0]
					UART_flag = 1;
 8001c12:	4b4e      	ldr	r3, [pc, #312]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	701a      	strb	r2, [r3, #0]
				}

				break;
 8001c18:	e087      	b.n	8001d2a <HAL_TIM_PeriodElapsedCallback+0x44a>

			case TempSET5:
				SETT = 5;
 8001c1a:	4b4d      	ldr	r3, [pc, #308]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8001c1c:	2205      	movs	r2, #5
 8001c1e:	701a      	strb	r2, [r3, #0]

				if (time_count < 9) { //600
 8001c20:	4b47      	ldr	r3, [pc, #284]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d80c      	bhi.n	8001c44 <HAL_TIM_PeriodElapsedCallback+0x364>
					// Holding the temperature in 10mins
//					Get_Current_Temperature();
					PID_Output = PID_Controller();
 8001c2a:	f7ff fb23 	bl	8001274 <PID_Controller>
 8001c2e:	60f8      	str	r0, [r7, #12]
					Steps2Move = PID2STEPS(PID_Output);
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f7ff fb9d 	bl	8001370 <PID2STEPS>
 8001c36:	4603      	mov	r3, r0
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b46      	ldr	r3, [pc, #280]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8001c3c:	701a      	strb	r2, [r3, #0]
//					Simulate_Temperature(PID_Output);
					Stepper_flag = 1;
 8001c3e:	4b46      	ldr	r3, [pc, #280]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
				}

				if (time_count - previous_time == 3) { //10
 8001c44:	4b3e      	ldr	r3, [pc, #248]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4b3b      	ldr	r3, [pc, #236]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x45c>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d107      	bne.n	8001c68 <HAL_TIM_PeriodElapsedCallback+0x388>
					previous_time = time_count;
 8001c58:	4b39      	ldr	r3, [pc, #228]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4b37      	ldr	r3, [pc, #220]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x45c>)
 8001c60:	701a      	strb	r2, [r3, #0]
					UART_flag = 1;
 8001c62:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	701a      	strb	r2, [r3, #0]
				}

				if (time_count == 9) { //600
 8001c68:	4b35      	ldr	r3, [pc, #212]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b09      	cmp	r3, #9
 8001c70:	d15d      	bne.n	8001d2e <HAL_TIM_PeriodElapsedCallback+0x44e>
					if (TempSET5_count == 5) {
 8001c72:	4b3a      	ldr	r3, [pc, #232]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x47c>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b05      	cmp	r3, #5
 8001c7a:	d115      	bne.n	8001ca8 <HAL_TIM_PeriodElapsedCallback+0x3c8>
						Tset = TempSET1;
 8001c7c:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x458>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
						TempSET5_count = 0;
 8001c82:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x47c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
						previous_time = 0;
 8001c88:	4b2c      	ldr	r3, [pc, #176]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x45c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
						time_count = 0;
 8001c8e:	4b2c      	ldr	r3, [pc, #176]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
						time_hold = 0;
 8001c94:	4b32      	ldr	r3, [pc, #200]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x480>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
						TIM2_SET = 0;
 8001c9a:	4b32      	ldr	r3, [pc, #200]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x484>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
						HAL_TIM_Base_Stop_IT(&htim2);
 8001ca0:	4831      	ldr	r0, [pc, #196]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8001ca2:	f001 ffd3 	bl	8003c4c <HAL_TIM_Base_Stop_IT>
						break;
 8001ca6:	e043      	b.n	8001d30 <HAL_TIM_PeriodElapsedCallback+0x450>
					}

					time_hold += time_count;
 8001ca8:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	4b2c      	ldr	r3, [pc, #176]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x480>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	4b29      	ldr	r3, [pc, #164]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x480>)
 8001cba:	701a      	strb	r2, [r3, #0]
					if (time_hold == 54) {
 8001cbc:	4b28      	ldr	r3, [pc, #160]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x480>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b36      	cmp	r3, #54	; 0x36
 8001cc4:	d109      	bne.n	8001cda <HAL_TIM_PeriodElapsedCallback+0x3fa>
						TempSET5_count++; // 1h = 3600
 8001cc6:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x47c>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	3301      	adds	r3, #1
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x47c>)
 8001cd2:	701a      	strb	r2, [r3, #0]
						time_hold = 0;
 8001cd4:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x480>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
					}
					previous_time = 0;
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x45c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
					time_count = 0;
 8001ce0:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]

					// ----------Command to set PID---------
					// Decreasing 17C after 10mins
					Setpoint -= 17;
 8001ce6:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x464>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4917      	ldr	r1, [pc, #92]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe ff3f 	bl	8000b70 <__aeabi_fsub>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x464>)
 8001cf8:	601a      	str	r2, [r3, #0]
					if (Setpoint < MIN_TEMP) Setpoint = MIN_TEMP;
 8001cfa:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x464>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	491b      	ldr	r1, [pc, #108]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x48c>)
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff f9dd 	bl	80010c0 <__aeabi_fcmplt>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d100      	bne.n	8001d0e <HAL_TIM_PeriodElapsedCallback+0x42e>
				}
				break;
 8001d0c:	e00f      	b.n	8001d2e <HAL_TIM_PeriodElapsedCallback+0x44e>
					if (Setpoint < MIN_TEMP) Setpoint = MIN_TEMP;
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x464>)
 8001d10:	4a16      	ldr	r2, [pc, #88]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x48c>)
 8001d12:	601a      	str	r2, [r3, #0]
				break;
 8001d14:	e00b      	b.n	8001d2e <HAL_TIM_PeriodElapsedCallback+0x44e>

			default:
				///// ERROR
				break;
		}
	}
 8001d16:	bf00      	nop
 8001d18:	e00a      	b.n	8001d30 <HAL_TIM_PeriodElapsedCallback+0x450>
				break;
 8001d1a:	bf00      	nop
 8001d1c:	e008      	b.n	8001d30 <HAL_TIM_PeriodElapsedCallback+0x450>
				break;
 8001d1e:	bf00      	nop
 8001d20:	e006      	b.n	8001d30 <HAL_TIM_PeriodElapsedCallback+0x450>
				break;
 8001d22:	bf00      	nop
 8001d24:	e004      	b.n	8001d30 <HAL_TIM_PeriodElapsedCallback+0x450>
				break;
 8001d26:	bf00      	nop
 8001d28:	e002      	b.n	8001d30 <HAL_TIM_PeriodElapsedCallback+0x450>
				break;
 8001d2a:	bf00      	nop
 8001d2c:	e000      	b.n	8001d30 <HAL_TIM_PeriodElapsedCallback+0x450>
				break;
 8001d2e:	bf00      	nop

}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000338 	.word	0x20000338
 8001d3c:	200002cb 	.word	0x200002cb
 8001d40:	200002c9 	.word	0x200002c9
 8001d44:	2000000c 	.word	0x2000000c
 8001d48:	41880000 	.word	0x41880000
 8001d4c:	2000033b 	.word	0x2000033b
 8001d50:	200002cc 	.word	0x200002cc
 8001d54:	20000000 	.word	0x20000000
 8001d58:	2000033a 	.word	0x2000033a
 8001d5c:	200002cf 	.word	0x200002cf
 8001d60:	200002ca 	.word	0x200002ca
 8001d64:	200002d0 	.word	0x200002d0
 8001d68:	20000238 	.word	0x20000238
 8001d6c:	41c80000 	.word	0x41c80000

08001d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d74:	b672      	cpsid	i
}
 8001d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <Error_Handler+0x8>
	...

08001d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_MspInit+0x5c>)
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	4a14      	ldr	r2, [pc, #80]	; (8001dd8 <HAL_MspInit+0x5c>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6193      	str	r3, [r2, #24]
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_MspInit+0x5c>)
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <HAL_MspInit+0x5c>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	4a0e      	ldr	r2, [pc, #56]	; (8001dd8 <HAL_MspInit+0x5c>)
 8001da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da4:	61d3      	str	r3, [r2, #28]
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <HAL_MspInit+0x5c>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_MspInit+0x60>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <HAL_MspInit+0x60>)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40010000 	.word	0x40010000

08001de0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 0310 	add.w	r3, r7, #16
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a18      	ldr	r2, [pc, #96]	; (8001e5c <HAL_ADC_MspInit+0x7c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d129      	bne.n	8001e54 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e00:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_ADC_MspInit+0x80>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	4a16      	ldr	r2, [pc, #88]	; (8001e60 <HAL_ADC_MspInit+0x80>)
 8001e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e0a:	6193      	str	r3, [r2, #24]
 8001e0c:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <HAL_ADC_MspInit+0x80>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <HAL_ADC_MspInit+0x80>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	4a10      	ldr	r2, [pc, #64]	; (8001e60 <HAL_ADC_MspInit+0x80>)
 8001e1e:	f043 0304 	orr.w	r3, r3, #4
 8001e22:	6193      	str	r3, [r2, #24]
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <HAL_ADC_MspInit+0x80>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e30:	2304      	movs	r3, #4
 8001e32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e34:	2303      	movs	r3, #3
 8001e36:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e38:	f107 0310 	add.w	r3, r7, #16
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4809      	ldr	r0, [pc, #36]	; (8001e64 <HAL_ADC_MspInit+0x84>)
 8001e40:	f001 f800 	bl	8002e44 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001e44:	2200      	movs	r2, #0
 8001e46:	2100      	movs	r1, #0
 8001e48:	2012      	movs	r0, #18
 8001e4a:	f000 ff12 	bl	8002c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001e4e:	2012      	movs	r0, #18
 8001e50:	f000 ff2b 	bl	8002caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e54:	bf00      	nop
 8001e56:	3720      	adds	r7, #32
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40012400 	.word	0x40012400
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40010800 	.word	0x40010800

08001e68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e78:	d113      	bne.n	8001ea2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <HAL_TIM_Base_MspInit+0x44>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <HAL_TIM_Base_MspInit+0x44>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	61d3      	str	r3, [r2, #28]
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_TIM_Base_MspInit+0x44>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2102      	movs	r1, #2
 8001e96:	201c      	movs	r0, #28
 8001e98:	f000 feeb 	bl	8002c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e9c:	201c      	movs	r0, #28
 8001e9e:	f000 ff04 	bl	8002caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000

08001eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 0310 	add.w	r3, r7, #16
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a20      	ldr	r2, [pc, #128]	; (8001f4c <HAL_UART_MspInit+0x9c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d139      	bne.n	8001f44 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ed0:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <HAL_UART_MspInit+0xa0>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	4a1e      	ldr	r2, [pc, #120]	; (8001f50 <HAL_UART_MspInit+0xa0>)
 8001ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eda:	6193      	str	r3, [r2, #24]
 8001edc:	4b1c      	ldr	r3, [pc, #112]	; (8001f50 <HAL_UART_MspInit+0xa0>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee8:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <HAL_UART_MspInit+0xa0>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	4a18      	ldr	r2, [pc, #96]	; (8001f50 <HAL_UART_MspInit+0xa0>)
 8001eee:	f043 0304 	orr.w	r3, r3, #4
 8001ef2:	6193      	str	r3, [r2, #24]
 8001ef4:	4b16      	ldr	r3, [pc, #88]	; (8001f50 <HAL_UART_MspInit+0xa0>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0e:	f107 0310 	add.w	r3, r7, #16
 8001f12:	4619      	mov	r1, r3
 8001f14:	480f      	ldr	r0, [pc, #60]	; (8001f54 <HAL_UART_MspInit+0xa4>)
 8001f16:	f000 ff95 	bl	8002e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f28:	f107 0310 	add.w	r3, r7, #16
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4809      	ldr	r0, [pc, #36]	; (8001f54 <HAL_UART_MspInit+0xa4>)
 8001f30:	f000 ff88 	bl	8002e44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001f34:	2200      	movs	r2, #0
 8001f36:	2101      	movs	r1, #1
 8001f38:	2025      	movs	r0, #37	; 0x25
 8001f3a:	f000 fe9a 	bl	8002c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f3e:	2025      	movs	r0, #37	; 0x25
 8001f40:	f000 feb3 	bl	8002caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f44:	bf00      	nop
 8001f46:	3720      	adds	r7, #32
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40013800 	.word	0x40013800
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40010800 	.word	0x40010800

08001f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f5c:	e7fe      	b.n	8001f5c <NMI_Handler+0x4>

08001f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f62:	e7fe      	b.n	8001f62 <HardFault_Handler+0x4>

08001f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <MemManage_Handler+0x4>

08001f6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f6e:	e7fe      	b.n	8001f6e <BusFault_Handler+0x4>

08001f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f74:	e7fe      	b.n	8001f74 <UsageFault_Handler+0x4>

08001f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr

08001f82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr

08001f8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr

08001f9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f9e:	f000 f953 	bl	8002248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001fac:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <ADC1_2_IRQHandler+0x10>)
 8001fae:	f000 fb25 	bl	80025fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000208 	.word	0x20000208

08001fbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fc0:	4802      	ldr	r0, [pc, #8]	; (8001fcc <TIM2_IRQHandler+0x10>)
 8001fc2:	f001 fe71 	bl	8003ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000238 	.word	0x20000238

08001fd0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fd4:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <USART1_IRQHandler+0x10>)
 8001fd6:	f002 fab7 	bl	8004548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000280 	.word	0x20000280

08001fe4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
	return 1;
 8001fe8:	2301      	movs	r3, #1
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr

08001ff2 <_kill>:

int _kill(int pid, int sig)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ffc:	f003 f80e 	bl	800501c <__errno>
 8002000:	4603      	mov	r3, r0
 8002002:	2216      	movs	r2, #22
 8002004:	601a      	str	r2, [r3, #0]
	return -1;
 8002006:	f04f 33ff 	mov.w	r3, #4294967295
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <_exit>:

void _exit (int status)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800201a:	f04f 31ff 	mov.w	r1, #4294967295
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ffe7 	bl	8001ff2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002024:	e7fe      	b.n	8002024 <_exit+0x12>

08002026 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b086      	sub	sp, #24
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	e00a      	b.n	800204e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002038:	f3af 8000 	nop.w
 800203c:	4601      	mov	r1, r0
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	60ba      	str	r2, [r7, #8]
 8002044:	b2ca      	uxtb	r2, r1
 8002046:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	3301      	adds	r3, #1
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	429a      	cmp	r2, r3
 8002054:	dbf0      	blt.n	8002038 <_read+0x12>
	}

return len;
 8002056:	687b      	ldr	r3, [r7, #4]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	e009      	b.n	8002086 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	1c5a      	adds	r2, r3, #1
 8002076:	60ba      	str	r2, [r7, #8]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	3301      	adds	r3, #1
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	429a      	cmp	r2, r3
 800208c:	dbf1      	blt.n	8002072 <_write+0x12>
	}
	return len;
 800208e:	687b      	ldr	r3, [r7, #4]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <_close>:

int _close(int file)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	return -1;
 80020a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr

080020ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020be:	605a      	str	r2, [r3, #4]
	return 0;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <_isatty>:

int _isatty(int file)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	return 1;
 80020d4:	2301      	movs	r3, #1
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
	return 0;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002100:	4a14      	ldr	r2, [pc, #80]	; (8002154 <_sbrk+0x5c>)
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <_sbrk+0x60>)
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800210c:	4b13      	ldr	r3, [pc, #76]	; (800215c <_sbrk+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <_sbrk+0x64>)
 8002116:	4a12      	ldr	r2, [pc, #72]	; (8002160 <_sbrk+0x68>)
 8002118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <_sbrk+0x64>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	429a      	cmp	r2, r3
 8002126:	d207      	bcs.n	8002138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002128:	f002 ff78 	bl	800501c <__errno>
 800212c:	4603      	mov	r3, r0
 800212e:	220c      	movs	r2, #12
 8002130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
 8002136:	e009      	b.n	800214c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <_sbrk+0x64>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	4a05      	ldr	r2, [pc, #20]	; (800215c <_sbrk+0x64>)
 8002148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800214a:	68fb      	ldr	r3, [r7, #12]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20005000 	.word	0x20005000
 8002158:	00000400 	.word	0x00000400
 800215c:	200003c4 	.word	0x200003c4
 8002160:	200003e0 	.word	0x200003e0

08002164 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002170:	f7ff fff8 	bl	8002164 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002174:	480b      	ldr	r0, [pc, #44]	; (80021a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002176:	490c      	ldr	r1, [pc, #48]	; (80021a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002178:	4a0c      	ldr	r2, [pc, #48]	; (80021ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800217a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800217c:	e002      	b.n	8002184 <LoopCopyDataInit>

0800217e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800217e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002182:	3304      	adds	r3, #4

08002184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002188:	d3f9      	bcc.n	800217e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218a:	4a09      	ldr	r2, [pc, #36]	; (80021b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800218c:	4c09      	ldr	r4, [pc, #36]	; (80021b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002190:	e001      	b.n	8002196 <LoopFillZerobss>

08002192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002194:	3204      	adds	r2, #4

08002196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002198:	d3fb      	bcc.n	8002192 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800219a:	f002 ff45 	bl	8005028 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800219e:	f7ff f97f 	bl	80014a0 <main>
  bx lr
 80021a2:	4770      	bx	lr
  ldr r0, =_sdata
 80021a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80021ac:	080082b4 	.word	0x080082b4
  ldr r2, =_sbss
 80021b0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80021b4:	200003dc 	.word	0x200003dc

080021b8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021b8:	e7fe      	b.n	80021b8 <CAN1_RX1_IRQHandler>
	...

080021bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c0:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <HAL_Init+0x28>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <HAL_Init+0x28>)
 80021c6:	f043 0310 	orr.w	r3, r3, #16
 80021ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021cc:	2003      	movs	r0, #3
 80021ce:	f000 fd45 	bl	8002c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d2:	200f      	movs	r0, #15
 80021d4:	f000 f808 	bl	80021e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d8:	f7ff fdd0 	bl	8001d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40022000 	.word	0x40022000

080021e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <HAL_InitTick+0x54>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_InitTick+0x58>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	4619      	mov	r1, r3
 80021fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002202:	fbb2 f3f3 	udiv	r3, r2, r3
 8002206:	4618      	mov	r0, r3
 8002208:	f000 fd5d 	bl	8002cc6 <HAL_SYSTICK_Config>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e00e      	b.n	8002234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b0f      	cmp	r3, #15
 800221a:	d80a      	bhi.n	8002232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800221c:	2200      	movs	r2, #0
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	f04f 30ff 	mov.w	r0, #4294967295
 8002224:	f000 fd25 	bl	8002c72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002228:	4a06      	ldr	r2, [pc, #24]	; (8002244 <HAL_InitTick+0x5c>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	e000      	b.n	8002234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000010 	.word	0x20000010
 8002240:	20000018 	.word	0x20000018
 8002244:	20000014 	.word	0x20000014

08002248 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <HAL_IncTick+0x1c>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_IncTick+0x20>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4413      	add	r3, r2
 8002258:	4a03      	ldr	r2, [pc, #12]	; (8002268 <HAL_IncTick+0x20>)
 800225a:	6013      	str	r3, [r2, #0]
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	20000018 	.word	0x20000018
 8002268:	200003c8 	.word	0x200003c8

0800226c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return uwTick;
 8002270:	4b02      	ldr	r3, [pc, #8]	; (800227c <HAL_GetTick+0x10>)
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	200003c8 	.word	0x200003c8

08002280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002288:	f7ff fff0 	bl	800226c <HAL_GetTick>
 800228c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002298:	d005      	beq.n	80022a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <HAL_Delay+0x44>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4413      	add	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022a6:	bf00      	nop
 80022a8:	f7ff ffe0 	bl	800226c <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d8f7      	bhi.n	80022a8 <HAL_Delay+0x28>
  {
  }
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000018 	.word	0x20000018

080022c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e0be      	b.n	8002468 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d109      	bne.n	800230c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff fd6a 	bl	8001de0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 fb8f 	bl	8002a30 <ADC_ConversionStop_Disable>
 8002312:	4603      	mov	r3, r0
 8002314:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	f040 8099 	bne.w	8002456 <HAL_ADC_Init+0x18e>
 8002324:	7dfb      	ldrb	r3, [r7, #23]
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 8095 	bne.w	8002456 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002334:	f023 0302 	bic.w	r3, r3, #2
 8002338:	f043 0202 	orr.w	r2, r3, #2
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002348:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	7b1b      	ldrb	r3, [r3, #12]
 800234e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002350:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	4313      	orrs	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002360:	d003      	beq.n	800236a <HAL_ADC_Init+0xa2>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d102      	bne.n	8002370 <HAL_ADC_Init+0xa8>
 800236a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800236e:	e000      	b.n	8002372 <HAL_ADC_Init+0xaa>
 8002370:	2300      	movs	r3, #0
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	7d1b      	ldrb	r3, [r3, #20]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d119      	bne.n	80023b4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	7b1b      	ldrb	r3, [r3, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d109      	bne.n	800239c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	3b01      	subs	r3, #1
 800238e:	035a      	lsls	r2, r3, #13
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	e00b      	b.n	80023b4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	f043 0220 	orr.w	r2, r3, #32
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	f043 0201 	orr.w	r2, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	4b28      	ldr	r3, [pc, #160]	; (8002470 <HAL_ADC_Init+0x1a8>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	68b9      	ldr	r1, [r7, #8]
 80023d8:	430b      	orrs	r3, r1
 80023da:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023e4:	d003      	beq.n	80023ee <HAL_ADC_Init+0x126>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d104      	bne.n	80023f8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	051b      	lsls	r3, r3, #20
 80023f6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	430a      	orrs	r2, r1
 800240a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	4b18      	ldr	r3, [pc, #96]	; (8002474 <HAL_ADC_Init+0x1ac>)
 8002414:	4013      	ands	r3, r2
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	429a      	cmp	r2, r3
 800241a:	d10b      	bne.n	8002434 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	f023 0303 	bic.w	r3, r3, #3
 800242a:	f043 0201 	orr.w	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002432:	e018      	b.n	8002466 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	f023 0312 	bic.w	r3, r3, #18
 800243c:	f043 0210 	orr.w	r2, r3, #16
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	f043 0201 	orr.w	r2, r3, #1
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002454:	e007      	b.n	8002466 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245a:	f043 0210 	orr.w	r2, r3, #16
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002466:	7dfb      	ldrb	r3, [r7, #23]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	ffe1f7fd 	.word	0xffe1f7fd
 8002474:	ff1f0efe 	.word	0xff1f0efe

08002478 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_ADC_Start_IT+0x1a>
 800248e:	2302      	movs	r3, #2
 8002490:	e0a0      	b.n	80025d4 <HAL_ADC_Start_IT+0x15c>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fa6e 	bl	800297c <ADC_Enable>
 80024a0:	4603      	mov	r3, r0
 80024a2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f040 808f 	bne.w	80025ca <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024b4:	f023 0301 	bic.w	r3, r3, #1
 80024b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a45      	ldr	r2, [pc, #276]	; (80025dc <HAL_ADC_Start_IT+0x164>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d105      	bne.n	80024d6 <HAL_ADC_Start_IT+0x5e>
 80024ca:	4b45      	ldr	r3, [pc, #276]	; (80025e0 <HAL_ADC_Start_IT+0x168>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d115      	bne.n	8002502 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d026      	beq.n	800253e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002500:	e01d      	b.n	800253e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002506:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a33      	ldr	r2, [pc, #204]	; (80025e0 <HAL_ADC_Start_IT+0x168>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d004      	beq.n	8002522 <HAL_ADC_Start_IT+0xaa>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a2f      	ldr	r2, [pc, #188]	; (80025dc <HAL_ADC_Start_IT+0x164>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d10d      	bne.n	800253e <HAL_ADC_Start_IT+0xc6>
 8002522:	4b2f      	ldr	r3, [pc, #188]	; (80025e0 <HAL_ADC_Start_IT+0x168>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252a:	2b00      	cmp	r3, #0
 800252c:	d007      	beq.n	800253e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002532:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002536:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d006      	beq.n	8002558 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	f023 0206 	bic.w	r2, r3, #6
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	62da      	str	r2, [r3, #44]	; 0x2c
 8002556:	e002      	b.n	800255e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f06f 0202 	mvn.w	r2, #2
 800256e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0220 	orr.w	r2, r2, #32
 800257e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800258a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800258e:	d113      	bne.n	80025b8 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002594:	4a11      	ldr	r2, [pc, #68]	; (80025dc <HAL_ADC_Start_IT+0x164>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d105      	bne.n	80025a6 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800259a:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <HAL_ADC_Start_IT+0x168>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d108      	bne.n	80025b8 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80025b4:	609a      	str	r2, [r3, #8]
 80025b6:	e00c      	b.n	80025d2 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	e003      	b.n	80025d2 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40012800 	.word	0x40012800
 80025e0:	40012400 	.word	0x40012400

080025e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f003 0320 	and.w	r3, r3, #32
 800261a:	2b00      	cmp	r3, #0
 800261c:	d03e      	beq.n	800269c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d039      	beq.n	800269c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	2b00      	cmp	r3, #0
 8002632:	d105      	bne.n	8002640 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800264a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800264e:	d11d      	bne.n	800268c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002654:	2b00      	cmp	r3, #0
 8002656:	d119      	bne.n	800268c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0220 	bic.w	r2, r2, #32
 8002666:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d105      	bne.n	800268c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	f043 0201 	orr.w	r2, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff f8d5 	bl	800183c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f06f 0212 	mvn.w	r2, #18
 800269a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d04d      	beq.n	8002742 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d048      	beq.n	8002742 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d105      	bne.n	80026c8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80026d2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80026d6:	d012      	beq.n	80026fe <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d125      	bne.n	8002732 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80026f0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80026f4:	d11d      	bne.n	8002732 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d119      	bne.n	8002732 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800270c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002712:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d105      	bne.n	8002732 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	f043 0201 	orr.w	r2, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f9bd 	bl	8002ab2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 020c 	mvn.w	r2, #12
 8002740:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002748:	2b00      	cmp	r3, #0
 800274a:	d012      	beq.n	8002772 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00d      	beq.n	8002772 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f809 	bl	800277a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f06f 0201 	mvn.w	r2, #1
 8002770:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002772:	bf00      	nop
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x20>
 80027a8:	2302      	movs	r3, #2
 80027aa:	e0dc      	b.n	8002966 <HAL_ADC_ConfigChannel+0x1da>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b06      	cmp	r3, #6
 80027ba:	d81c      	bhi.n	80027f6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	3b05      	subs	r3, #5
 80027ce:	221f      	movs	r2, #31
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	4019      	ands	r1, r3
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	6818      	ldr	r0, [r3, #0]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	3b05      	subs	r3, #5
 80027e8:	fa00 f203 	lsl.w	r2, r0, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	635a      	str	r2, [r3, #52]	; 0x34
 80027f4:	e03c      	b.n	8002870 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b0c      	cmp	r3, #12
 80027fc:	d81c      	bhi.n	8002838 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	3b23      	subs	r3, #35	; 0x23
 8002810:	221f      	movs	r2, #31
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	4019      	ands	r1, r3
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	3b23      	subs	r3, #35	; 0x23
 800282a:	fa00 f203 	lsl.w	r2, r0, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	631a      	str	r2, [r3, #48]	; 0x30
 8002836:	e01b      	b.n	8002870 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	3b41      	subs	r3, #65	; 0x41
 800284a:	221f      	movs	r2, #31
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	4019      	ands	r1, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	3b41      	subs	r3, #65	; 0x41
 8002864:	fa00 f203 	lsl.w	r2, r0, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b09      	cmp	r3, #9
 8002876:	d91c      	bls.n	80028b2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68d9      	ldr	r1, [r3, #12]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	3b1e      	subs	r3, #30
 800288a:	2207      	movs	r2, #7
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	4019      	ands	r1, r3
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	6898      	ldr	r0, [r3, #8]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	3b1e      	subs	r3, #30
 80028a4:	fa00 f203 	lsl.w	r2, r0, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	60da      	str	r2, [r3, #12]
 80028b0:	e019      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6919      	ldr	r1, [r3, #16]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4613      	mov	r3, r2
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	4413      	add	r3, r2
 80028c2:	2207      	movs	r2, #7
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	4019      	ands	r1, r3
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	6898      	ldr	r0, [r3, #8]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4613      	mov	r3, r2
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	4413      	add	r3, r2
 80028da:	fa00 f203 	lsl.w	r2, r0, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b10      	cmp	r3, #16
 80028ec:	d003      	beq.n	80028f6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028f2:	2b11      	cmp	r3, #17
 80028f4:	d132      	bne.n	800295c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a1d      	ldr	r2, [pc, #116]	; (8002970 <HAL_ADC_ConfigChannel+0x1e4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d125      	bne.n	800294c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d126      	bne.n	800295c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800291c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b10      	cmp	r3, #16
 8002924:	d11a      	bne.n	800295c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002926:	4b13      	ldr	r3, [pc, #76]	; (8002974 <HAL_ADC_ConfigChannel+0x1e8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a13      	ldr	r2, [pc, #76]	; (8002978 <HAL_ADC_ConfigChannel+0x1ec>)
 800292c:	fba2 2303 	umull	r2, r3, r2, r3
 8002930:	0c9a      	lsrs	r2, r3, #18
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800293c:	e002      	b.n	8002944 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	3b01      	subs	r3, #1
 8002942:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f9      	bne.n	800293e <HAL_ADC_ConfigChannel+0x1b2>
 800294a:	e007      	b.n	800295c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002950:	f043 0220 	orr.w	r2, r3, #32
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002964:	7bfb      	ldrb	r3, [r7, #15]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr
 8002970:	40012400 	.word	0x40012400
 8002974:	20000010 	.word	0x20000010
 8002978:	431bde83 	.word	0x431bde83

0800297c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b01      	cmp	r3, #1
 8002998:	d040      	beq.n	8002a1c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0201 	orr.w	r2, r2, #1
 80029a8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029aa:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <ADC_Enable+0xac>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a1f      	ldr	r2, [pc, #124]	; (8002a2c <ADC_Enable+0xb0>)
 80029b0:	fba2 2303 	umull	r2, r3, r2, r3
 80029b4:	0c9b      	lsrs	r3, r3, #18
 80029b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029b8:	e002      	b.n	80029c0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	3b01      	subs	r3, #1
 80029be:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f9      	bne.n	80029ba <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029c6:	f7ff fc51 	bl	800226c <HAL_GetTick>
 80029ca:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80029cc:	e01f      	b.n	8002a0e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029ce:	f7ff fc4d 	bl	800226c <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d918      	bls.n	8002a0e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d011      	beq.n	8002a0e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	f043 0210 	orr.w	r2, r3, #16
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fa:	f043 0201 	orr.w	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e007      	b.n	8002a1e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d1d8      	bne.n	80029ce <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20000010 	.word	0x20000010
 8002a2c:	431bde83 	.word	0x431bde83

08002a30 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d12e      	bne.n	8002aa8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0201 	bic.w	r2, r2, #1
 8002a58:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a5a:	f7ff fc07 	bl	800226c <HAL_GetTick>
 8002a5e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a60:	e01b      	b.n	8002a9a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a62:	f7ff fc03 	bl	800226c <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d914      	bls.n	8002a9a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d10d      	bne.n	8002a9a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	f043 0210 	orr.w	r2, r3, #16
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	f043 0201 	orr.w	r2, r3, #1
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e007      	b.n	8002aaa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d0dc      	beq.n	8002a62 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002af6:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <__NVIC_SetPriorityGrouping+0x44>)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	60d3      	str	r3, [r2, #12]
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <__NVIC_GetPriorityGrouping+0x18>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	0a1b      	lsrs	r3, r3, #8
 8002b16:	f003 0307 	and.w	r3, r3, #7
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	db0b      	blt.n	8002b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	f003 021f 	and.w	r2, r3, #31
 8002b40:	4906      	ldr	r1, [pc, #24]	; (8002b5c <__NVIC_EnableIRQ+0x34>)
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	2001      	movs	r0, #1
 8002b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr
 8002b5c:	e000e100 	.word	0xe000e100

08002b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	6039      	str	r1, [r7, #0]
 8002b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	db0a      	blt.n	8002b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	490c      	ldr	r1, [pc, #48]	; (8002bac <__NVIC_SetPriority+0x4c>)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	0112      	lsls	r2, r2, #4
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	440b      	add	r3, r1
 8002b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b88:	e00a      	b.n	8002ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	4908      	ldr	r1, [pc, #32]	; (8002bb0 <__NVIC_SetPriority+0x50>)
 8002b90:	79fb      	ldrb	r3, [r7, #7]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	3b04      	subs	r3, #4
 8002b98:	0112      	lsls	r2, r2, #4
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	761a      	strb	r2, [r3, #24]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	e000e100 	.word	0xe000e100
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b089      	sub	sp, #36	; 0x24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f1c3 0307 	rsb	r3, r3, #7
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	bf28      	it	cs
 8002bd2:	2304      	movcs	r3, #4
 8002bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	2b06      	cmp	r3, #6
 8002bdc:	d902      	bls.n	8002be4 <NVIC_EncodePriority+0x30>
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3b03      	subs	r3, #3
 8002be2:	e000      	b.n	8002be6 <NVIC_EncodePriority+0x32>
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43da      	mvns	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	fa01 f303 	lsl.w	r3, r1, r3
 8002c06:	43d9      	mvns	r1, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c0c:	4313      	orrs	r3, r2
         );
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3724      	adds	r7, #36	; 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c28:	d301      	bcc.n	8002c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e00f      	b.n	8002c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c2e:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <SysTick_Config+0x40>)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c36:	210f      	movs	r1, #15
 8002c38:	f04f 30ff 	mov.w	r0, #4294967295
 8002c3c:	f7ff ff90 	bl	8002b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <SysTick_Config+0x40>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c46:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <SysTick_Config+0x40>)
 8002c48:	2207      	movs	r2, #7
 8002c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	e000e010 	.word	0xe000e010

08002c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7ff ff2d 	bl	8002ac4 <__NVIC_SetPriorityGrouping>
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b086      	sub	sp, #24
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	4603      	mov	r3, r0
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	607a      	str	r2, [r7, #4]
 8002c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c84:	f7ff ff42 	bl	8002b0c <__NVIC_GetPriorityGrouping>
 8002c88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	6978      	ldr	r0, [r7, #20]
 8002c90:	f7ff ff90 	bl	8002bb4 <NVIC_EncodePriority>
 8002c94:	4602      	mov	r2, r0
 8002c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff ff5f 	bl	8002b60 <__NVIC_SetPriority>
}
 8002ca2:	bf00      	nop
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff35 	bl	8002b28 <__NVIC_EnableIRQ>
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff ffa2 	bl	8002c18 <SysTick_Config>
 8002cd4:	4603      	mov	r3, r0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b085      	sub	sp, #20
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d008      	beq.n	8002d08 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e020      	b.n	8002d4a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 020e 	bic.w	r2, r2, #14
 8002d16:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0201 	bic.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d30:	2101      	movs	r1, #1
 8002d32:	fa01 f202 	lsl.w	r2, r1, r2
 8002d36:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr

08002d54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d005      	beq.n	8002d78 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2204      	movs	r2, #4
 8002d70:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	73fb      	strb	r3, [r7, #15]
 8002d76:	e051      	b.n	8002e1c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 020e 	bic.w	r2, r2, #14
 8002d86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0201 	bic.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a22      	ldr	r2, [pc, #136]	; (8002e28 <HAL_DMA_Abort_IT+0xd4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d029      	beq.n	8002df6 <HAL_DMA_Abort_IT+0xa2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a21      	ldr	r2, [pc, #132]	; (8002e2c <HAL_DMA_Abort_IT+0xd8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d022      	beq.n	8002df2 <HAL_DMA_Abort_IT+0x9e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a1f      	ldr	r2, [pc, #124]	; (8002e30 <HAL_DMA_Abort_IT+0xdc>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d01a      	beq.n	8002dec <HAL_DMA_Abort_IT+0x98>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a1e      	ldr	r2, [pc, #120]	; (8002e34 <HAL_DMA_Abort_IT+0xe0>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d012      	beq.n	8002de6 <HAL_DMA_Abort_IT+0x92>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a1c      	ldr	r2, [pc, #112]	; (8002e38 <HAL_DMA_Abort_IT+0xe4>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00a      	beq.n	8002de0 <HAL_DMA_Abort_IT+0x8c>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a1b      	ldr	r2, [pc, #108]	; (8002e3c <HAL_DMA_Abort_IT+0xe8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d102      	bne.n	8002dda <HAL_DMA_Abort_IT+0x86>
 8002dd4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002dd8:	e00e      	b.n	8002df8 <HAL_DMA_Abort_IT+0xa4>
 8002dda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dde:	e00b      	b.n	8002df8 <HAL_DMA_Abort_IT+0xa4>
 8002de0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002de4:	e008      	b.n	8002df8 <HAL_DMA_Abort_IT+0xa4>
 8002de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dea:	e005      	b.n	8002df8 <HAL_DMA_Abort_IT+0xa4>
 8002dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002df0:	e002      	b.n	8002df8 <HAL_DMA_Abort_IT+0xa4>
 8002df2:	2310      	movs	r3, #16
 8002df4:	e000      	b.n	8002df8 <HAL_DMA_Abort_IT+0xa4>
 8002df6:	2301      	movs	r3, #1
 8002df8:	4a11      	ldr	r2, [pc, #68]	; (8002e40 <HAL_DMA_Abort_IT+0xec>)
 8002dfa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	4798      	blx	r3
    } 
  }
  return status;
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40020008 	.word	0x40020008
 8002e2c:	4002001c 	.word	0x4002001c
 8002e30:	40020030 	.word	0x40020030
 8002e34:	40020044 	.word	0x40020044
 8002e38:	40020058 	.word	0x40020058
 8002e3c:	4002006c 	.word	0x4002006c
 8002e40:	40020000 	.word	0x40020000

08002e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b08b      	sub	sp, #44	; 0x2c
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e52:	2300      	movs	r3, #0
 8002e54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e56:	e169      	b.n	800312c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e58:	2201      	movs	r2, #1
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	f040 8158 	bne.w	8003126 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	4a9a      	ldr	r2, [pc, #616]	; (80030e4 <HAL_GPIO_Init+0x2a0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d05e      	beq.n	8002f3e <HAL_GPIO_Init+0xfa>
 8002e80:	4a98      	ldr	r2, [pc, #608]	; (80030e4 <HAL_GPIO_Init+0x2a0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d875      	bhi.n	8002f72 <HAL_GPIO_Init+0x12e>
 8002e86:	4a98      	ldr	r2, [pc, #608]	; (80030e8 <HAL_GPIO_Init+0x2a4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d058      	beq.n	8002f3e <HAL_GPIO_Init+0xfa>
 8002e8c:	4a96      	ldr	r2, [pc, #600]	; (80030e8 <HAL_GPIO_Init+0x2a4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d86f      	bhi.n	8002f72 <HAL_GPIO_Init+0x12e>
 8002e92:	4a96      	ldr	r2, [pc, #600]	; (80030ec <HAL_GPIO_Init+0x2a8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d052      	beq.n	8002f3e <HAL_GPIO_Init+0xfa>
 8002e98:	4a94      	ldr	r2, [pc, #592]	; (80030ec <HAL_GPIO_Init+0x2a8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d869      	bhi.n	8002f72 <HAL_GPIO_Init+0x12e>
 8002e9e:	4a94      	ldr	r2, [pc, #592]	; (80030f0 <HAL_GPIO_Init+0x2ac>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d04c      	beq.n	8002f3e <HAL_GPIO_Init+0xfa>
 8002ea4:	4a92      	ldr	r2, [pc, #584]	; (80030f0 <HAL_GPIO_Init+0x2ac>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d863      	bhi.n	8002f72 <HAL_GPIO_Init+0x12e>
 8002eaa:	4a92      	ldr	r2, [pc, #584]	; (80030f4 <HAL_GPIO_Init+0x2b0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d046      	beq.n	8002f3e <HAL_GPIO_Init+0xfa>
 8002eb0:	4a90      	ldr	r2, [pc, #576]	; (80030f4 <HAL_GPIO_Init+0x2b0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d85d      	bhi.n	8002f72 <HAL_GPIO_Init+0x12e>
 8002eb6:	2b12      	cmp	r3, #18
 8002eb8:	d82a      	bhi.n	8002f10 <HAL_GPIO_Init+0xcc>
 8002eba:	2b12      	cmp	r3, #18
 8002ebc:	d859      	bhi.n	8002f72 <HAL_GPIO_Init+0x12e>
 8002ebe:	a201      	add	r2, pc, #4	; (adr r2, 8002ec4 <HAL_GPIO_Init+0x80>)
 8002ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec4:	08002f3f 	.word	0x08002f3f
 8002ec8:	08002f19 	.word	0x08002f19
 8002ecc:	08002f2b 	.word	0x08002f2b
 8002ed0:	08002f6d 	.word	0x08002f6d
 8002ed4:	08002f73 	.word	0x08002f73
 8002ed8:	08002f73 	.word	0x08002f73
 8002edc:	08002f73 	.word	0x08002f73
 8002ee0:	08002f73 	.word	0x08002f73
 8002ee4:	08002f73 	.word	0x08002f73
 8002ee8:	08002f73 	.word	0x08002f73
 8002eec:	08002f73 	.word	0x08002f73
 8002ef0:	08002f73 	.word	0x08002f73
 8002ef4:	08002f73 	.word	0x08002f73
 8002ef8:	08002f73 	.word	0x08002f73
 8002efc:	08002f73 	.word	0x08002f73
 8002f00:	08002f73 	.word	0x08002f73
 8002f04:	08002f73 	.word	0x08002f73
 8002f08:	08002f21 	.word	0x08002f21
 8002f0c:	08002f35 	.word	0x08002f35
 8002f10:	4a79      	ldr	r2, [pc, #484]	; (80030f8 <HAL_GPIO_Init+0x2b4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d013      	beq.n	8002f3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f16:	e02c      	b.n	8002f72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	623b      	str	r3, [r7, #32]
          break;
 8002f1e:	e029      	b.n	8002f74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	3304      	adds	r3, #4
 8002f26:	623b      	str	r3, [r7, #32]
          break;
 8002f28:	e024      	b.n	8002f74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	3308      	adds	r3, #8
 8002f30:	623b      	str	r3, [r7, #32]
          break;
 8002f32:	e01f      	b.n	8002f74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	330c      	adds	r3, #12
 8002f3a:	623b      	str	r3, [r7, #32]
          break;
 8002f3c:	e01a      	b.n	8002f74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d102      	bne.n	8002f4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f46:	2304      	movs	r3, #4
 8002f48:	623b      	str	r3, [r7, #32]
          break;
 8002f4a:	e013      	b.n	8002f74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d105      	bne.n	8002f60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f54:	2308      	movs	r3, #8
 8002f56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	611a      	str	r2, [r3, #16]
          break;
 8002f5e:	e009      	b.n	8002f74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f60:	2308      	movs	r3, #8
 8002f62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69fa      	ldr	r2, [r7, #28]
 8002f68:	615a      	str	r2, [r3, #20]
          break;
 8002f6a:	e003      	b.n	8002f74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	623b      	str	r3, [r7, #32]
          break;
 8002f70:	e000      	b.n	8002f74 <HAL_GPIO_Init+0x130>
          break;
 8002f72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2bff      	cmp	r3, #255	; 0xff
 8002f78:	d801      	bhi.n	8002f7e <HAL_GPIO_Init+0x13a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	e001      	b.n	8002f82 <HAL_GPIO_Init+0x13e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3304      	adds	r3, #4
 8002f82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	2bff      	cmp	r3, #255	; 0xff
 8002f88:	d802      	bhi.n	8002f90 <HAL_GPIO_Init+0x14c>
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	e002      	b.n	8002f96 <HAL_GPIO_Init+0x152>
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	3b08      	subs	r3, #8
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	210f      	movs	r1, #15
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	6a39      	ldr	r1, [r7, #32]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 80b1 	beq.w	8003126 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fc4:	4b4d      	ldr	r3, [pc, #308]	; (80030fc <HAL_GPIO_Init+0x2b8>)
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	4a4c      	ldr	r2, [pc, #304]	; (80030fc <HAL_GPIO_Init+0x2b8>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6193      	str	r3, [r2, #24]
 8002fd0:	4b4a      	ldr	r3, [pc, #296]	; (80030fc <HAL_GPIO_Init+0x2b8>)
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fdc:	4a48      	ldr	r2, [pc, #288]	; (8003100 <HAL_GPIO_Init+0x2bc>)
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	089b      	lsrs	r3, r3, #2
 8002fe2:	3302      	adds	r3, #2
 8002fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	f003 0303 	and.w	r3, r3, #3
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	220f      	movs	r2, #15
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a40      	ldr	r2, [pc, #256]	; (8003104 <HAL_GPIO_Init+0x2c0>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d013      	beq.n	8003030 <HAL_GPIO_Init+0x1ec>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a3f      	ldr	r2, [pc, #252]	; (8003108 <HAL_GPIO_Init+0x2c4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d00d      	beq.n	800302c <HAL_GPIO_Init+0x1e8>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a3e      	ldr	r2, [pc, #248]	; (800310c <HAL_GPIO_Init+0x2c8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d007      	beq.n	8003028 <HAL_GPIO_Init+0x1e4>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a3d      	ldr	r2, [pc, #244]	; (8003110 <HAL_GPIO_Init+0x2cc>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d101      	bne.n	8003024 <HAL_GPIO_Init+0x1e0>
 8003020:	2303      	movs	r3, #3
 8003022:	e006      	b.n	8003032 <HAL_GPIO_Init+0x1ee>
 8003024:	2304      	movs	r3, #4
 8003026:	e004      	b.n	8003032 <HAL_GPIO_Init+0x1ee>
 8003028:	2302      	movs	r3, #2
 800302a:	e002      	b.n	8003032 <HAL_GPIO_Init+0x1ee>
 800302c:	2301      	movs	r3, #1
 800302e:	e000      	b.n	8003032 <HAL_GPIO_Init+0x1ee>
 8003030:	2300      	movs	r3, #0
 8003032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003034:	f002 0203 	and.w	r2, r2, #3
 8003038:	0092      	lsls	r2, r2, #2
 800303a:	4093      	lsls	r3, r2
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	4313      	orrs	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003042:	492f      	ldr	r1, [pc, #188]	; (8003100 <HAL_GPIO_Init+0x2bc>)
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	089b      	lsrs	r3, r3, #2
 8003048:	3302      	adds	r3, #2
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d006      	beq.n	800306a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800305c:	4b2d      	ldr	r3, [pc, #180]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	492c      	ldr	r1, [pc, #176]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	4313      	orrs	r3, r2
 8003066:	608b      	str	r3, [r1, #8]
 8003068:	e006      	b.n	8003078 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800306a:	4b2a      	ldr	r3, [pc, #168]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	43db      	mvns	r3, r3
 8003072:	4928      	ldr	r1, [pc, #160]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 8003074:	4013      	ands	r3, r2
 8003076:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d006      	beq.n	8003092 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003084:	4b23      	ldr	r3, [pc, #140]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	4922      	ldr	r1, [pc, #136]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	4313      	orrs	r3, r2
 800308e:	60cb      	str	r3, [r1, #12]
 8003090:	e006      	b.n	80030a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003092:	4b20      	ldr	r3, [pc, #128]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	43db      	mvns	r3, r3
 800309a:	491e      	ldr	r1, [pc, #120]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 800309c:	4013      	ands	r3, r2
 800309e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d006      	beq.n	80030ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030ac:	4b19      	ldr	r3, [pc, #100]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	4918      	ldr	r1, [pc, #96]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	604b      	str	r3, [r1, #4]
 80030b8:	e006      	b.n	80030c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030ba:	4b16      	ldr	r3, [pc, #88]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	43db      	mvns	r3, r3
 80030c2:	4914      	ldr	r1, [pc, #80]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d021      	beq.n	8003118 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030d4:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	490e      	ldr	r1, [pc, #56]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	4313      	orrs	r3, r2
 80030de:	600b      	str	r3, [r1, #0]
 80030e0:	e021      	b.n	8003126 <HAL_GPIO_Init+0x2e2>
 80030e2:	bf00      	nop
 80030e4:	10320000 	.word	0x10320000
 80030e8:	10310000 	.word	0x10310000
 80030ec:	10220000 	.word	0x10220000
 80030f0:	10210000 	.word	0x10210000
 80030f4:	10120000 	.word	0x10120000
 80030f8:	10110000 	.word	0x10110000
 80030fc:	40021000 	.word	0x40021000
 8003100:	40010000 	.word	0x40010000
 8003104:	40010800 	.word	0x40010800
 8003108:	40010c00 	.word	0x40010c00
 800310c:	40011000 	.word	0x40011000
 8003110:	40011400 	.word	0x40011400
 8003114:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_GPIO_Init+0x304>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	43db      	mvns	r3, r3
 8003120:	4909      	ldr	r1, [pc, #36]	; (8003148 <HAL_GPIO_Init+0x304>)
 8003122:	4013      	ands	r3, r2
 8003124:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	3301      	adds	r3, #1
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	fa22 f303 	lsr.w	r3, r2, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	f47f ae8e 	bne.w	8002e58 <HAL_GPIO_Init+0x14>
  }
}
 800313c:	bf00      	nop
 800313e:	bf00      	nop
 8003140:	372c      	adds	r7, #44	; 0x2c
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr
 8003148:	40010400 	.word	0x40010400

0800314c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	807b      	strh	r3, [r7, #2]
 8003158:	4613      	mov	r3, r2
 800315a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800315c:	787b      	ldrb	r3, [r7, #1]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003162:	887a      	ldrh	r2, [r7, #2]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003168:	e003      	b.n	8003172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800316a:	887b      	ldrh	r3, [r7, #2]
 800316c:	041a      	lsls	r2, r3, #16
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	611a      	str	r2, [r3, #16]
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr

0800317c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e272      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 8087 	beq.w	80032aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800319c:	4b92      	ldr	r3, [pc, #584]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 030c 	and.w	r3, r3, #12
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d00c      	beq.n	80031c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031a8:	4b8f      	ldr	r3, [pc, #572]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 030c 	and.w	r3, r3, #12
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d112      	bne.n	80031da <HAL_RCC_OscConfig+0x5e>
 80031b4:	4b8c      	ldr	r3, [pc, #560]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c0:	d10b      	bne.n	80031da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c2:	4b89      	ldr	r3, [pc, #548]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d06c      	beq.n	80032a8 <HAL_RCC_OscConfig+0x12c>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d168      	bne.n	80032a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e24c      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e2:	d106      	bne.n	80031f2 <HAL_RCC_OscConfig+0x76>
 80031e4:	4b80      	ldr	r3, [pc, #512]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a7f      	ldr	r2, [pc, #508]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80031ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	e02e      	b.n	8003250 <HAL_RCC_OscConfig+0xd4>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10c      	bne.n	8003214 <HAL_RCC_OscConfig+0x98>
 80031fa:	4b7b      	ldr	r3, [pc, #492]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a7a      	ldr	r2, [pc, #488]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	4b78      	ldr	r3, [pc, #480]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a77      	ldr	r2, [pc, #476]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800320c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	e01d      	b.n	8003250 <HAL_RCC_OscConfig+0xd4>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0xbc>
 800321e:	4b72      	ldr	r3, [pc, #456]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a71      	ldr	r2, [pc, #452]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	4b6f      	ldr	r3, [pc, #444]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a6e      	ldr	r2, [pc, #440]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	e00b      	b.n	8003250 <HAL_RCC_OscConfig+0xd4>
 8003238:	4b6b      	ldr	r3, [pc, #428]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a6a      	ldr	r2, [pc, #424]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800323e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	4b68      	ldr	r3, [pc, #416]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a67      	ldr	r2, [pc, #412]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800324a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800324e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d013      	beq.n	8003280 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7ff f808 	bl	800226c <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003260:	f7ff f804 	bl	800226c <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	; 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e200      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	4b5d      	ldr	r3, [pc, #372]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0xe4>
 800327e:	e014      	b.n	80032aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7fe fff4 	bl	800226c <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003288:	f7fe fff0 	bl	800226c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b64      	cmp	r3, #100	; 0x64
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e1ec      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329a:	4b53      	ldr	r3, [pc, #332]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x10c>
 80032a6:	e000      	b.n	80032aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d063      	beq.n	800337e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032b6:	4b4c      	ldr	r3, [pc, #304]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 030c 	and.w	r3, r3, #12
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00b      	beq.n	80032da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032c2:	4b49      	ldr	r3, [pc, #292]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d11c      	bne.n	8003308 <HAL_RCC_OscConfig+0x18c>
 80032ce:	4b46      	ldr	r3, [pc, #280]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d116      	bne.n	8003308 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032da:	4b43      	ldr	r3, [pc, #268]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <HAL_RCC_OscConfig+0x176>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d001      	beq.n	80032f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e1c0      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f2:	4b3d      	ldr	r3, [pc, #244]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4939      	ldr	r1, [pc, #228]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003302:	4313      	orrs	r3, r2
 8003304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003306:	e03a      	b.n	800337e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d020      	beq.n	8003352 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003310:	4b36      	ldr	r3, [pc, #216]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003312:	2201      	movs	r2, #1
 8003314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003316:	f7fe ffa9 	bl	800226c <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800331e:	f7fe ffa5 	bl	800226c <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e1a1      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003330:	4b2d      	ldr	r3, [pc, #180]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f0      	beq.n	800331e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333c:	4b2a      	ldr	r3, [pc, #168]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4927      	ldr	r1, [pc, #156]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800334c:	4313      	orrs	r3, r2
 800334e:	600b      	str	r3, [r1, #0]
 8003350:	e015      	b.n	800337e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003352:	4b26      	ldr	r3, [pc, #152]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003358:	f7fe ff88 	bl	800226c <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003360:	f7fe ff84 	bl	800226c <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e180      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003372:	4b1d      	ldr	r3, [pc, #116]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d03a      	beq.n	8003400 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d019      	beq.n	80033c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003392:	4b17      	ldr	r3, [pc, #92]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003394:	2201      	movs	r2, #1
 8003396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003398:	f7fe ff68 	bl	800226c <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033a0:	f7fe ff64 	bl	800226c <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e160      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b2:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033be:	2001      	movs	r0, #1
 80033c0:	f000 face 	bl	8003960 <RCC_Delay>
 80033c4:	e01c      	b.n	8003400 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033c6:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033cc:	f7fe ff4e 	bl	800226c <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d2:	e00f      	b.n	80033f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d4:	f7fe ff4a 	bl	800226c <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d908      	bls.n	80033f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e146      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
 80033e6:	bf00      	nop
 80033e8:	40021000 	.word	0x40021000
 80033ec:	42420000 	.word	0x42420000
 80033f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f4:	4b92      	ldr	r3, [pc, #584]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1e9      	bne.n	80033d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 80a6 	beq.w	800355a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800340e:	2300      	movs	r3, #0
 8003410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003412:	4b8b      	ldr	r3, [pc, #556]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10d      	bne.n	800343a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800341e:	4b88      	ldr	r3, [pc, #544]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	4a87      	ldr	r2, [pc, #540]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003428:	61d3      	str	r3, [r2, #28]
 800342a:	4b85      	ldr	r3, [pc, #532]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003436:	2301      	movs	r3, #1
 8003438:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343a:	4b82      	ldr	r3, [pc, #520]	; (8003644 <HAL_RCC_OscConfig+0x4c8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003442:	2b00      	cmp	r3, #0
 8003444:	d118      	bne.n	8003478 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003446:	4b7f      	ldr	r3, [pc, #508]	; (8003644 <HAL_RCC_OscConfig+0x4c8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a7e      	ldr	r2, [pc, #504]	; (8003644 <HAL_RCC_OscConfig+0x4c8>)
 800344c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003452:	f7fe ff0b 	bl	800226c <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800345a:	f7fe ff07 	bl	800226c <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b64      	cmp	r3, #100	; 0x64
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e103      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346c:	4b75      	ldr	r3, [pc, #468]	; (8003644 <HAL_RCC_OscConfig+0x4c8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0f0      	beq.n	800345a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d106      	bne.n	800348e <HAL_RCC_OscConfig+0x312>
 8003480:	4b6f      	ldr	r3, [pc, #444]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	4a6e      	ldr	r2, [pc, #440]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	6213      	str	r3, [r2, #32]
 800348c:	e02d      	b.n	80034ea <HAL_RCC_OscConfig+0x36e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10c      	bne.n	80034b0 <HAL_RCC_OscConfig+0x334>
 8003496:	4b6a      	ldr	r3, [pc, #424]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	4a69      	ldr	r2, [pc, #420]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 800349c:	f023 0301 	bic.w	r3, r3, #1
 80034a0:	6213      	str	r3, [r2, #32]
 80034a2:	4b67      	ldr	r3, [pc, #412]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	4a66      	ldr	r2, [pc, #408]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	f023 0304 	bic.w	r3, r3, #4
 80034ac:	6213      	str	r3, [r2, #32]
 80034ae:	e01c      	b.n	80034ea <HAL_RCC_OscConfig+0x36e>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	2b05      	cmp	r3, #5
 80034b6:	d10c      	bne.n	80034d2 <HAL_RCC_OscConfig+0x356>
 80034b8:	4b61      	ldr	r3, [pc, #388]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	4a60      	ldr	r2, [pc, #384]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034be:	f043 0304 	orr.w	r3, r3, #4
 80034c2:	6213      	str	r3, [r2, #32]
 80034c4:	4b5e      	ldr	r3, [pc, #376]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	4a5d      	ldr	r2, [pc, #372]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	6213      	str	r3, [r2, #32]
 80034d0:	e00b      	b.n	80034ea <HAL_RCC_OscConfig+0x36e>
 80034d2:	4b5b      	ldr	r3, [pc, #364]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	4a5a      	ldr	r2, [pc, #360]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	f023 0301 	bic.w	r3, r3, #1
 80034dc:	6213      	str	r3, [r2, #32]
 80034de:	4b58      	ldr	r3, [pc, #352]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	4a57      	ldr	r2, [pc, #348]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034e4:	f023 0304 	bic.w	r3, r3, #4
 80034e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d015      	beq.n	800351e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f2:	f7fe febb 	bl	800226c <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f8:	e00a      	b.n	8003510 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fa:	f7fe feb7 	bl	800226c <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	f241 3288 	movw	r2, #5000	; 0x1388
 8003508:	4293      	cmp	r3, r2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e0b1      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003510:	4b4b      	ldr	r3, [pc, #300]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0ee      	beq.n	80034fa <HAL_RCC_OscConfig+0x37e>
 800351c:	e014      	b.n	8003548 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351e:	f7fe fea5 	bl	800226c <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003524:	e00a      	b.n	800353c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003526:	f7fe fea1 	bl	800226c <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	f241 3288 	movw	r2, #5000	; 0x1388
 8003534:	4293      	cmp	r3, r2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e09b      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800353c:	4b40      	ldr	r3, [pc, #256]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1ee      	bne.n	8003526 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003548:	7dfb      	ldrb	r3, [r7, #23]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d105      	bne.n	800355a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354e:	4b3c      	ldr	r3, [pc, #240]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	4a3b      	ldr	r2, [pc, #236]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003558:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 8087 	beq.w	8003672 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003564:	4b36      	ldr	r3, [pc, #216]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 030c 	and.w	r3, r3, #12
 800356c:	2b08      	cmp	r3, #8
 800356e:	d061      	beq.n	8003634 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d146      	bne.n	8003606 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003578:	4b33      	ldr	r3, [pc, #204]	; (8003648 <HAL_RCC_OscConfig+0x4cc>)
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357e:	f7fe fe75 	bl	800226c <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003586:	f7fe fe71 	bl	800226c <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e06d      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003598:	4b29      	ldr	r3, [pc, #164]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1f0      	bne.n	8003586 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ac:	d108      	bne.n	80035c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035ae:	4b24      	ldr	r3, [pc, #144]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	4921      	ldr	r1, [pc, #132]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035c0:	4b1f      	ldr	r3, [pc, #124]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a19      	ldr	r1, [r3, #32]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	430b      	orrs	r3, r1
 80035d2:	491b      	ldr	r1, [pc, #108]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d8:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <HAL_RCC_OscConfig+0x4cc>)
 80035da:	2201      	movs	r2, #1
 80035dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035de:	f7fe fe45 	bl	800226c <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e6:	f7fe fe41 	bl	800226c <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e03d      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035f8:	4b11      	ldr	r3, [pc, #68]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0x46a>
 8003604:	e035      	b.n	8003672 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003606:	4b10      	ldr	r3, [pc, #64]	; (8003648 <HAL_RCC_OscConfig+0x4cc>)
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7fe fe2e 	bl	800226c <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003614:	f7fe fe2a 	bl	800226c <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e026      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0x498>
 8003632:	e01e      	b.n	8003672 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d107      	bne.n	800364c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e019      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
 8003640:	40021000 	.word	0x40021000
 8003644:	40007000 	.word	0x40007000
 8003648:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <HAL_RCC_OscConfig+0x500>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	429a      	cmp	r2, r3
 800365e:	d106      	bne.n	800366e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366a:	429a      	cmp	r2, r3
 800366c:	d001      	beq.n	8003672 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40021000 	.word	0x40021000

08003680 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0d0      	b.n	8003836 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003694:	4b6a      	ldr	r3, [pc, #424]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d910      	bls.n	80036c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a2:	4b67      	ldr	r3, [pc, #412]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f023 0207 	bic.w	r2, r3, #7
 80036aa:	4965      	ldr	r1, [pc, #404]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b2:	4b63      	ldr	r3, [pc, #396]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d001      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0b8      	b.n	8003836 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d020      	beq.n	8003712 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036dc:	4b59      	ldr	r3, [pc, #356]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4a58      	ldr	r2, [pc, #352]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f4:	4b53      	ldr	r3, [pc, #332]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4a52      	ldr	r2, [pc, #328]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 80036fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003700:	4b50      	ldr	r3, [pc, #320]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	494d      	ldr	r1, [pc, #308]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	4313      	orrs	r3, r2
 8003710:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d040      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d107      	bne.n	8003736 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003726:	4b47      	ldr	r3, [pc, #284]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d115      	bne.n	800375e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e07f      	b.n	8003836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d107      	bne.n	800374e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373e:	4b41      	ldr	r3, [pc, #260]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d109      	bne.n	800375e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e073      	b.n	8003836 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374e:	4b3d      	ldr	r3, [pc, #244]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e06b      	b.n	8003836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800375e:	4b39      	ldr	r3, [pc, #228]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f023 0203 	bic.w	r2, r3, #3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	4936      	ldr	r1, [pc, #216]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	4313      	orrs	r3, r2
 800376e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003770:	f7fe fd7c 	bl	800226c <HAL_GetTick>
 8003774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003776:	e00a      	b.n	800378e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003778:	f7fe fd78 	bl	800226c <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f241 3288 	movw	r2, #5000	; 0x1388
 8003786:	4293      	cmp	r3, r2
 8003788:	d901      	bls.n	800378e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e053      	b.n	8003836 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378e:	4b2d      	ldr	r3, [pc, #180]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f003 020c 	and.w	r2, r3, #12
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	429a      	cmp	r2, r3
 800379e:	d1eb      	bne.n	8003778 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037a0:	4b27      	ldr	r3, [pc, #156]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d210      	bcs.n	80037d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ae:	4b24      	ldr	r3, [pc, #144]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f023 0207 	bic.w	r2, r3, #7
 80037b6:	4922      	ldr	r1, [pc, #136]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037be:	4b20      	ldr	r3, [pc, #128]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e032      	b.n	8003836 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037dc:	4b19      	ldr	r3, [pc, #100]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	4916      	ldr	r1, [pc, #88]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d009      	beq.n	800380e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037fa:	4b12      	ldr	r3, [pc, #72]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	490e      	ldr	r1, [pc, #56]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	4313      	orrs	r3, r2
 800380c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800380e:	f000 f821 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8003812:	4602      	mov	r2, r0
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	091b      	lsrs	r3, r3, #4
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	490a      	ldr	r1, [pc, #40]	; (8003848 <HAL_RCC_ClockConfig+0x1c8>)
 8003820:	5ccb      	ldrb	r3, [r1, r3]
 8003822:	fa22 f303 	lsr.w	r3, r2, r3
 8003826:	4a09      	ldr	r2, [pc, #36]	; (800384c <HAL_RCC_ClockConfig+0x1cc>)
 8003828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800382a:	4b09      	ldr	r3, [pc, #36]	; (8003850 <HAL_RCC_ClockConfig+0x1d0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f7fe fcda 	bl	80021e8 <HAL_InitTick>

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40022000 	.word	0x40022000
 8003844:	40021000 	.word	0x40021000
 8003848:	08007ea0 	.word	0x08007ea0
 800384c:	20000010 	.word	0x20000010
 8003850:	20000014 	.word	0x20000014

08003854 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003854:	b480      	push	{r7}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	2300      	movs	r3, #0
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	2300      	movs	r3, #0
 8003868:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800386e:	4b1e      	ldr	r3, [pc, #120]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 030c 	and.w	r3, r3, #12
 800387a:	2b04      	cmp	r3, #4
 800387c:	d002      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0x30>
 800387e:	2b08      	cmp	r3, #8
 8003880:	d003      	beq.n	800388a <HAL_RCC_GetSysClockFreq+0x36>
 8003882:	e027      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003884:	4b19      	ldr	r3, [pc, #100]	; (80038ec <HAL_RCC_GetSysClockFreq+0x98>)
 8003886:	613b      	str	r3, [r7, #16]
      break;
 8003888:	e027      	b.n	80038da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	0c9b      	lsrs	r3, r3, #18
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	4a17      	ldr	r2, [pc, #92]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003894:	5cd3      	ldrb	r3, [r2, r3]
 8003896:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d010      	beq.n	80038c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038a2:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	0c5b      	lsrs	r3, r3, #17
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	4a11      	ldr	r2, [pc, #68]	; (80038f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038ae:	5cd3      	ldrb	r3, [r2, r3]
 80038b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a0d      	ldr	r2, [pc, #52]	; (80038ec <HAL_RCC_GetSysClockFreq+0x98>)
 80038b6:	fb03 f202 	mul.w	r2, r3, r2
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	e004      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a0c      	ldr	r2, [pc, #48]	; (80038f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038c8:	fb02 f303 	mul.w	r3, r2, r3
 80038cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	613b      	str	r3, [r7, #16]
      break;
 80038d2:	e002      	b.n	80038da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <HAL_RCC_GetSysClockFreq+0x98>)
 80038d6:	613b      	str	r3, [r7, #16]
      break;
 80038d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038da:	693b      	ldr	r3, [r7, #16]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	371c      	adds	r7, #28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40021000 	.word	0x40021000
 80038ec:	007a1200 	.word	0x007a1200
 80038f0:	08007eb8 	.word	0x08007eb8
 80038f4:	08007ec8 	.word	0x08007ec8
 80038f8:	003d0900 	.word	0x003d0900

080038fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003900:	4b02      	ldr	r3, [pc, #8]	; (800390c <HAL_RCC_GetHCLKFreq+0x10>)
 8003902:	681b      	ldr	r3, [r3, #0]
}
 8003904:	4618      	mov	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr
 800390c:	20000010 	.word	0x20000010

08003910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003914:	f7ff fff2 	bl	80038fc <HAL_RCC_GetHCLKFreq>
 8003918:	4602      	mov	r2, r0
 800391a:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	0a1b      	lsrs	r3, r3, #8
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	4903      	ldr	r1, [pc, #12]	; (8003934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003926:	5ccb      	ldrb	r3, [r1, r3]
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800392c:	4618      	mov	r0, r3
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40021000 	.word	0x40021000
 8003934:	08007eb0 	.word	0x08007eb0

08003938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800393c:	f7ff ffde 	bl	80038fc <HAL_RCC_GetHCLKFreq>
 8003940:	4602      	mov	r2, r0
 8003942:	4b05      	ldr	r3, [pc, #20]	; (8003958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	0adb      	lsrs	r3, r3, #11
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	4903      	ldr	r1, [pc, #12]	; (800395c <HAL_RCC_GetPCLK2Freq+0x24>)
 800394e:	5ccb      	ldrb	r3, [r1, r3]
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000
 800395c:	08007eb0 	.word	0x08007eb0

08003960 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003968:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <RCC_Delay+0x34>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a0a      	ldr	r2, [pc, #40]	; (8003998 <RCC_Delay+0x38>)
 800396e:	fba2 2303 	umull	r2, r3, r2, r3
 8003972:	0a5b      	lsrs	r3, r3, #9
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	fb02 f303 	mul.w	r3, r2, r3
 800397a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800397c:	bf00      	nop
  }
  while (Delay --);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	1e5a      	subs	r2, r3, #1
 8003982:	60fa      	str	r2, [r7, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f9      	bne.n	800397c <RCC_Delay+0x1c>
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr
 8003994:	20000010 	.word	0x20000010
 8003998:	10624dd3 	.word	0x10624dd3

0800399c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d07d      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039b8:	2300      	movs	r3, #0
 80039ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039bc:	4b4f      	ldr	r3, [pc, #316]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10d      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c8:	4b4c      	ldr	r3, [pc, #304]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	4a4b      	ldr	r2, [pc, #300]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d2:	61d3      	str	r3, [r2, #28]
 80039d4:	4b49      	ldr	r3, [pc, #292]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039e0:	2301      	movs	r3, #1
 80039e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e4:	4b46      	ldr	r3, [pc, #280]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d118      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039f0:	4b43      	ldr	r3, [pc, #268]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a42      	ldr	r2, [pc, #264]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039fc:	f7fe fc36 	bl	800226c <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a02:	e008      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a04:	f7fe fc32 	bl	800226c <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b64      	cmp	r3, #100	; 0x64
 8003a10:	d901      	bls.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e06d      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a16:	4b3a      	ldr	r3, [pc, #232]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a22:	4b36      	ldr	r3, [pc, #216]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d02e      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d027      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a40:	4b2e      	ldr	r3, [pc, #184]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a4a:	4b2e      	ldr	r3, [pc, #184]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a50:	4b2c      	ldr	r3, [pc, #176]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a56:	4a29      	ldr	r2, [pc, #164]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d014      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a66:	f7fe fc01 	bl	800226c <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6c:	e00a      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6e:	f7fe fbfd 	bl	800226c <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e036      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a84:	4b1d      	ldr	r3, [pc, #116]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0ee      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a90:	4b1a      	ldr	r3, [pc, #104]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	4917      	ldr	r1, [pc, #92]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003aa2:	7dfb      	ldrb	r3, [r7, #23]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d105      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa8:	4b14      	ldr	r3, [pc, #80]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	4a13      	ldr	r2, [pc, #76]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ac0:	4b0e      	ldr	r3, [pc, #56]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	490b      	ldr	r1, [pc, #44]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d008      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ade:	4b07      	ldr	r3, [pc, #28]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	4904      	ldr	r1, [pc, #16]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000
 8003b00:	40007000 	.word	0x40007000
 8003b04:	42420440 	.word	0x42420440

08003b08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e041      	b.n	8003b9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fe f99a 	bl	8001e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3304      	adds	r3, #4
 8003b44:	4619      	mov	r1, r3
 8003b46:	4610      	mov	r0, r2
 8003b48:	f000 fa8a 	bl	8004060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d001      	beq.n	8003bc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e03a      	b.n	8003c36 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0201 	orr.w	r2, r2, #1
 8003bd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a18      	ldr	r2, [pc, #96]	; (8003c40 <HAL_TIM_Base_Start_IT+0x98>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00e      	beq.n	8003c00 <HAL_TIM_Base_Start_IT+0x58>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bea:	d009      	beq.n	8003c00 <HAL_TIM_Base_Start_IT+0x58>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a14      	ldr	r2, [pc, #80]	; (8003c44 <HAL_TIM_Base_Start_IT+0x9c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d004      	beq.n	8003c00 <HAL_TIM_Base_Start_IT+0x58>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a13      	ldr	r2, [pc, #76]	; (8003c48 <HAL_TIM_Base_Start_IT+0xa0>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d111      	bne.n	8003c24 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b06      	cmp	r3, #6
 8003c10:	d010      	beq.n	8003c34 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0201 	orr.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c22:	e007      	b.n	8003c34 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0201 	orr.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr
 8003c40:	40012c00 	.word	0x40012c00
 8003c44:	40000400 	.word	0x40000400
 8003c48:	40000800 	.word	0x40000800

08003c4c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0201 	bic.w	r2, r2, #1
 8003c62:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6a1a      	ldr	r2, [r3, #32]
 8003c6a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10f      	bne.n	8003c94 <HAL_TIM_Base_Stop_IT+0x48>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6a1a      	ldr	r2, [r3, #32]
 8003c7a:	f240 4344 	movw	r3, #1092	; 0x444
 8003c7e:	4013      	ands	r3, r2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d107      	bne.n	8003c94 <HAL_TIM_Base_Stop_IT+0x48>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0201 	bic.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d020      	beq.n	8003d0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d01b      	beq.n	8003d0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0202 	mvn.w	r2, #2
 8003cdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f998 	bl	8004028 <HAL_TIM_IC_CaptureCallback>
 8003cf8:	e005      	b.n	8003d06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f98b 	bl	8004016 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f99a 	bl	800403a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d020      	beq.n	8003d58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d01b      	beq.n	8003d58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f06f 0204 	mvn.w	r2, #4
 8003d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f972 	bl	8004028 <HAL_TIM_IC_CaptureCallback>
 8003d44:	e005      	b.n	8003d52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f965 	bl	8004016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f974 	bl	800403a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d020      	beq.n	8003da4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d01b      	beq.n	8003da4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0208 	mvn.w	r2, #8
 8003d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2204      	movs	r2, #4
 8003d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f94c 	bl	8004028 <HAL_TIM_IC_CaptureCallback>
 8003d90:	e005      	b.n	8003d9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f93f 	bl	8004016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f94e 	bl	800403a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f003 0310 	and.w	r3, r3, #16
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d020      	beq.n	8003df0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f003 0310 	and.w	r3, r3, #16
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d01b      	beq.n	8003df0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0210 	mvn.w	r2, #16
 8003dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f926 	bl	8004028 <HAL_TIM_IC_CaptureCallback>
 8003ddc:	e005      	b.n	8003dea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f919 	bl	8004016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f928 	bl	800403a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00c      	beq.n	8003e14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d007      	beq.n	8003e14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f06f 0201 	mvn.w	r2, #1
 8003e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fd fd66 	bl	80018e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00c      	beq.n	8003e38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d007      	beq.n	8003e38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fa7f 	bl	8004336 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00c      	beq.n	8003e5c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d007      	beq.n	8003e5c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f8f8 	bl	800404c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00c      	beq.n	8003e80 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d007      	beq.n	8003e80 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f06f 0220 	mvn.w	r2, #32
 8003e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fa52 	bl	8004324 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e80:	bf00      	nop
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e0b4      	b.n	800400e <HAL_TIM_ConfigClockSource+0x186>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003edc:	d03e      	beq.n	8003f5c <HAL_TIM_ConfigClockSource+0xd4>
 8003ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ee2:	f200 8087 	bhi.w	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eea:	f000 8086 	beq.w	8003ffa <HAL_TIM_ConfigClockSource+0x172>
 8003eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef2:	d87f      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef4:	2b70      	cmp	r3, #112	; 0x70
 8003ef6:	d01a      	beq.n	8003f2e <HAL_TIM_ConfigClockSource+0xa6>
 8003ef8:	2b70      	cmp	r3, #112	; 0x70
 8003efa:	d87b      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8003efc:	2b60      	cmp	r3, #96	; 0x60
 8003efe:	d050      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0x11a>
 8003f00:	2b60      	cmp	r3, #96	; 0x60
 8003f02:	d877      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8003f04:	2b50      	cmp	r3, #80	; 0x50
 8003f06:	d03c      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0xfa>
 8003f08:	2b50      	cmp	r3, #80	; 0x50
 8003f0a:	d873      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8003f0c:	2b40      	cmp	r3, #64	; 0x40
 8003f0e:	d058      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x13a>
 8003f10:	2b40      	cmp	r3, #64	; 0x40
 8003f12:	d86f      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8003f14:	2b30      	cmp	r3, #48	; 0x30
 8003f16:	d064      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f18:	2b30      	cmp	r3, #48	; 0x30
 8003f1a:	d86b      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d060      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	d867      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d05c      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f28:	2b10      	cmp	r3, #16
 8003f2a:	d05a      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f2c:	e062      	b.n	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	6899      	ldr	r1, [r3, #8]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f000 f974 	bl	800422a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	609a      	str	r2, [r3, #8]
      break;
 8003f5a:	e04f      	b.n	8003ffc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	6899      	ldr	r1, [r3, #8]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f000 f95d 	bl	800422a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689a      	ldr	r2, [r3, #8]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f7e:	609a      	str	r2, [r3, #8]
      break;
 8003f80:	e03c      	b.n	8003ffc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	6859      	ldr	r1, [r3, #4]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f000 f8d4 	bl	800413c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2150      	movs	r1, #80	; 0x50
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 f92b 	bl	80041f6 <TIM_ITRx_SetConfig>
      break;
 8003fa0:	e02c      	b.n	8003ffc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	6859      	ldr	r1, [r3, #4]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f000 f8f2 	bl	8004198 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2160      	movs	r1, #96	; 0x60
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 f91b 	bl	80041f6 <TIM_ITRx_SetConfig>
      break;
 8003fc0:	e01c      	b.n	8003ffc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6859      	ldr	r1, [r3, #4]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f000 f8b4 	bl	800413c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2140      	movs	r1, #64	; 0x40
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 f90b 	bl	80041f6 <TIM_ITRx_SetConfig>
      break;
 8003fe0:	e00c      	b.n	8003ffc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4619      	mov	r1, r3
 8003fec:	4610      	mov	r0, r2
 8003fee:	f000 f902 	bl	80041f6 <TIM_ITRx_SetConfig>
      break;
 8003ff2:	e003      	b.n	8003ffc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ff8:	e000      	b.n	8003ffc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ffa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800400c:	7bfb      	ldrb	r3, [r7, #15]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr

0800403a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr

0800404c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	bc80      	pop	{r7}
 800405c:	4770      	bx	lr
	...

08004060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a2f      	ldr	r2, [pc, #188]	; (8004130 <TIM_Base_SetConfig+0xd0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00b      	beq.n	8004090 <TIM_Base_SetConfig+0x30>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800407e:	d007      	beq.n	8004090 <TIM_Base_SetConfig+0x30>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a2c      	ldr	r2, [pc, #176]	; (8004134 <TIM_Base_SetConfig+0xd4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d003      	beq.n	8004090 <TIM_Base_SetConfig+0x30>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a2b      	ldr	r2, [pc, #172]	; (8004138 <TIM_Base_SetConfig+0xd8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d108      	bne.n	80040a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a22      	ldr	r2, [pc, #136]	; (8004130 <TIM_Base_SetConfig+0xd0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00b      	beq.n	80040c2 <TIM_Base_SetConfig+0x62>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b0:	d007      	beq.n	80040c2 <TIM_Base_SetConfig+0x62>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a1f      	ldr	r2, [pc, #124]	; (8004134 <TIM_Base_SetConfig+0xd4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d003      	beq.n	80040c2 <TIM_Base_SetConfig+0x62>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a1e      	ldr	r2, [pc, #120]	; (8004138 <TIM_Base_SetConfig+0xd8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d108      	bne.n	80040d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	4313      	orrs	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a0d      	ldr	r2, [pc, #52]	; (8004130 <TIM_Base_SetConfig+0xd0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d103      	bne.n	8004108 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	691a      	ldr	r2, [r3, #16]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d005      	beq.n	8004126 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f023 0201 	bic.w	r2, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	611a      	str	r2, [r3, #16]
  }
}
 8004126:	bf00      	nop
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40000400 	.word	0x40000400
 8004138:	40000800 	.word	0x40000800

0800413c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	f023 0201 	bic.w	r2, r3, #1
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f023 030a 	bic.w	r3, r3, #10
 8004178:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	621a      	str	r2, [r3, #32]
}
 800418e:	bf00      	nop
 8004190:	371c      	adds	r7, #28
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	f023 0210 	bic.w	r2, r3, #16
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	031b      	lsls	r3, r3, #12
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	4313      	orrs	r3, r2
 80041de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	621a      	str	r2, [r3, #32]
}
 80041ec:	bf00      	nop
 80041ee:	371c      	adds	r7, #28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr

080041f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b085      	sub	sp, #20
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	f043 0307 	orr.w	r3, r3, #7
 8004218:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	609a      	str	r2, [r3, #8]
}
 8004220:	bf00      	nop
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	bc80      	pop	{r7}
 8004228:	4770      	bx	lr

0800422a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800422a:	b480      	push	{r7}
 800422c:	b087      	sub	sp, #28
 800422e:	af00      	add	r7, sp, #0
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	607a      	str	r2, [r7, #4]
 8004236:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004244:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	021a      	lsls	r2, r3, #8
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	431a      	orrs	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	4313      	orrs	r3, r2
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	4313      	orrs	r3, r2
 8004256:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	609a      	str	r2, [r3, #8]
}
 800425e:	bf00      	nop
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr

08004268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800427c:	2302      	movs	r3, #2
 800427e:	e046      	b.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a16      	ldr	r2, [pc, #88]	; (8004318 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d00e      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042cc:	d009      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a12      	ldr	r2, [pc, #72]	; (800431c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d004      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a10      	ldr	r2, [pc, #64]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d10c      	bne.n	80042fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr
 8004318:	40012c00 	.word	0x40012c00
 800431c:	40000400 	.word	0x40000400
 8004320:	40000800 	.word	0x40000800

08004324 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr

08004336 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr

08004348 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e042      	b.n	80043e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fd fd9e 	bl	8001eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2224      	movs	r2, #36	; 0x24
 8004378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800438a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fdb7 	bl	8004f00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695a      	ldr	r2, [r3, #20]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08a      	sub	sp, #40	; 0x28
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	603b      	str	r3, [r7, #0]
 80043f4:	4613      	mov	r3, r2
 80043f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b20      	cmp	r3, #32
 8004406:	d175      	bne.n	80044f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <HAL_UART_Transmit+0x2c>
 800440e:	88fb      	ldrh	r3, [r7, #6]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e06e      	b.n	80044f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2221      	movs	r2, #33	; 0x21
 8004422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004426:	f7fd ff21 	bl	800226c <HAL_GetTick>
 800442a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	88fa      	ldrh	r2, [r7, #6]
 8004430:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	88fa      	ldrh	r2, [r7, #6]
 8004436:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004440:	d108      	bne.n	8004454 <HAL_UART_Transmit+0x6c>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d104      	bne.n	8004454 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800444a:	2300      	movs	r3, #0
 800444c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	e003      	b.n	800445c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004458:	2300      	movs	r3, #0
 800445a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800445c:	e02e      	b.n	80044bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2200      	movs	r2, #0
 8004466:	2180      	movs	r1, #128	; 0x80
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 fb1c 	bl	8004aa6 <UART_WaitOnFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e03a      	b.n	80044f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10b      	bne.n	800449e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004494:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	3302      	adds	r3, #2
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	e007      	b.n	80044ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	781a      	ldrb	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	3301      	adds	r3, #1
 80044ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1cb      	bne.n	800445e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2200      	movs	r2, #0
 80044ce:	2140      	movs	r1, #64	; 0x40
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 fae8 	bl	8004aa6 <UART_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d005      	beq.n	80044e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2220      	movs	r2, #32
 80044e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e006      	b.n	80044f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	e000      	b.n	80044f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80044f4:	2302      	movs	r3, #2
  }
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3720      	adds	r7, #32
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b084      	sub	sp, #16
 8004502:	af00      	add	r7, sp, #0
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	4613      	mov	r3, r2
 800450a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b20      	cmp	r3, #32
 8004516:	d112      	bne.n	800453e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <HAL_UART_Receive_IT+0x26>
 800451e:	88fb      	ldrh	r3, [r7, #6]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e00b      	b.n	8004540 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800452e:	88fb      	ldrh	r3, [r7, #6]
 8004530:	461a      	mov	r2, r3
 8004532:	68b9      	ldr	r1, [r7, #8]
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 fb0f 	bl	8004b58 <UART_Start_Receive_IT>
 800453a:	4603      	mov	r3, r0
 800453c:	e000      	b.n	8004540 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800453e:	2302      	movs	r3, #2
  }
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b0ba      	sub	sp, #232	; 0xe8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800456e:	2300      	movs	r3, #0
 8004570:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004574:	2300      	movs	r3, #0
 8004576:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800457a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004586:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10f      	bne.n	80045ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800458e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b00      	cmp	r3, #0
 8004598:	d009      	beq.n	80045ae <HAL_UART_IRQHandler+0x66>
 800459a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fbec 	bl	8004d84 <UART_Receive_IT>
      return;
 80045ac:	e25b      	b.n	8004a66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 80de 	beq.w	8004774 <HAL_UART_IRQHandler+0x22c>
 80045b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d106      	bne.n	80045d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 80d1 	beq.w	8004774 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00b      	beq.n	80045f6 <HAL_UART_IRQHandler+0xae>
 80045de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d005      	beq.n	80045f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ee:	f043 0201 	orr.w	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00b      	beq.n	800461a <HAL_UART_IRQHandler+0xd2>
 8004602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d005      	beq.n	800461a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	f043 0202 	orr.w	r2, r3, #2
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800461a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00b      	beq.n	800463e <HAL_UART_IRQHandler+0xf6>
 8004626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d005      	beq.n	800463e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004636:	f043 0204 	orr.w	r2, r3, #4
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800463e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	2b00      	cmp	r3, #0
 8004648:	d011      	beq.n	800466e <HAL_UART_IRQHandler+0x126>
 800464a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800464e:	f003 0320 	and.w	r3, r3, #32
 8004652:	2b00      	cmp	r3, #0
 8004654:	d105      	bne.n	8004662 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004666:	f043 0208 	orr.w	r2, r3, #8
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 81f2 	beq.w	8004a5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800467c:	f003 0320 	and.w	r3, r3, #32
 8004680:	2b00      	cmp	r3, #0
 8004682:	d008      	beq.n	8004696 <HAL_UART_IRQHandler+0x14e>
 8004684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004688:	f003 0320 	and.w	r3, r3, #32
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fb77 	bl	8004d84 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	bf14      	ite	ne
 80046a4:	2301      	movne	r3, #1
 80046a6:	2300      	moveq	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d103      	bne.n	80046c2 <HAL_UART_IRQHandler+0x17a>
 80046ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d04f      	beq.n	8004762 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 fa81 	bl	8004bca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d041      	beq.n	800475a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3314      	adds	r3, #20
 80046dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046e4:	e853 3f00 	ldrex	r3, [r3]
 80046e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3314      	adds	r3, #20
 80046fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004702:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004706:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800470e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004712:	e841 2300 	strex	r3, r2, [r1]
 8004716:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800471a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1d9      	bne.n	80046d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004726:	2b00      	cmp	r3, #0
 8004728:	d013      	beq.n	8004752 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472e:	4a7e      	ldr	r2, [pc, #504]	; (8004928 <HAL_UART_IRQHandler+0x3e0>)
 8004730:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004736:	4618      	mov	r0, r3
 8004738:	f7fe fb0c 	bl	8002d54 <HAL_DMA_Abort_IT>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d016      	beq.n	8004770 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800474c:	4610      	mov	r0, r2
 800474e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004750:	e00e      	b.n	8004770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f993 	bl	8004a7e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004758:	e00a      	b.n	8004770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f98f 	bl	8004a7e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004760:	e006      	b.n	8004770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f98b 	bl	8004a7e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800476e:	e175      	b.n	8004a5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004770:	bf00      	nop
    return;
 8004772:	e173      	b.n	8004a5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004778:	2b01      	cmp	r3, #1
 800477a:	f040 814f 	bne.w	8004a1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800477e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004782:	f003 0310 	and.w	r3, r3, #16
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 8148 	beq.w	8004a1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800478c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 8141 	beq.w	8004a1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800479a:	2300      	movs	r3, #0
 800479c:	60bb      	str	r3, [r7, #8]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 80b6 	beq.w	800492c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 8145 	beq.w	8004a60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047de:	429a      	cmp	r2, r3
 80047e0:	f080 813e 	bcs.w	8004a60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	2b20      	cmp	r3, #32
 80047f4:	f000 8088 	beq.w	8004908 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	330c      	adds	r3, #12
 80047fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004802:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004806:	e853 3f00 	ldrex	r3, [r3]
 800480a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800480e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004812:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004816:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	330c      	adds	r3, #12
 8004820:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004824:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004828:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004830:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800483c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1d9      	bne.n	80047f8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3314      	adds	r3, #20
 800484a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800484e:	e853 3f00 	ldrex	r3, [r3]
 8004852:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004854:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004856:	f023 0301 	bic.w	r3, r3, #1
 800485a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3314      	adds	r3, #20
 8004864:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004868:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800486c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004870:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004874:	e841 2300 	strex	r3, r2, [r1]
 8004878:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800487a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1e1      	bne.n	8004844 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3314      	adds	r3, #20
 8004886:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004888:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800488a:	e853 3f00 	ldrex	r3, [r3]
 800488e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004890:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004896:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3314      	adds	r3, #20
 80048a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048a4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048ac:	e841 2300 	strex	r3, r2, [r1]
 80048b0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1e3      	bne.n	8004880 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	330c      	adds	r3, #12
 80048cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048d0:	e853 3f00 	ldrex	r3, [r3]
 80048d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048d8:	f023 0310 	bic.w	r3, r3, #16
 80048dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	330c      	adds	r3, #12
 80048e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80048ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80048ec:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048f2:	e841 2300 	strex	r3, r2, [r1]
 80048f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1e3      	bne.n	80048c6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004902:	4618      	mov	r0, r3
 8004904:	f7fe f9eb 	bl	8002cde <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004916:	b29b      	uxth	r3, r3
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	b29b      	uxth	r3, r3
 800491c:	4619      	mov	r1, r3
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f8b6 	bl	8004a90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004924:	e09c      	b.n	8004a60 <HAL_UART_IRQHandler+0x518>
 8004926:	bf00      	nop
 8004928:	08004c8f 	.word	0x08004c8f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004934:	b29b      	uxth	r3, r3
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 808e 	beq.w	8004a64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004948:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 8089 	beq.w	8004a64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	330c      	adds	r3, #12
 8004958:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495c:	e853 3f00 	ldrex	r3, [r3]
 8004960:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004964:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004968:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	330c      	adds	r3, #12
 8004972:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004976:	647a      	str	r2, [r7, #68]	; 0x44
 8004978:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800497c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1e3      	bne.n	8004952 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3314      	adds	r3, #20
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	e853 3f00 	ldrex	r3, [r3]
 8004998:	623b      	str	r3, [r7, #32]
   return(result);
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	f023 0301 	bic.w	r3, r3, #1
 80049a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3314      	adds	r3, #20
 80049aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049ae:	633a      	str	r2, [r7, #48]	; 0x30
 80049b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049b6:	e841 2300 	strex	r3, r2, [r1]
 80049ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1e3      	bne.n	800498a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	330c      	adds	r3, #12
 80049d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	e853 3f00 	ldrex	r3, [r3]
 80049de:	60fb      	str	r3, [r7, #12]
   return(result);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0310 	bic.w	r3, r3, #16
 80049e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	330c      	adds	r3, #12
 80049f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80049f4:	61fa      	str	r2, [r7, #28]
 80049f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f8:	69b9      	ldr	r1, [r7, #24]
 80049fa:	69fa      	ldr	r2, [r7, #28]
 80049fc:	e841 2300 	strex	r3, r2, [r1]
 8004a00:	617b      	str	r3, [r7, #20]
   return(result);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1e3      	bne.n	80049d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a12:	4619      	mov	r1, r3
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f83b 	bl	8004a90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a1a:	e023      	b.n	8004a64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d009      	beq.n	8004a3c <HAL_UART_IRQHandler+0x4f4>
 8004a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f93e 	bl	8004cb6 <UART_Transmit_IT>
    return;
 8004a3a:	e014      	b.n	8004a66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00e      	beq.n	8004a66 <HAL_UART_IRQHandler+0x51e>
 8004a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d008      	beq.n	8004a66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f97d 	bl	8004d54 <UART_EndTransmit_IT>
    return;
 8004a5a:	e004      	b.n	8004a66 <HAL_UART_IRQHandler+0x51e>
    return;
 8004a5c:	bf00      	nop
 8004a5e:	e002      	b.n	8004a66 <HAL_UART_IRQHandler+0x51e>
      return;
 8004a60:	bf00      	nop
 8004a62:	e000      	b.n	8004a66 <HAL_UART_IRQHandler+0x51e>
      return;
 8004a64:	bf00      	nop
  }
}
 8004a66:	37e8      	adds	r7, #232	; 0xe8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr

08004a7e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr

08004a90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr

08004aa6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b086      	sub	sp, #24
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	603b      	str	r3, [r7, #0]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab6:	e03b      	b.n	8004b30 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abe:	d037      	beq.n	8004b30 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac0:	f7fd fbd4 	bl	800226c <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	6a3a      	ldr	r2, [r7, #32]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d302      	bcc.n	8004ad6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e03a      	b.n	8004b50 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d023      	beq.n	8004b30 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b80      	cmp	r3, #128	; 0x80
 8004aec:	d020      	beq.n	8004b30 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b40      	cmp	r3, #64	; 0x40
 8004af2:	d01d      	beq.n	8004b30 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d116      	bne.n	8004b30 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004b02:	2300      	movs	r3, #0
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	617b      	str	r3, [r7, #20]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 f856 	bl	8004bca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2208      	movs	r2, #8
 8004b22:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e00f      	b.n	8004b50 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	bf0c      	ite	eq
 8004b40:	2301      	moveq	r3, #1
 8004b42:	2300      	movne	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	461a      	mov	r2, r3
 8004b48:	79fb      	ldrb	r3, [r7, #7]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d0b4      	beq.n	8004ab8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3718      	adds	r7, #24
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	4613      	mov	r3, r2
 8004b64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	88fa      	ldrh	r2, [r7, #6]
 8004b70:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	88fa      	ldrh	r2, [r7, #6]
 8004b76:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2222      	movs	r2, #34	; 0x22
 8004b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d007      	beq.n	8004b9e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68da      	ldr	r2, [r3, #12]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b9c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695a      	ldr	r2, [r3, #20]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f042 0201 	orr.w	r2, r2, #1
 8004bac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0220 	orr.w	r2, r2, #32
 8004bbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bc80      	pop	{r7}
 8004bc8:	4770      	bx	lr

08004bca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b095      	sub	sp, #84	; 0x54
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	330c      	adds	r3, #12
 8004bd8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bdc:	e853 3f00 	ldrex	r3, [r3]
 8004be0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004be8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	330c      	adds	r3, #12
 8004bf0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bf2:	643a      	str	r2, [r7, #64]	; 0x40
 8004bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bfa:	e841 2300 	strex	r3, r2, [r1]
 8004bfe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1e5      	bne.n	8004bd2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	3314      	adds	r3, #20
 8004c0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	e853 3f00 	ldrex	r3, [r3]
 8004c14:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f023 0301 	bic.w	r3, r3, #1
 8004c1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3314      	adds	r3, #20
 8004c24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c2e:	e841 2300 	strex	r3, r2, [r1]
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1e5      	bne.n	8004c06 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d119      	bne.n	8004c76 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	330c      	adds	r3, #12
 8004c48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	e853 3f00 	ldrex	r3, [r3]
 8004c50:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f023 0310 	bic.w	r3, r3, #16
 8004c58:	647b      	str	r3, [r7, #68]	; 0x44
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	330c      	adds	r3, #12
 8004c60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c62:	61ba      	str	r2, [r7, #24]
 8004c64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c66:	6979      	ldr	r1, [r7, #20]
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e5      	bne.n	8004c42 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c84:	bf00      	nop
 8004c86:	3754      	adds	r7, #84	; 0x54
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bc80      	pop	{r7}
 8004c8c:	4770      	bx	lr

08004c8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f7ff fee8 	bl	8004a7e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cae:	bf00      	nop
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b085      	sub	sp, #20
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b21      	cmp	r3, #33	; 0x21
 8004cc8:	d13e      	bne.n	8004d48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd2:	d114      	bne.n	8004cfe <UART_Transmit_IT+0x48>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d110      	bne.n	8004cfe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cf0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	1c9a      	adds	r2, r3, #2
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	621a      	str	r2, [r3, #32]
 8004cfc:	e008      	b.n	8004d10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	1c59      	adds	r1, r3, #1
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	6211      	str	r1, [r2, #32]
 8004d08:	781a      	ldrb	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	3b01      	subs	r3, #1
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10f      	bne.n	8004d44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d44:	2300      	movs	r3, #0
 8004d46:	e000      	b.n	8004d4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d48:	2302      	movs	r3, #2
  }
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr

08004d54 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d6a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff fe79 	bl	8004a6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b08c      	sub	sp, #48	; 0x30
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b22      	cmp	r3, #34	; 0x22
 8004d96:	f040 80ae 	bne.w	8004ef6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da2:	d117      	bne.n	8004dd4 <UART_Receive_IT+0x50>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d113      	bne.n	8004dd4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004dac:	2300      	movs	r3, #0
 8004dae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dcc:	1c9a      	adds	r2, r3, #2
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	629a      	str	r2, [r3, #40]	; 0x28
 8004dd2:	e026      	b.n	8004e22 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de6:	d007      	beq.n	8004df8 <UART_Receive_IT+0x74>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10a      	bne.n	8004e06 <UART_Receive_IT+0x82>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d106      	bne.n	8004e06 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e02:	701a      	strb	r2, [r3, #0]
 8004e04:	e008      	b.n	8004e18 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e16:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	4619      	mov	r1, r3
 8004e30:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d15d      	bne.n	8004ef2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68da      	ldr	r2, [r3, #12]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0220 	bic.w	r2, r2, #32
 8004e44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695a      	ldr	r2, [r3, #20]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0201 	bic.w	r2, r2, #1
 8004e64:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d135      	bne.n	8004ee8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	330c      	adds	r3, #12
 8004e88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	613b      	str	r3, [r7, #16]
   return(result);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f023 0310 	bic.w	r3, r3, #16
 8004e98:	627b      	str	r3, [r7, #36]	; 0x24
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	330c      	adds	r3, #12
 8004ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea2:	623a      	str	r2, [r7, #32]
 8004ea4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea6:	69f9      	ldr	r1, [r7, #28]
 8004ea8:	6a3a      	ldr	r2, [r7, #32]
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e5      	bne.n	8004e82 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0310 	and.w	r3, r3, #16
 8004ec0:	2b10      	cmp	r3, #16
 8004ec2:	d10a      	bne.n	8004eda <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ede:	4619      	mov	r1, r3
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7ff fdd5 	bl	8004a90 <HAL_UARTEx_RxEventCallback>
 8004ee6:	e002      	b.n	8004eee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7fc fce1 	bl	80018b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e002      	b.n	8004ef8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	e000      	b.n	8004ef8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ef6:	2302      	movs	r3, #2
  }
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3730      	adds	r7, #48	; 0x30
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689a      	ldr	r2, [r3, #8]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f3a:	f023 030c 	bic.w	r3, r3, #12
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6812      	ldr	r2, [r2, #0]
 8004f42:	68b9      	ldr	r1, [r7, #8]
 8004f44:	430b      	orrs	r3, r1
 8004f46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a2c      	ldr	r2, [pc, #176]	; (8005014 <UART_SetConfig+0x114>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d103      	bne.n	8004f70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f68:	f7fe fce6 	bl	8003938 <HAL_RCC_GetPCLK2Freq>
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	e002      	b.n	8004f76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f70:	f7fe fcce 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 8004f74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009a      	lsls	r2, r3, #2
 8004f80:	441a      	add	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8c:	4a22      	ldr	r2, [pc, #136]	; (8005018 <UART_SetConfig+0x118>)
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	0119      	lsls	r1, r3, #4
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009a      	lsls	r2, r3, #2
 8004fa0:	441a      	add	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fac:	4b1a      	ldr	r3, [pc, #104]	; (8005018 <UART_SetConfig+0x118>)
 8004fae:	fba3 0302 	umull	r0, r3, r3, r2
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	2064      	movs	r0, #100	; 0x64
 8004fb6:	fb00 f303 	mul.w	r3, r0, r3
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	3332      	adds	r3, #50	; 0x32
 8004fc0:	4a15      	ldr	r2, [pc, #84]	; (8005018 <UART_SetConfig+0x118>)
 8004fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fcc:	4419      	add	r1, r3
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009a      	lsls	r2, r3, #2
 8004fd8:	441a      	add	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fe4:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <UART_SetConfig+0x118>)
 8004fe6:	fba3 0302 	umull	r0, r3, r3, r2
 8004fea:	095b      	lsrs	r3, r3, #5
 8004fec:	2064      	movs	r0, #100	; 0x64
 8004fee:	fb00 f303 	mul.w	r3, r0, r3
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	3332      	adds	r3, #50	; 0x32
 8004ff8:	4a07      	ldr	r2, [pc, #28]	; (8005018 <UART_SetConfig+0x118>)
 8004ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffe:	095b      	lsrs	r3, r3, #5
 8005000:	f003 020f 	and.w	r2, r3, #15
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	440a      	add	r2, r1
 800500a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800500c:	bf00      	nop
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40013800 	.word	0x40013800
 8005018:	51eb851f 	.word	0x51eb851f

0800501c <__errno>:
 800501c:	4b01      	ldr	r3, [pc, #4]	; (8005024 <__errno+0x8>)
 800501e:	6818      	ldr	r0, [r3, #0]
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	2000001c 	.word	0x2000001c

08005028 <__libc_init_array>:
 8005028:	b570      	push	{r4, r5, r6, lr}
 800502a:	2600      	movs	r6, #0
 800502c:	4d0c      	ldr	r5, [pc, #48]	; (8005060 <__libc_init_array+0x38>)
 800502e:	4c0d      	ldr	r4, [pc, #52]	; (8005064 <__libc_init_array+0x3c>)
 8005030:	1b64      	subs	r4, r4, r5
 8005032:	10a4      	asrs	r4, r4, #2
 8005034:	42a6      	cmp	r6, r4
 8005036:	d109      	bne.n	800504c <__libc_init_array+0x24>
 8005038:	f002 fefc 	bl	8007e34 <_init>
 800503c:	2600      	movs	r6, #0
 800503e:	4d0a      	ldr	r5, [pc, #40]	; (8005068 <__libc_init_array+0x40>)
 8005040:	4c0a      	ldr	r4, [pc, #40]	; (800506c <__libc_init_array+0x44>)
 8005042:	1b64      	subs	r4, r4, r5
 8005044:	10a4      	asrs	r4, r4, #2
 8005046:	42a6      	cmp	r6, r4
 8005048:	d105      	bne.n	8005056 <__libc_init_array+0x2e>
 800504a:	bd70      	pop	{r4, r5, r6, pc}
 800504c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005050:	4798      	blx	r3
 8005052:	3601      	adds	r6, #1
 8005054:	e7ee      	b.n	8005034 <__libc_init_array+0xc>
 8005056:	f855 3b04 	ldr.w	r3, [r5], #4
 800505a:	4798      	blx	r3
 800505c:	3601      	adds	r6, #1
 800505e:	e7f2      	b.n	8005046 <__libc_init_array+0x1e>
 8005060:	080082ac 	.word	0x080082ac
 8005064:	080082ac 	.word	0x080082ac
 8005068:	080082ac 	.word	0x080082ac
 800506c:	080082b0 	.word	0x080082b0

08005070 <memset>:
 8005070:	4603      	mov	r3, r0
 8005072:	4402      	add	r2, r0
 8005074:	4293      	cmp	r3, r2
 8005076:	d100      	bne.n	800507a <memset+0xa>
 8005078:	4770      	bx	lr
 800507a:	f803 1b01 	strb.w	r1, [r3], #1
 800507e:	e7f9      	b.n	8005074 <memset+0x4>

08005080 <__cvt>:
 8005080:	2b00      	cmp	r3, #0
 8005082:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005086:	461f      	mov	r7, r3
 8005088:	bfbb      	ittet	lt
 800508a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800508e:	461f      	movlt	r7, r3
 8005090:	2300      	movge	r3, #0
 8005092:	232d      	movlt	r3, #45	; 0x2d
 8005094:	b088      	sub	sp, #32
 8005096:	4614      	mov	r4, r2
 8005098:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800509a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800509c:	7013      	strb	r3, [r2, #0]
 800509e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80050a0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80050a4:	f023 0820 	bic.w	r8, r3, #32
 80050a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050ac:	d005      	beq.n	80050ba <__cvt+0x3a>
 80050ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80050b2:	d100      	bne.n	80050b6 <__cvt+0x36>
 80050b4:	3501      	adds	r5, #1
 80050b6:	2302      	movs	r3, #2
 80050b8:	e000      	b.n	80050bc <__cvt+0x3c>
 80050ba:	2303      	movs	r3, #3
 80050bc:	aa07      	add	r2, sp, #28
 80050be:	9204      	str	r2, [sp, #16]
 80050c0:	aa06      	add	r2, sp, #24
 80050c2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80050c6:	e9cd 3500 	strd	r3, r5, [sp]
 80050ca:	4622      	mov	r2, r4
 80050cc:	463b      	mov	r3, r7
 80050ce:	f000 fd03 	bl	8005ad8 <_dtoa_r>
 80050d2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80050d6:	4606      	mov	r6, r0
 80050d8:	d102      	bne.n	80050e0 <__cvt+0x60>
 80050da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050dc:	07db      	lsls	r3, r3, #31
 80050de:	d522      	bpl.n	8005126 <__cvt+0xa6>
 80050e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050e4:	eb06 0905 	add.w	r9, r6, r5
 80050e8:	d110      	bne.n	800510c <__cvt+0x8c>
 80050ea:	7833      	ldrb	r3, [r6, #0]
 80050ec:	2b30      	cmp	r3, #48	; 0x30
 80050ee:	d10a      	bne.n	8005106 <__cvt+0x86>
 80050f0:	2200      	movs	r2, #0
 80050f2:	2300      	movs	r3, #0
 80050f4:	4620      	mov	r0, r4
 80050f6:	4639      	mov	r1, r7
 80050f8:	f7fb fc56 	bl	80009a8 <__aeabi_dcmpeq>
 80050fc:	b918      	cbnz	r0, 8005106 <__cvt+0x86>
 80050fe:	f1c5 0501 	rsb	r5, r5, #1
 8005102:	f8ca 5000 	str.w	r5, [sl]
 8005106:	f8da 3000 	ldr.w	r3, [sl]
 800510a:	4499      	add	r9, r3
 800510c:	2200      	movs	r2, #0
 800510e:	2300      	movs	r3, #0
 8005110:	4620      	mov	r0, r4
 8005112:	4639      	mov	r1, r7
 8005114:	f7fb fc48 	bl	80009a8 <__aeabi_dcmpeq>
 8005118:	b108      	cbz	r0, 800511e <__cvt+0x9e>
 800511a:	f8cd 901c 	str.w	r9, [sp, #28]
 800511e:	2230      	movs	r2, #48	; 0x30
 8005120:	9b07      	ldr	r3, [sp, #28]
 8005122:	454b      	cmp	r3, r9
 8005124:	d307      	bcc.n	8005136 <__cvt+0xb6>
 8005126:	4630      	mov	r0, r6
 8005128:	9b07      	ldr	r3, [sp, #28]
 800512a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800512c:	1b9b      	subs	r3, r3, r6
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	b008      	add	sp, #32
 8005132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005136:	1c59      	adds	r1, r3, #1
 8005138:	9107      	str	r1, [sp, #28]
 800513a:	701a      	strb	r2, [r3, #0]
 800513c:	e7f0      	b.n	8005120 <__cvt+0xa0>

0800513e <__exponent>:
 800513e:	4603      	mov	r3, r0
 8005140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005142:	2900      	cmp	r1, #0
 8005144:	f803 2b02 	strb.w	r2, [r3], #2
 8005148:	bfb6      	itet	lt
 800514a:	222d      	movlt	r2, #45	; 0x2d
 800514c:	222b      	movge	r2, #43	; 0x2b
 800514e:	4249      	neglt	r1, r1
 8005150:	2909      	cmp	r1, #9
 8005152:	7042      	strb	r2, [r0, #1]
 8005154:	dd2b      	ble.n	80051ae <__exponent+0x70>
 8005156:	f10d 0407 	add.w	r4, sp, #7
 800515a:	46a4      	mov	ip, r4
 800515c:	270a      	movs	r7, #10
 800515e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005162:	460a      	mov	r2, r1
 8005164:	46a6      	mov	lr, r4
 8005166:	fb07 1516 	mls	r5, r7, r6, r1
 800516a:	2a63      	cmp	r2, #99	; 0x63
 800516c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005170:	4631      	mov	r1, r6
 8005172:	f104 34ff 	add.w	r4, r4, #4294967295
 8005176:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800517a:	dcf0      	bgt.n	800515e <__exponent+0x20>
 800517c:	3130      	adds	r1, #48	; 0x30
 800517e:	f1ae 0502 	sub.w	r5, lr, #2
 8005182:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005186:	4629      	mov	r1, r5
 8005188:	1c44      	adds	r4, r0, #1
 800518a:	4561      	cmp	r1, ip
 800518c:	d30a      	bcc.n	80051a4 <__exponent+0x66>
 800518e:	f10d 0209 	add.w	r2, sp, #9
 8005192:	eba2 020e 	sub.w	r2, r2, lr
 8005196:	4565      	cmp	r5, ip
 8005198:	bf88      	it	hi
 800519a:	2200      	movhi	r2, #0
 800519c:	4413      	add	r3, r2
 800519e:	1a18      	subs	r0, r3, r0
 80051a0:	b003      	add	sp, #12
 80051a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051a8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80051ac:	e7ed      	b.n	800518a <__exponent+0x4c>
 80051ae:	2330      	movs	r3, #48	; 0x30
 80051b0:	3130      	adds	r1, #48	; 0x30
 80051b2:	7083      	strb	r3, [r0, #2]
 80051b4:	70c1      	strb	r1, [r0, #3]
 80051b6:	1d03      	adds	r3, r0, #4
 80051b8:	e7f1      	b.n	800519e <__exponent+0x60>
	...

080051bc <_printf_float>:
 80051bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c0:	b091      	sub	sp, #68	; 0x44
 80051c2:	460c      	mov	r4, r1
 80051c4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80051c8:	4616      	mov	r6, r2
 80051ca:	461f      	mov	r7, r3
 80051cc:	4605      	mov	r5, r0
 80051ce:	f001 fa83 	bl	80066d8 <_localeconv_r>
 80051d2:	6803      	ldr	r3, [r0, #0]
 80051d4:	4618      	mov	r0, r3
 80051d6:	9309      	str	r3, [sp, #36]	; 0x24
 80051d8:	f7fa ffba 	bl	8000150 <strlen>
 80051dc:	2300      	movs	r3, #0
 80051de:	930e      	str	r3, [sp, #56]	; 0x38
 80051e0:	f8d8 3000 	ldr.w	r3, [r8]
 80051e4:	900a      	str	r0, [sp, #40]	; 0x28
 80051e6:	3307      	adds	r3, #7
 80051e8:	f023 0307 	bic.w	r3, r3, #7
 80051ec:	f103 0208 	add.w	r2, r3, #8
 80051f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80051f4:	f8d4 b000 	ldr.w	fp, [r4]
 80051f8:	f8c8 2000 	str.w	r2, [r8]
 80051fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005200:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005204:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005208:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800520c:	930b      	str	r3, [sp, #44]	; 0x2c
 800520e:	f04f 32ff 	mov.w	r2, #4294967295
 8005212:	4640      	mov	r0, r8
 8005214:	4b9c      	ldr	r3, [pc, #624]	; (8005488 <_printf_float+0x2cc>)
 8005216:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005218:	f7fb fbf8 	bl	8000a0c <__aeabi_dcmpun>
 800521c:	bb70      	cbnz	r0, 800527c <_printf_float+0xc0>
 800521e:	f04f 32ff 	mov.w	r2, #4294967295
 8005222:	4640      	mov	r0, r8
 8005224:	4b98      	ldr	r3, [pc, #608]	; (8005488 <_printf_float+0x2cc>)
 8005226:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005228:	f7fb fbd2 	bl	80009d0 <__aeabi_dcmple>
 800522c:	bb30      	cbnz	r0, 800527c <_printf_float+0xc0>
 800522e:	2200      	movs	r2, #0
 8005230:	2300      	movs	r3, #0
 8005232:	4640      	mov	r0, r8
 8005234:	4651      	mov	r1, sl
 8005236:	f7fb fbc1 	bl	80009bc <__aeabi_dcmplt>
 800523a:	b110      	cbz	r0, 8005242 <_printf_float+0x86>
 800523c:	232d      	movs	r3, #45	; 0x2d
 800523e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005242:	4b92      	ldr	r3, [pc, #584]	; (800548c <_printf_float+0x2d0>)
 8005244:	4892      	ldr	r0, [pc, #584]	; (8005490 <_printf_float+0x2d4>)
 8005246:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800524a:	bf94      	ite	ls
 800524c:	4698      	movls	r8, r3
 800524e:	4680      	movhi	r8, r0
 8005250:	2303      	movs	r3, #3
 8005252:	f04f 0a00 	mov.w	sl, #0
 8005256:	6123      	str	r3, [r4, #16]
 8005258:	f02b 0304 	bic.w	r3, fp, #4
 800525c:	6023      	str	r3, [r4, #0]
 800525e:	4633      	mov	r3, r6
 8005260:	4621      	mov	r1, r4
 8005262:	4628      	mov	r0, r5
 8005264:	9700      	str	r7, [sp, #0]
 8005266:	aa0f      	add	r2, sp, #60	; 0x3c
 8005268:	f000 f9d4 	bl	8005614 <_printf_common>
 800526c:	3001      	adds	r0, #1
 800526e:	f040 8090 	bne.w	8005392 <_printf_float+0x1d6>
 8005272:	f04f 30ff 	mov.w	r0, #4294967295
 8005276:	b011      	add	sp, #68	; 0x44
 8005278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800527c:	4642      	mov	r2, r8
 800527e:	4653      	mov	r3, sl
 8005280:	4640      	mov	r0, r8
 8005282:	4651      	mov	r1, sl
 8005284:	f7fb fbc2 	bl	8000a0c <__aeabi_dcmpun>
 8005288:	b148      	cbz	r0, 800529e <_printf_float+0xe2>
 800528a:	f1ba 0f00 	cmp.w	sl, #0
 800528e:	bfb8      	it	lt
 8005290:	232d      	movlt	r3, #45	; 0x2d
 8005292:	4880      	ldr	r0, [pc, #512]	; (8005494 <_printf_float+0x2d8>)
 8005294:	bfb8      	it	lt
 8005296:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800529a:	4b7f      	ldr	r3, [pc, #508]	; (8005498 <_printf_float+0x2dc>)
 800529c:	e7d3      	b.n	8005246 <_printf_float+0x8a>
 800529e:	6863      	ldr	r3, [r4, #4]
 80052a0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	d142      	bne.n	800532e <_printf_float+0x172>
 80052a8:	2306      	movs	r3, #6
 80052aa:	6063      	str	r3, [r4, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	9206      	str	r2, [sp, #24]
 80052b0:	aa0e      	add	r2, sp, #56	; 0x38
 80052b2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80052b6:	aa0d      	add	r2, sp, #52	; 0x34
 80052b8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80052bc:	9203      	str	r2, [sp, #12]
 80052be:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80052c2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80052c6:	6023      	str	r3, [r4, #0]
 80052c8:	6863      	ldr	r3, [r4, #4]
 80052ca:	4642      	mov	r2, r8
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	4628      	mov	r0, r5
 80052d0:	4653      	mov	r3, sl
 80052d2:	910b      	str	r1, [sp, #44]	; 0x2c
 80052d4:	f7ff fed4 	bl	8005080 <__cvt>
 80052d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052da:	4680      	mov	r8, r0
 80052dc:	2947      	cmp	r1, #71	; 0x47
 80052de:	990d      	ldr	r1, [sp, #52]	; 0x34
 80052e0:	d108      	bne.n	80052f4 <_printf_float+0x138>
 80052e2:	1cc8      	adds	r0, r1, #3
 80052e4:	db02      	blt.n	80052ec <_printf_float+0x130>
 80052e6:	6863      	ldr	r3, [r4, #4]
 80052e8:	4299      	cmp	r1, r3
 80052ea:	dd40      	ble.n	800536e <_printf_float+0x1b2>
 80052ec:	f1a9 0902 	sub.w	r9, r9, #2
 80052f0:	fa5f f989 	uxtb.w	r9, r9
 80052f4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80052f8:	d81f      	bhi.n	800533a <_printf_float+0x17e>
 80052fa:	464a      	mov	r2, r9
 80052fc:	3901      	subs	r1, #1
 80052fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005302:	910d      	str	r1, [sp, #52]	; 0x34
 8005304:	f7ff ff1b 	bl	800513e <__exponent>
 8005308:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800530a:	4682      	mov	sl, r0
 800530c:	1813      	adds	r3, r2, r0
 800530e:	2a01      	cmp	r2, #1
 8005310:	6123      	str	r3, [r4, #16]
 8005312:	dc02      	bgt.n	800531a <_printf_float+0x15e>
 8005314:	6822      	ldr	r2, [r4, #0]
 8005316:	07d2      	lsls	r2, r2, #31
 8005318:	d501      	bpl.n	800531e <_printf_float+0x162>
 800531a:	3301      	adds	r3, #1
 800531c:	6123      	str	r3, [r4, #16]
 800531e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005322:	2b00      	cmp	r3, #0
 8005324:	d09b      	beq.n	800525e <_printf_float+0xa2>
 8005326:	232d      	movs	r3, #45	; 0x2d
 8005328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800532c:	e797      	b.n	800525e <_printf_float+0xa2>
 800532e:	2947      	cmp	r1, #71	; 0x47
 8005330:	d1bc      	bne.n	80052ac <_printf_float+0xf0>
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1ba      	bne.n	80052ac <_printf_float+0xf0>
 8005336:	2301      	movs	r3, #1
 8005338:	e7b7      	b.n	80052aa <_printf_float+0xee>
 800533a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800533e:	d118      	bne.n	8005372 <_printf_float+0x1b6>
 8005340:	2900      	cmp	r1, #0
 8005342:	6863      	ldr	r3, [r4, #4]
 8005344:	dd0b      	ble.n	800535e <_printf_float+0x1a2>
 8005346:	6121      	str	r1, [r4, #16]
 8005348:	b913      	cbnz	r3, 8005350 <_printf_float+0x194>
 800534a:	6822      	ldr	r2, [r4, #0]
 800534c:	07d0      	lsls	r0, r2, #31
 800534e:	d502      	bpl.n	8005356 <_printf_float+0x19a>
 8005350:	3301      	adds	r3, #1
 8005352:	440b      	add	r3, r1
 8005354:	6123      	str	r3, [r4, #16]
 8005356:	f04f 0a00 	mov.w	sl, #0
 800535a:	65a1      	str	r1, [r4, #88]	; 0x58
 800535c:	e7df      	b.n	800531e <_printf_float+0x162>
 800535e:	b913      	cbnz	r3, 8005366 <_printf_float+0x1aa>
 8005360:	6822      	ldr	r2, [r4, #0]
 8005362:	07d2      	lsls	r2, r2, #31
 8005364:	d501      	bpl.n	800536a <_printf_float+0x1ae>
 8005366:	3302      	adds	r3, #2
 8005368:	e7f4      	b.n	8005354 <_printf_float+0x198>
 800536a:	2301      	movs	r3, #1
 800536c:	e7f2      	b.n	8005354 <_printf_float+0x198>
 800536e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005372:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005374:	4299      	cmp	r1, r3
 8005376:	db05      	blt.n	8005384 <_printf_float+0x1c8>
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	6121      	str	r1, [r4, #16]
 800537c:	07d8      	lsls	r0, r3, #31
 800537e:	d5ea      	bpl.n	8005356 <_printf_float+0x19a>
 8005380:	1c4b      	adds	r3, r1, #1
 8005382:	e7e7      	b.n	8005354 <_printf_float+0x198>
 8005384:	2900      	cmp	r1, #0
 8005386:	bfcc      	ite	gt
 8005388:	2201      	movgt	r2, #1
 800538a:	f1c1 0202 	rsble	r2, r1, #2
 800538e:	4413      	add	r3, r2
 8005390:	e7e0      	b.n	8005354 <_printf_float+0x198>
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	055a      	lsls	r2, r3, #21
 8005396:	d407      	bmi.n	80053a8 <_printf_float+0x1ec>
 8005398:	6923      	ldr	r3, [r4, #16]
 800539a:	4642      	mov	r2, r8
 800539c:	4631      	mov	r1, r6
 800539e:	4628      	mov	r0, r5
 80053a0:	47b8      	blx	r7
 80053a2:	3001      	adds	r0, #1
 80053a4:	d12b      	bne.n	80053fe <_printf_float+0x242>
 80053a6:	e764      	b.n	8005272 <_printf_float+0xb6>
 80053a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80053ac:	f240 80dd 	bls.w	800556a <_printf_float+0x3ae>
 80053b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053b4:	2200      	movs	r2, #0
 80053b6:	2300      	movs	r3, #0
 80053b8:	f7fb faf6 	bl	80009a8 <__aeabi_dcmpeq>
 80053bc:	2800      	cmp	r0, #0
 80053be:	d033      	beq.n	8005428 <_printf_float+0x26c>
 80053c0:	2301      	movs	r3, #1
 80053c2:	4631      	mov	r1, r6
 80053c4:	4628      	mov	r0, r5
 80053c6:	4a35      	ldr	r2, [pc, #212]	; (800549c <_printf_float+0x2e0>)
 80053c8:	47b8      	blx	r7
 80053ca:	3001      	adds	r0, #1
 80053cc:	f43f af51 	beq.w	8005272 <_printf_float+0xb6>
 80053d0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80053d4:	429a      	cmp	r2, r3
 80053d6:	db02      	blt.n	80053de <_printf_float+0x222>
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	07d8      	lsls	r0, r3, #31
 80053dc:	d50f      	bpl.n	80053fe <_printf_float+0x242>
 80053de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053e2:	4631      	mov	r1, r6
 80053e4:	4628      	mov	r0, r5
 80053e6:	47b8      	blx	r7
 80053e8:	3001      	adds	r0, #1
 80053ea:	f43f af42 	beq.w	8005272 <_printf_float+0xb6>
 80053ee:	f04f 0800 	mov.w	r8, #0
 80053f2:	f104 091a 	add.w	r9, r4, #26
 80053f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053f8:	3b01      	subs	r3, #1
 80053fa:	4543      	cmp	r3, r8
 80053fc:	dc09      	bgt.n	8005412 <_printf_float+0x256>
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	079b      	lsls	r3, r3, #30
 8005402:	f100 8102 	bmi.w	800560a <_printf_float+0x44e>
 8005406:	68e0      	ldr	r0, [r4, #12]
 8005408:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800540a:	4298      	cmp	r0, r3
 800540c:	bfb8      	it	lt
 800540e:	4618      	movlt	r0, r3
 8005410:	e731      	b.n	8005276 <_printf_float+0xba>
 8005412:	2301      	movs	r3, #1
 8005414:	464a      	mov	r2, r9
 8005416:	4631      	mov	r1, r6
 8005418:	4628      	mov	r0, r5
 800541a:	47b8      	blx	r7
 800541c:	3001      	adds	r0, #1
 800541e:	f43f af28 	beq.w	8005272 <_printf_float+0xb6>
 8005422:	f108 0801 	add.w	r8, r8, #1
 8005426:	e7e6      	b.n	80053f6 <_printf_float+0x23a>
 8005428:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800542a:	2b00      	cmp	r3, #0
 800542c:	dc38      	bgt.n	80054a0 <_printf_float+0x2e4>
 800542e:	2301      	movs	r3, #1
 8005430:	4631      	mov	r1, r6
 8005432:	4628      	mov	r0, r5
 8005434:	4a19      	ldr	r2, [pc, #100]	; (800549c <_printf_float+0x2e0>)
 8005436:	47b8      	blx	r7
 8005438:	3001      	adds	r0, #1
 800543a:	f43f af1a 	beq.w	8005272 <_printf_float+0xb6>
 800543e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005442:	4313      	orrs	r3, r2
 8005444:	d102      	bne.n	800544c <_printf_float+0x290>
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	07d9      	lsls	r1, r3, #31
 800544a:	d5d8      	bpl.n	80053fe <_printf_float+0x242>
 800544c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005450:	4631      	mov	r1, r6
 8005452:	4628      	mov	r0, r5
 8005454:	47b8      	blx	r7
 8005456:	3001      	adds	r0, #1
 8005458:	f43f af0b 	beq.w	8005272 <_printf_float+0xb6>
 800545c:	f04f 0900 	mov.w	r9, #0
 8005460:	f104 0a1a 	add.w	sl, r4, #26
 8005464:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005466:	425b      	negs	r3, r3
 8005468:	454b      	cmp	r3, r9
 800546a:	dc01      	bgt.n	8005470 <_printf_float+0x2b4>
 800546c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800546e:	e794      	b.n	800539a <_printf_float+0x1de>
 8005470:	2301      	movs	r3, #1
 8005472:	4652      	mov	r2, sl
 8005474:	4631      	mov	r1, r6
 8005476:	4628      	mov	r0, r5
 8005478:	47b8      	blx	r7
 800547a:	3001      	adds	r0, #1
 800547c:	f43f aef9 	beq.w	8005272 <_printf_float+0xb6>
 8005480:	f109 0901 	add.w	r9, r9, #1
 8005484:	e7ee      	b.n	8005464 <_printf_float+0x2a8>
 8005486:	bf00      	nop
 8005488:	7fefffff 	.word	0x7fefffff
 800548c:	08007ed0 	.word	0x08007ed0
 8005490:	08007ed4 	.word	0x08007ed4
 8005494:	08007edc 	.word	0x08007edc
 8005498:	08007ed8 	.word	0x08007ed8
 800549c:	08007ee0 	.word	0x08007ee0
 80054a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054a4:	429a      	cmp	r2, r3
 80054a6:	bfa8      	it	ge
 80054a8:	461a      	movge	r2, r3
 80054aa:	2a00      	cmp	r2, #0
 80054ac:	4691      	mov	r9, r2
 80054ae:	dc37      	bgt.n	8005520 <_printf_float+0x364>
 80054b0:	f04f 0b00 	mov.w	fp, #0
 80054b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054b8:	f104 021a 	add.w	r2, r4, #26
 80054bc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80054c0:	ebaa 0309 	sub.w	r3, sl, r9
 80054c4:	455b      	cmp	r3, fp
 80054c6:	dc33      	bgt.n	8005530 <_printf_float+0x374>
 80054c8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054cc:	429a      	cmp	r2, r3
 80054ce:	db3b      	blt.n	8005548 <_printf_float+0x38c>
 80054d0:	6823      	ldr	r3, [r4, #0]
 80054d2:	07da      	lsls	r2, r3, #31
 80054d4:	d438      	bmi.n	8005548 <_printf_float+0x38c>
 80054d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80054da:	eba3 020a 	sub.w	r2, r3, sl
 80054de:	eba3 0901 	sub.w	r9, r3, r1
 80054e2:	4591      	cmp	r9, r2
 80054e4:	bfa8      	it	ge
 80054e6:	4691      	movge	r9, r2
 80054e8:	f1b9 0f00 	cmp.w	r9, #0
 80054ec:	dc34      	bgt.n	8005558 <_printf_float+0x39c>
 80054ee:	f04f 0800 	mov.w	r8, #0
 80054f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054f6:	f104 0a1a 	add.w	sl, r4, #26
 80054fa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054fe:	1a9b      	subs	r3, r3, r2
 8005500:	eba3 0309 	sub.w	r3, r3, r9
 8005504:	4543      	cmp	r3, r8
 8005506:	f77f af7a 	ble.w	80053fe <_printf_float+0x242>
 800550a:	2301      	movs	r3, #1
 800550c:	4652      	mov	r2, sl
 800550e:	4631      	mov	r1, r6
 8005510:	4628      	mov	r0, r5
 8005512:	47b8      	blx	r7
 8005514:	3001      	adds	r0, #1
 8005516:	f43f aeac 	beq.w	8005272 <_printf_float+0xb6>
 800551a:	f108 0801 	add.w	r8, r8, #1
 800551e:	e7ec      	b.n	80054fa <_printf_float+0x33e>
 8005520:	4613      	mov	r3, r2
 8005522:	4631      	mov	r1, r6
 8005524:	4642      	mov	r2, r8
 8005526:	4628      	mov	r0, r5
 8005528:	47b8      	blx	r7
 800552a:	3001      	adds	r0, #1
 800552c:	d1c0      	bne.n	80054b0 <_printf_float+0x2f4>
 800552e:	e6a0      	b.n	8005272 <_printf_float+0xb6>
 8005530:	2301      	movs	r3, #1
 8005532:	4631      	mov	r1, r6
 8005534:	4628      	mov	r0, r5
 8005536:	920b      	str	r2, [sp, #44]	; 0x2c
 8005538:	47b8      	blx	r7
 800553a:	3001      	adds	r0, #1
 800553c:	f43f ae99 	beq.w	8005272 <_printf_float+0xb6>
 8005540:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005542:	f10b 0b01 	add.w	fp, fp, #1
 8005546:	e7b9      	b.n	80054bc <_printf_float+0x300>
 8005548:	4631      	mov	r1, r6
 800554a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800554e:	4628      	mov	r0, r5
 8005550:	47b8      	blx	r7
 8005552:	3001      	adds	r0, #1
 8005554:	d1bf      	bne.n	80054d6 <_printf_float+0x31a>
 8005556:	e68c      	b.n	8005272 <_printf_float+0xb6>
 8005558:	464b      	mov	r3, r9
 800555a:	4631      	mov	r1, r6
 800555c:	4628      	mov	r0, r5
 800555e:	eb08 020a 	add.w	r2, r8, sl
 8005562:	47b8      	blx	r7
 8005564:	3001      	adds	r0, #1
 8005566:	d1c2      	bne.n	80054ee <_printf_float+0x332>
 8005568:	e683      	b.n	8005272 <_printf_float+0xb6>
 800556a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800556c:	2a01      	cmp	r2, #1
 800556e:	dc01      	bgt.n	8005574 <_printf_float+0x3b8>
 8005570:	07db      	lsls	r3, r3, #31
 8005572:	d537      	bpl.n	80055e4 <_printf_float+0x428>
 8005574:	2301      	movs	r3, #1
 8005576:	4642      	mov	r2, r8
 8005578:	4631      	mov	r1, r6
 800557a:	4628      	mov	r0, r5
 800557c:	47b8      	blx	r7
 800557e:	3001      	adds	r0, #1
 8005580:	f43f ae77 	beq.w	8005272 <_printf_float+0xb6>
 8005584:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005588:	4631      	mov	r1, r6
 800558a:	4628      	mov	r0, r5
 800558c:	47b8      	blx	r7
 800558e:	3001      	adds	r0, #1
 8005590:	f43f ae6f 	beq.w	8005272 <_printf_float+0xb6>
 8005594:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005598:	2200      	movs	r2, #0
 800559a:	2300      	movs	r3, #0
 800559c:	f7fb fa04 	bl	80009a8 <__aeabi_dcmpeq>
 80055a0:	b9d8      	cbnz	r0, 80055da <_printf_float+0x41e>
 80055a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055a4:	f108 0201 	add.w	r2, r8, #1
 80055a8:	3b01      	subs	r3, #1
 80055aa:	4631      	mov	r1, r6
 80055ac:	4628      	mov	r0, r5
 80055ae:	47b8      	blx	r7
 80055b0:	3001      	adds	r0, #1
 80055b2:	d10e      	bne.n	80055d2 <_printf_float+0x416>
 80055b4:	e65d      	b.n	8005272 <_printf_float+0xb6>
 80055b6:	2301      	movs	r3, #1
 80055b8:	464a      	mov	r2, r9
 80055ba:	4631      	mov	r1, r6
 80055bc:	4628      	mov	r0, r5
 80055be:	47b8      	blx	r7
 80055c0:	3001      	adds	r0, #1
 80055c2:	f43f ae56 	beq.w	8005272 <_printf_float+0xb6>
 80055c6:	f108 0801 	add.w	r8, r8, #1
 80055ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055cc:	3b01      	subs	r3, #1
 80055ce:	4543      	cmp	r3, r8
 80055d0:	dcf1      	bgt.n	80055b6 <_printf_float+0x3fa>
 80055d2:	4653      	mov	r3, sl
 80055d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80055d8:	e6e0      	b.n	800539c <_printf_float+0x1e0>
 80055da:	f04f 0800 	mov.w	r8, #0
 80055de:	f104 091a 	add.w	r9, r4, #26
 80055e2:	e7f2      	b.n	80055ca <_printf_float+0x40e>
 80055e4:	2301      	movs	r3, #1
 80055e6:	4642      	mov	r2, r8
 80055e8:	e7df      	b.n	80055aa <_printf_float+0x3ee>
 80055ea:	2301      	movs	r3, #1
 80055ec:	464a      	mov	r2, r9
 80055ee:	4631      	mov	r1, r6
 80055f0:	4628      	mov	r0, r5
 80055f2:	47b8      	blx	r7
 80055f4:	3001      	adds	r0, #1
 80055f6:	f43f ae3c 	beq.w	8005272 <_printf_float+0xb6>
 80055fa:	f108 0801 	add.w	r8, r8, #1
 80055fe:	68e3      	ldr	r3, [r4, #12]
 8005600:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005602:	1a5b      	subs	r3, r3, r1
 8005604:	4543      	cmp	r3, r8
 8005606:	dcf0      	bgt.n	80055ea <_printf_float+0x42e>
 8005608:	e6fd      	b.n	8005406 <_printf_float+0x24a>
 800560a:	f04f 0800 	mov.w	r8, #0
 800560e:	f104 0919 	add.w	r9, r4, #25
 8005612:	e7f4      	b.n	80055fe <_printf_float+0x442>

08005614 <_printf_common>:
 8005614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005618:	4616      	mov	r6, r2
 800561a:	4699      	mov	r9, r3
 800561c:	688a      	ldr	r2, [r1, #8]
 800561e:	690b      	ldr	r3, [r1, #16]
 8005620:	4607      	mov	r7, r0
 8005622:	4293      	cmp	r3, r2
 8005624:	bfb8      	it	lt
 8005626:	4613      	movlt	r3, r2
 8005628:	6033      	str	r3, [r6, #0]
 800562a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800562e:	460c      	mov	r4, r1
 8005630:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005634:	b10a      	cbz	r2, 800563a <_printf_common+0x26>
 8005636:	3301      	adds	r3, #1
 8005638:	6033      	str	r3, [r6, #0]
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	0699      	lsls	r1, r3, #26
 800563e:	bf42      	ittt	mi
 8005640:	6833      	ldrmi	r3, [r6, #0]
 8005642:	3302      	addmi	r3, #2
 8005644:	6033      	strmi	r3, [r6, #0]
 8005646:	6825      	ldr	r5, [r4, #0]
 8005648:	f015 0506 	ands.w	r5, r5, #6
 800564c:	d106      	bne.n	800565c <_printf_common+0x48>
 800564e:	f104 0a19 	add.w	sl, r4, #25
 8005652:	68e3      	ldr	r3, [r4, #12]
 8005654:	6832      	ldr	r2, [r6, #0]
 8005656:	1a9b      	subs	r3, r3, r2
 8005658:	42ab      	cmp	r3, r5
 800565a:	dc28      	bgt.n	80056ae <_printf_common+0x9a>
 800565c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005660:	1e13      	subs	r3, r2, #0
 8005662:	6822      	ldr	r2, [r4, #0]
 8005664:	bf18      	it	ne
 8005666:	2301      	movne	r3, #1
 8005668:	0692      	lsls	r2, r2, #26
 800566a:	d42d      	bmi.n	80056c8 <_printf_common+0xb4>
 800566c:	4649      	mov	r1, r9
 800566e:	4638      	mov	r0, r7
 8005670:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005674:	47c0      	blx	r8
 8005676:	3001      	adds	r0, #1
 8005678:	d020      	beq.n	80056bc <_printf_common+0xa8>
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	68e5      	ldr	r5, [r4, #12]
 800567e:	f003 0306 	and.w	r3, r3, #6
 8005682:	2b04      	cmp	r3, #4
 8005684:	bf18      	it	ne
 8005686:	2500      	movne	r5, #0
 8005688:	6832      	ldr	r2, [r6, #0]
 800568a:	f04f 0600 	mov.w	r6, #0
 800568e:	68a3      	ldr	r3, [r4, #8]
 8005690:	bf08      	it	eq
 8005692:	1aad      	subeq	r5, r5, r2
 8005694:	6922      	ldr	r2, [r4, #16]
 8005696:	bf08      	it	eq
 8005698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800569c:	4293      	cmp	r3, r2
 800569e:	bfc4      	itt	gt
 80056a0:	1a9b      	subgt	r3, r3, r2
 80056a2:	18ed      	addgt	r5, r5, r3
 80056a4:	341a      	adds	r4, #26
 80056a6:	42b5      	cmp	r5, r6
 80056a8:	d11a      	bne.n	80056e0 <_printf_common+0xcc>
 80056aa:	2000      	movs	r0, #0
 80056ac:	e008      	b.n	80056c0 <_printf_common+0xac>
 80056ae:	2301      	movs	r3, #1
 80056b0:	4652      	mov	r2, sl
 80056b2:	4649      	mov	r1, r9
 80056b4:	4638      	mov	r0, r7
 80056b6:	47c0      	blx	r8
 80056b8:	3001      	adds	r0, #1
 80056ba:	d103      	bne.n	80056c4 <_printf_common+0xb0>
 80056bc:	f04f 30ff 	mov.w	r0, #4294967295
 80056c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056c4:	3501      	adds	r5, #1
 80056c6:	e7c4      	b.n	8005652 <_printf_common+0x3e>
 80056c8:	2030      	movs	r0, #48	; 0x30
 80056ca:	18e1      	adds	r1, r4, r3
 80056cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056d6:	4422      	add	r2, r4
 80056d8:	3302      	adds	r3, #2
 80056da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056de:	e7c5      	b.n	800566c <_printf_common+0x58>
 80056e0:	2301      	movs	r3, #1
 80056e2:	4622      	mov	r2, r4
 80056e4:	4649      	mov	r1, r9
 80056e6:	4638      	mov	r0, r7
 80056e8:	47c0      	blx	r8
 80056ea:	3001      	adds	r0, #1
 80056ec:	d0e6      	beq.n	80056bc <_printf_common+0xa8>
 80056ee:	3601      	adds	r6, #1
 80056f0:	e7d9      	b.n	80056a6 <_printf_common+0x92>
	...

080056f4 <_printf_i>:
 80056f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056f8:	7e0f      	ldrb	r7, [r1, #24]
 80056fa:	4691      	mov	r9, r2
 80056fc:	2f78      	cmp	r7, #120	; 0x78
 80056fe:	4680      	mov	r8, r0
 8005700:	460c      	mov	r4, r1
 8005702:	469a      	mov	sl, r3
 8005704:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005706:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800570a:	d807      	bhi.n	800571c <_printf_i+0x28>
 800570c:	2f62      	cmp	r7, #98	; 0x62
 800570e:	d80a      	bhi.n	8005726 <_printf_i+0x32>
 8005710:	2f00      	cmp	r7, #0
 8005712:	f000 80d9 	beq.w	80058c8 <_printf_i+0x1d4>
 8005716:	2f58      	cmp	r7, #88	; 0x58
 8005718:	f000 80a4 	beq.w	8005864 <_printf_i+0x170>
 800571c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005720:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005724:	e03a      	b.n	800579c <_printf_i+0xa8>
 8005726:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800572a:	2b15      	cmp	r3, #21
 800572c:	d8f6      	bhi.n	800571c <_printf_i+0x28>
 800572e:	a101      	add	r1, pc, #4	; (adr r1, 8005734 <_printf_i+0x40>)
 8005730:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005734:	0800578d 	.word	0x0800578d
 8005738:	080057a1 	.word	0x080057a1
 800573c:	0800571d 	.word	0x0800571d
 8005740:	0800571d 	.word	0x0800571d
 8005744:	0800571d 	.word	0x0800571d
 8005748:	0800571d 	.word	0x0800571d
 800574c:	080057a1 	.word	0x080057a1
 8005750:	0800571d 	.word	0x0800571d
 8005754:	0800571d 	.word	0x0800571d
 8005758:	0800571d 	.word	0x0800571d
 800575c:	0800571d 	.word	0x0800571d
 8005760:	080058af 	.word	0x080058af
 8005764:	080057d1 	.word	0x080057d1
 8005768:	08005891 	.word	0x08005891
 800576c:	0800571d 	.word	0x0800571d
 8005770:	0800571d 	.word	0x0800571d
 8005774:	080058d1 	.word	0x080058d1
 8005778:	0800571d 	.word	0x0800571d
 800577c:	080057d1 	.word	0x080057d1
 8005780:	0800571d 	.word	0x0800571d
 8005784:	0800571d 	.word	0x0800571d
 8005788:	08005899 	.word	0x08005899
 800578c:	682b      	ldr	r3, [r5, #0]
 800578e:	1d1a      	adds	r2, r3, #4
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	602a      	str	r2, [r5, #0]
 8005794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800579c:	2301      	movs	r3, #1
 800579e:	e0a4      	b.n	80058ea <_printf_i+0x1f6>
 80057a0:	6820      	ldr	r0, [r4, #0]
 80057a2:	6829      	ldr	r1, [r5, #0]
 80057a4:	0606      	lsls	r6, r0, #24
 80057a6:	f101 0304 	add.w	r3, r1, #4
 80057aa:	d50a      	bpl.n	80057c2 <_printf_i+0xce>
 80057ac:	680e      	ldr	r6, [r1, #0]
 80057ae:	602b      	str	r3, [r5, #0]
 80057b0:	2e00      	cmp	r6, #0
 80057b2:	da03      	bge.n	80057bc <_printf_i+0xc8>
 80057b4:	232d      	movs	r3, #45	; 0x2d
 80057b6:	4276      	negs	r6, r6
 80057b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057bc:	230a      	movs	r3, #10
 80057be:	485e      	ldr	r0, [pc, #376]	; (8005938 <_printf_i+0x244>)
 80057c0:	e019      	b.n	80057f6 <_printf_i+0x102>
 80057c2:	680e      	ldr	r6, [r1, #0]
 80057c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057c8:	602b      	str	r3, [r5, #0]
 80057ca:	bf18      	it	ne
 80057cc:	b236      	sxthne	r6, r6
 80057ce:	e7ef      	b.n	80057b0 <_printf_i+0xbc>
 80057d0:	682b      	ldr	r3, [r5, #0]
 80057d2:	6820      	ldr	r0, [r4, #0]
 80057d4:	1d19      	adds	r1, r3, #4
 80057d6:	6029      	str	r1, [r5, #0]
 80057d8:	0601      	lsls	r1, r0, #24
 80057da:	d501      	bpl.n	80057e0 <_printf_i+0xec>
 80057dc:	681e      	ldr	r6, [r3, #0]
 80057de:	e002      	b.n	80057e6 <_printf_i+0xf2>
 80057e0:	0646      	lsls	r6, r0, #25
 80057e2:	d5fb      	bpl.n	80057dc <_printf_i+0xe8>
 80057e4:	881e      	ldrh	r6, [r3, #0]
 80057e6:	2f6f      	cmp	r7, #111	; 0x6f
 80057e8:	bf0c      	ite	eq
 80057ea:	2308      	moveq	r3, #8
 80057ec:	230a      	movne	r3, #10
 80057ee:	4852      	ldr	r0, [pc, #328]	; (8005938 <_printf_i+0x244>)
 80057f0:	2100      	movs	r1, #0
 80057f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057f6:	6865      	ldr	r5, [r4, #4]
 80057f8:	2d00      	cmp	r5, #0
 80057fa:	bfa8      	it	ge
 80057fc:	6821      	ldrge	r1, [r4, #0]
 80057fe:	60a5      	str	r5, [r4, #8]
 8005800:	bfa4      	itt	ge
 8005802:	f021 0104 	bicge.w	r1, r1, #4
 8005806:	6021      	strge	r1, [r4, #0]
 8005808:	b90e      	cbnz	r6, 800580e <_printf_i+0x11a>
 800580a:	2d00      	cmp	r5, #0
 800580c:	d04d      	beq.n	80058aa <_printf_i+0x1b6>
 800580e:	4615      	mov	r5, r2
 8005810:	fbb6 f1f3 	udiv	r1, r6, r3
 8005814:	fb03 6711 	mls	r7, r3, r1, r6
 8005818:	5dc7      	ldrb	r7, [r0, r7]
 800581a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800581e:	4637      	mov	r7, r6
 8005820:	42bb      	cmp	r3, r7
 8005822:	460e      	mov	r6, r1
 8005824:	d9f4      	bls.n	8005810 <_printf_i+0x11c>
 8005826:	2b08      	cmp	r3, #8
 8005828:	d10b      	bne.n	8005842 <_printf_i+0x14e>
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	07de      	lsls	r6, r3, #31
 800582e:	d508      	bpl.n	8005842 <_printf_i+0x14e>
 8005830:	6923      	ldr	r3, [r4, #16]
 8005832:	6861      	ldr	r1, [r4, #4]
 8005834:	4299      	cmp	r1, r3
 8005836:	bfde      	ittt	le
 8005838:	2330      	movle	r3, #48	; 0x30
 800583a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800583e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005842:	1b52      	subs	r2, r2, r5
 8005844:	6122      	str	r2, [r4, #16]
 8005846:	464b      	mov	r3, r9
 8005848:	4621      	mov	r1, r4
 800584a:	4640      	mov	r0, r8
 800584c:	f8cd a000 	str.w	sl, [sp]
 8005850:	aa03      	add	r2, sp, #12
 8005852:	f7ff fedf 	bl	8005614 <_printf_common>
 8005856:	3001      	adds	r0, #1
 8005858:	d14c      	bne.n	80058f4 <_printf_i+0x200>
 800585a:	f04f 30ff 	mov.w	r0, #4294967295
 800585e:	b004      	add	sp, #16
 8005860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005864:	4834      	ldr	r0, [pc, #208]	; (8005938 <_printf_i+0x244>)
 8005866:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800586a:	6829      	ldr	r1, [r5, #0]
 800586c:	6823      	ldr	r3, [r4, #0]
 800586e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005872:	6029      	str	r1, [r5, #0]
 8005874:	061d      	lsls	r5, r3, #24
 8005876:	d514      	bpl.n	80058a2 <_printf_i+0x1ae>
 8005878:	07df      	lsls	r7, r3, #31
 800587a:	bf44      	itt	mi
 800587c:	f043 0320 	orrmi.w	r3, r3, #32
 8005880:	6023      	strmi	r3, [r4, #0]
 8005882:	b91e      	cbnz	r6, 800588c <_printf_i+0x198>
 8005884:	6823      	ldr	r3, [r4, #0]
 8005886:	f023 0320 	bic.w	r3, r3, #32
 800588a:	6023      	str	r3, [r4, #0]
 800588c:	2310      	movs	r3, #16
 800588e:	e7af      	b.n	80057f0 <_printf_i+0xfc>
 8005890:	6823      	ldr	r3, [r4, #0]
 8005892:	f043 0320 	orr.w	r3, r3, #32
 8005896:	6023      	str	r3, [r4, #0]
 8005898:	2378      	movs	r3, #120	; 0x78
 800589a:	4828      	ldr	r0, [pc, #160]	; (800593c <_printf_i+0x248>)
 800589c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058a0:	e7e3      	b.n	800586a <_printf_i+0x176>
 80058a2:	0659      	lsls	r1, r3, #25
 80058a4:	bf48      	it	mi
 80058a6:	b2b6      	uxthmi	r6, r6
 80058a8:	e7e6      	b.n	8005878 <_printf_i+0x184>
 80058aa:	4615      	mov	r5, r2
 80058ac:	e7bb      	b.n	8005826 <_printf_i+0x132>
 80058ae:	682b      	ldr	r3, [r5, #0]
 80058b0:	6826      	ldr	r6, [r4, #0]
 80058b2:	1d18      	adds	r0, r3, #4
 80058b4:	6961      	ldr	r1, [r4, #20]
 80058b6:	6028      	str	r0, [r5, #0]
 80058b8:	0635      	lsls	r5, r6, #24
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	d501      	bpl.n	80058c2 <_printf_i+0x1ce>
 80058be:	6019      	str	r1, [r3, #0]
 80058c0:	e002      	b.n	80058c8 <_printf_i+0x1d4>
 80058c2:	0670      	lsls	r0, r6, #25
 80058c4:	d5fb      	bpl.n	80058be <_printf_i+0x1ca>
 80058c6:	8019      	strh	r1, [r3, #0]
 80058c8:	2300      	movs	r3, #0
 80058ca:	4615      	mov	r5, r2
 80058cc:	6123      	str	r3, [r4, #16]
 80058ce:	e7ba      	b.n	8005846 <_printf_i+0x152>
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	2100      	movs	r1, #0
 80058d4:	1d1a      	adds	r2, r3, #4
 80058d6:	602a      	str	r2, [r5, #0]
 80058d8:	681d      	ldr	r5, [r3, #0]
 80058da:	6862      	ldr	r2, [r4, #4]
 80058dc:	4628      	mov	r0, r5
 80058de:	f000 ff07 	bl	80066f0 <memchr>
 80058e2:	b108      	cbz	r0, 80058e8 <_printf_i+0x1f4>
 80058e4:	1b40      	subs	r0, r0, r5
 80058e6:	6060      	str	r0, [r4, #4]
 80058e8:	6863      	ldr	r3, [r4, #4]
 80058ea:	6123      	str	r3, [r4, #16]
 80058ec:	2300      	movs	r3, #0
 80058ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058f2:	e7a8      	b.n	8005846 <_printf_i+0x152>
 80058f4:	462a      	mov	r2, r5
 80058f6:	4649      	mov	r1, r9
 80058f8:	4640      	mov	r0, r8
 80058fa:	6923      	ldr	r3, [r4, #16]
 80058fc:	47d0      	blx	sl
 80058fe:	3001      	adds	r0, #1
 8005900:	d0ab      	beq.n	800585a <_printf_i+0x166>
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	079b      	lsls	r3, r3, #30
 8005906:	d413      	bmi.n	8005930 <_printf_i+0x23c>
 8005908:	68e0      	ldr	r0, [r4, #12]
 800590a:	9b03      	ldr	r3, [sp, #12]
 800590c:	4298      	cmp	r0, r3
 800590e:	bfb8      	it	lt
 8005910:	4618      	movlt	r0, r3
 8005912:	e7a4      	b.n	800585e <_printf_i+0x16a>
 8005914:	2301      	movs	r3, #1
 8005916:	4632      	mov	r2, r6
 8005918:	4649      	mov	r1, r9
 800591a:	4640      	mov	r0, r8
 800591c:	47d0      	blx	sl
 800591e:	3001      	adds	r0, #1
 8005920:	d09b      	beq.n	800585a <_printf_i+0x166>
 8005922:	3501      	adds	r5, #1
 8005924:	68e3      	ldr	r3, [r4, #12]
 8005926:	9903      	ldr	r1, [sp, #12]
 8005928:	1a5b      	subs	r3, r3, r1
 800592a:	42ab      	cmp	r3, r5
 800592c:	dcf2      	bgt.n	8005914 <_printf_i+0x220>
 800592e:	e7eb      	b.n	8005908 <_printf_i+0x214>
 8005930:	2500      	movs	r5, #0
 8005932:	f104 0619 	add.w	r6, r4, #25
 8005936:	e7f5      	b.n	8005924 <_printf_i+0x230>
 8005938:	08007ee2 	.word	0x08007ee2
 800593c:	08007ef3 	.word	0x08007ef3

08005940 <siprintf>:
 8005940:	b40e      	push	{r1, r2, r3}
 8005942:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005946:	b500      	push	{lr}
 8005948:	b09c      	sub	sp, #112	; 0x70
 800594a:	ab1d      	add	r3, sp, #116	; 0x74
 800594c:	9002      	str	r0, [sp, #8]
 800594e:	9006      	str	r0, [sp, #24]
 8005950:	9107      	str	r1, [sp, #28]
 8005952:	9104      	str	r1, [sp, #16]
 8005954:	4808      	ldr	r0, [pc, #32]	; (8005978 <siprintf+0x38>)
 8005956:	4909      	ldr	r1, [pc, #36]	; (800597c <siprintf+0x3c>)
 8005958:	f853 2b04 	ldr.w	r2, [r3], #4
 800595c:	9105      	str	r1, [sp, #20]
 800595e:	6800      	ldr	r0, [r0, #0]
 8005960:	a902      	add	r1, sp, #8
 8005962:	9301      	str	r3, [sp, #4]
 8005964:	f001 fbae 	bl	80070c4 <_svfiprintf_r>
 8005968:	2200      	movs	r2, #0
 800596a:	9b02      	ldr	r3, [sp, #8]
 800596c:	701a      	strb	r2, [r3, #0]
 800596e:	b01c      	add	sp, #112	; 0x70
 8005970:	f85d eb04 	ldr.w	lr, [sp], #4
 8005974:	b003      	add	sp, #12
 8005976:	4770      	bx	lr
 8005978:	2000001c 	.word	0x2000001c
 800597c:	ffff0208 	.word	0xffff0208

08005980 <__assert_func>:
 8005980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005982:	4614      	mov	r4, r2
 8005984:	461a      	mov	r2, r3
 8005986:	4b09      	ldr	r3, [pc, #36]	; (80059ac <__assert_func+0x2c>)
 8005988:	4605      	mov	r5, r0
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68d8      	ldr	r0, [r3, #12]
 800598e:	b14c      	cbz	r4, 80059a4 <__assert_func+0x24>
 8005990:	4b07      	ldr	r3, [pc, #28]	; (80059b0 <__assert_func+0x30>)
 8005992:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005996:	9100      	str	r1, [sp, #0]
 8005998:	462b      	mov	r3, r5
 800599a:	4906      	ldr	r1, [pc, #24]	; (80059b4 <__assert_func+0x34>)
 800599c:	f000 fe8a 	bl	80066b4 <fiprintf>
 80059a0:	f001 feb8 	bl	8007714 <abort>
 80059a4:	4b04      	ldr	r3, [pc, #16]	; (80059b8 <__assert_func+0x38>)
 80059a6:	461c      	mov	r4, r3
 80059a8:	e7f3      	b.n	8005992 <__assert_func+0x12>
 80059aa:	bf00      	nop
 80059ac:	2000001c 	.word	0x2000001c
 80059b0:	08007f04 	.word	0x08007f04
 80059b4:	08007f11 	.word	0x08007f11
 80059b8:	08007f3f 	.word	0x08007f3f

080059bc <quorem>:
 80059bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c0:	6903      	ldr	r3, [r0, #16]
 80059c2:	690c      	ldr	r4, [r1, #16]
 80059c4:	4607      	mov	r7, r0
 80059c6:	42a3      	cmp	r3, r4
 80059c8:	f2c0 8082 	blt.w	8005ad0 <quorem+0x114>
 80059cc:	3c01      	subs	r4, #1
 80059ce:	f100 0514 	add.w	r5, r0, #20
 80059d2:	f101 0814 	add.w	r8, r1, #20
 80059d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059da:	9301      	str	r3, [sp, #4]
 80059dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059e4:	3301      	adds	r3, #1
 80059e6:	429a      	cmp	r2, r3
 80059e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80059ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80059f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059f4:	d331      	bcc.n	8005a5a <quorem+0x9e>
 80059f6:	f04f 0e00 	mov.w	lr, #0
 80059fa:	4640      	mov	r0, r8
 80059fc:	46ac      	mov	ip, r5
 80059fe:	46f2      	mov	sl, lr
 8005a00:	f850 2b04 	ldr.w	r2, [r0], #4
 8005a04:	b293      	uxth	r3, r2
 8005a06:	fb06 e303 	mla	r3, r6, r3, lr
 8005a0a:	0c12      	lsrs	r2, r2, #16
 8005a0c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	fb06 e202 	mla	r2, r6, r2, lr
 8005a16:	ebaa 0303 	sub.w	r3, sl, r3
 8005a1a:	f8dc a000 	ldr.w	sl, [ip]
 8005a1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a22:	fa1f fa8a 	uxth.w	sl, sl
 8005a26:	4453      	add	r3, sl
 8005a28:	f8dc a000 	ldr.w	sl, [ip]
 8005a2c:	b292      	uxth	r2, r2
 8005a2e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005a32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a3c:	4581      	cmp	r9, r0
 8005a3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005a42:	f84c 3b04 	str.w	r3, [ip], #4
 8005a46:	d2db      	bcs.n	8005a00 <quorem+0x44>
 8005a48:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a4c:	b92b      	cbnz	r3, 8005a5a <quorem+0x9e>
 8005a4e:	9b01      	ldr	r3, [sp, #4]
 8005a50:	3b04      	subs	r3, #4
 8005a52:	429d      	cmp	r5, r3
 8005a54:	461a      	mov	r2, r3
 8005a56:	d32f      	bcc.n	8005ab8 <quorem+0xfc>
 8005a58:	613c      	str	r4, [r7, #16]
 8005a5a:	4638      	mov	r0, r7
 8005a5c:	f001 f8e2 	bl	8006c24 <__mcmp>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	db25      	blt.n	8005ab0 <quorem+0xf4>
 8005a64:	4628      	mov	r0, r5
 8005a66:	f04f 0c00 	mov.w	ip, #0
 8005a6a:	3601      	adds	r6, #1
 8005a6c:	f858 1b04 	ldr.w	r1, [r8], #4
 8005a70:	f8d0 e000 	ldr.w	lr, [r0]
 8005a74:	b28b      	uxth	r3, r1
 8005a76:	ebac 0303 	sub.w	r3, ip, r3
 8005a7a:	fa1f f28e 	uxth.w	r2, lr
 8005a7e:	4413      	add	r3, r2
 8005a80:	0c0a      	lsrs	r2, r1, #16
 8005a82:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005a86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a90:	45c1      	cmp	r9, r8
 8005a92:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005a96:	f840 3b04 	str.w	r3, [r0], #4
 8005a9a:	d2e7      	bcs.n	8005a6c <quorem+0xb0>
 8005a9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005aa0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005aa4:	b922      	cbnz	r2, 8005ab0 <quorem+0xf4>
 8005aa6:	3b04      	subs	r3, #4
 8005aa8:	429d      	cmp	r5, r3
 8005aaa:	461a      	mov	r2, r3
 8005aac:	d30a      	bcc.n	8005ac4 <quorem+0x108>
 8005aae:	613c      	str	r4, [r7, #16]
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	b003      	add	sp, #12
 8005ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab8:	6812      	ldr	r2, [r2, #0]
 8005aba:	3b04      	subs	r3, #4
 8005abc:	2a00      	cmp	r2, #0
 8005abe:	d1cb      	bne.n	8005a58 <quorem+0x9c>
 8005ac0:	3c01      	subs	r4, #1
 8005ac2:	e7c6      	b.n	8005a52 <quorem+0x96>
 8005ac4:	6812      	ldr	r2, [r2, #0]
 8005ac6:	3b04      	subs	r3, #4
 8005ac8:	2a00      	cmp	r2, #0
 8005aca:	d1f0      	bne.n	8005aae <quorem+0xf2>
 8005acc:	3c01      	subs	r4, #1
 8005ace:	e7eb      	b.n	8005aa8 <quorem+0xec>
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	e7ee      	b.n	8005ab2 <quorem+0xf6>
 8005ad4:	0000      	movs	r0, r0
	...

08005ad8 <_dtoa_r>:
 8005ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005adc:	4616      	mov	r6, r2
 8005ade:	461f      	mov	r7, r3
 8005ae0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005ae2:	b099      	sub	sp, #100	; 0x64
 8005ae4:	4605      	mov	r5, r0
 8005ae6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005aea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005aee:	b974      	cbnz	r4, 8005b0e <_dtoa_r+0x36>
 8005af0:	2010      	movs	r0, #16
 8005af2:	f000 fdf5 	bl	80066e0 <malloc>
 8005af6:	4602      	mov	r2, r0
 8005af8:	6268      	str	r0, [r5, #36]	; 0x24
 8005afa:	b920      	cbnz	r0, 8005b06 <_dtoa_r+0x2e>
 8005afc:	21ea      	movs	r1, #234	; 0xea
 8005afe:	4ba8      	ldr	r3, [pc, #672]	; (8005da0 <_dtoa_r+0x2c8>)
 8005b00:	48a8      	ldr	r0, [pc, #672]	; (8005da4 <_dtoa_r+0x2cc>)
 8005b02:	f7ff ff3d 	bl	8005980 <__assert_func>
 8005b06:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b0a:	6004      	str	r4, [r0, #0]
 8005b0c:	60c4      	str	r4, [r0, #12]
 8005b0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b10:	6819      	ldr	r1, [r3, #0]
 8005b12:	b151      	cbz	r1, 8005b2a <_dtoa_r+0x52>
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	2301      	movs	r3, #1
 8005b18:	4093      	lsls	r3, r2
 8005b1a:	604a      	str	r2, [r1, #4]
 8005b1c:	608b      	str	r3, [r1, #8]
 8005b1e:	4628      	mov	r0, r5
 8005b20:	f000 fe42 	bl	80067a8 <_Bfree>
 8005b24:	2200      	movs	r2, #0
 8005b26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	1e3b      	subs	r3, r7, #0
 8005b2c:	bfaf      	iteee	ge
 8005b2e:	2300      	movge	r3, #0
 8005b30:	2201      	movlt	r2, #1
 8005b32:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005b36:	9305      	strlt	r3, [sp, #20]
 8005b38:	bfa8      	it	ge
 8005b3a:	f8c8 3000 	strge.w	r3, [r8]
 8005b3e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005b42:	4b99      	ldr	r3, [pc, #612]	; (8005da8 <_dtoa_r+0x2d0>)
 8005b44:	bfb8      	it	lt
 8005b46:	f8c8 2000 	strlt.w	r2, [r8]
 8005b4a:	ea33 0309 	bics.w	r3, r3, r9
 8005b4e:	d119      	bne.n	8005b84 <_dtoa_r+0xac>
 8005b50:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b54:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005b56:	6013      	str	r3, [r2, #0]
 8005b58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b5c:	4333      	orrs	r3, r6
 8005b5e:	f000 857f 	beq.w	8006660 <_dtoa_r+0xb88>
 8005b62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b64:	b953      	cbnz	r3, 8005b7c <_dtoa_r+0xa4>
 8005b66:	4b91      	ldr	r3, [pc, #580]	; (8005dac <_dtoa_r+0x2d4>)
 8005b68:	e022      	b.n	8005bb0 <_dtoa_r+0xd8>
 8005b6a:	4b91      	ldr	r3, [pc, #580]	; (8005db0 <_dtoa_r+0x2d8>)
 8005b6c:	9303      	str	r3, [sp, #12]
 8005b6e:	3308      	adds	r3, #8
 8005b70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	9803      	ldr	r0, [sp, #12]
 8005b76:	b019      	add	sp, #100	; 0x64
 8005b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7c:	4b8b      	ldr	r3, [pc, #556]	; (8005dac <_dtoa_r+0x2d4>)
 8005b7e:	9303      	str	r3, [sp, #12]
 8005b80:	3303      	adds	r3, #3
 8005b82:	e7f5      	b.n	8005b70 <_dtoa_r+0x98>
 8005b84:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005b88:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005b8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b90:	2200      	movs	r2, #0
 8005b92:	2300      	movs	r3, #0
 8005b94:	f7fa ff08 	bl	80009a8 <__aeabi_dcmpeq>
 8005b98:	4680      	mov	r8, r0
 8005b9a:	b158      	cbz	r0, 8005bb4 <_dtoa_r+0xdc>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 8558 	beq.w	800665a <_dtoa_r+0xb82>
 8005baa:	4882      	ldr	r0, [pc, #520]	; (8005db4 <_dtoa_r+0x2dc>)
 8005bac:	6018      	str	r0, [r3, #0]
 8005bae:	1e43      	subs	r3, r0, #1
 8005bb0:	9303      	str	r3, [sp, #12]
 8005bb2:	e7df      	b.n	8005b74 <_dtoa_r+0x9c>
 8005bb4:	ab16      	add	r3, sp, #88	; 0x58
 8005bb6:	9301      	str	r3, [sp, #4]
 8005bb8:	ab17      	add	r3, sp, #92	; 0x5c
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005bc2:	f001 f8d7 	bl	8006d74 <__d2b>
 8005bc6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005bca:	4683      	mov	fp, r0
 8005bcc:	2c00      	cmp	r4, #0
 8005bce:	d07f      	beq.n	8005cd0 <_dtoa_r+0x1f8>
 8005bd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bd6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005bda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bde:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005be2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005be6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005bea:	2200      	movs	r2, #0
 8005bec:	4b72      	ldr	r3, [pc, #456]	; (8005db8 <_dtoa_r+0x2e0>)
 8005bee:	f7fa fabb 	bl	8000168 <__aeabi_dsub>
 8005bf2:	a365      	add	r3, pc, #404	; (adr r3, 8005d88 <_dtoa_r+0x2b0>)
 8005bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf8:	f7fa fc6e 	bl	80004d8 <__aeabi_dmul>
 8005bfc:	a364      	add	r3, pc, #400	; (adr r3, 8005d90 <_dtoa_r+0x2b8>)
 8005bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c02:	f7fa fab3 	bl	800016c <__adddf3>
 8005c06:	4606      	mov	r6, r0
 8005c08:	4620      	mov	r0, r4
 8005c0a:	460f      	mov	r7, r1
 8005c0c:	f7fa fbfa 	bl	8000404 <__aeabi_i2d>
 8005c10:	a361      	add	r3, pc, #388	; (adr r3, 8005d98 <_dtoa_r+0x2c0>)
 8005c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c16:	f7fa fc5f 	bl	80004d8 <__aeabi_dmul>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4630      	mov	r0, r6
 8005c20:	4639      	mov	r1, r7
 8005c22:	f7fa faa3 	bl	800016c <__adddf3>
 8005c26:	4606      	mov	r6, r0
 8005c28:	460f      	mov	r7, r1
 8005c2a:	f7fa ff05 	bl	8000a38 <__aeabi_d2iz>
 8005c2e:	2200      	movs	r2, #0
 8005c30:	4682      	mov	sl, r0
 8005c32:	2300      	movs	r3, #0
 8005c34:	4630      	mov	r0, r6
 8005c36:	4639      	mov	r1, r7
 8005c38:	f7fa fec0 	bl	80009bc <__aeabi_dcmplt>
 8005c3c:	b148      	cbz	r0, 8005c52 <_dtoa_r+0x17a>
 8005c3e:	4650      	mov	r0, sl
 8005c40:	f7fa fbe0 	bl	8000404 <__aeabi_i2d>
 8005c44:	4632      	mov	r2, r6
 8005c46:	463b      	mov	r3, r7
 8005c48:	f7fa feae 	bl	80009a8 <__aeabi_dcmpeq>
 8005c4c:	b908      	cbnz	r0, 8005c52 <_dtoa_r+0x17a>
 8005c4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c52:	f1ba 0f16 	cmp.w	sl, #22
 8005c56:	d858      	bhi.n	8005d0a <_dtoa_r+0x232>
 8005c58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c5c:	4b57      	ldr	r3, [pc, #348]	; (8005dbc <_dtoa_r+0x2e4>)
 8005c5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c66:	f7fa fea9 	bl	80009bc <__aeabi_dcmplt>
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	d04f      	beq.n	8005d0e <_dtoa_r+0x236>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c74:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c76:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005c78:	1b1c      	subs	r4, r3, r4
 8005c7a:	1e63      	subs	r3, r4, #1
 8005c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c7e:	bf49      	itett	mi
 8005c80:	f1c4 0301 	rsbmi	r3, r4, #1
 8005c84:	2300      	movpl	r3, #0
 8005c86:	9306      	strmi	r3, [sp, #24]
 8005c88:	2300      	movmi	r3, #0
 8005c8a:	bf54      	ite	pl
 8005c8c:	9306      	strpl	r3, [sp, #24]
 8005c8e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005c90:	f1ba 0f00 	cmp.w	sl, #0
 8005c94:	db3d      	blt.n	8005d12 <_dtoa_r+0x23a>
 8005c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c98:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005c9c:	4453      	add	r3, sl
 8005c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	930a      	str	r3, [sp, #40]	; 0x28
 8005ca4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ca6:	2b09      	cmp	r3, #9
 8005ca8:	f200 808c 	bhi.w	8005dc4 <_dtoa_r+0x2ec>
 8005cac:	2b05      	cmp	r3, #5
 8005cae:	bfc4      	itt	gt
 8005cb0:	3b04      	subgt	r3, #4
 8005cb2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005cb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cb6:	bfc8      	it	gt
 8005cb8:	2400      	movgt	r4, #0
 8005cba:	f1a3 0302 	sub.w	r3, r3, #2
 8005cbe:	bfd8      	it	le
 8005cc0:	2401      	movle	r4, #1
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	f200 808a 	bhi.w	8005ddc <_dtoa_r+0x304>
 8005cc8:	e8df f003 	tbb	[pc, r3]
 8005ccc:	5b4d4f2d 	.word	0x5b4d4f2d
 8005cd0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005cd4:	441c      	add	r4, r3
 8005cd6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005cda:	2b20      	cmp	r3, #32
 8005cdc:	bfc3      	ittte	gt
 8005cde:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005ce2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005ce6:	fa09 f303 	lslgt.w	r3, r9, r3
 8005cea:	f1c3 0320 	rsble	r3, r3, #32
 8005cee:	bfc6      	itte	gt
 8005cf0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005cf4:	4318      	orrgt	r0, r3
 8005cf6:	fa06 f003 	lslle.w	r0, r6, r3
 8005cfa:	f7fa fb73 	bl	80003e4 <__aeabi_ui2d>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005d04:	3c01      	subs	r4, #1
 8005d06:	9313      	str	r3, [sp, #76]	; 0x4c
 8005d08:	e76f      	b.n	8005bea <_dtoa_r+0x112>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e7b2      	b.n	8005c74 <_dtoa_r+0x19c>
 8005d0e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005d10:	e7b1      	b.n	8005c76 <_dtoa_r+0x19e>
 8005d12:	9b06      	ldr	r3, [sp, #24]
 8005d14:	eba3 030a 	sub.w	r3, r3, sl
 8005d18:	9306      	str	r3, [sp, #24]
 8005d1a:	f1ca 0300 	rsb	r3, sl, #0
 8005d1e:	930a      	str	r3, [sp, #40]	; 0x28
 8005d20:	2300      	movs	r3, #0
 8005d22:	930e      	str	r3, [sp, #56]	; 0x38
 8005d24:	e7be      	b.n	8005ca4 <_dtoa_r+0x1cc>
 8005d26:	2300      	movs	r3, #0
 8005d28:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	dc58      	bgt.n	8005de2 <_dtoa_r+0x30a>
 8005d30:	f04f 0901 	mov.w	r9, #1
 8005d34:	464b      	mov	r3, r9
 8005d36:	f8cd 9020 	str.w	r9, [sp, #32]
 8005d3a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005d3e:	2200      	movs	r2, #0
 8005d40:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005d42:	6042      	str	r2, [r0, #4]
 8005d44:	2204      	movs	r2, #4
 8005d46:	f102 0614 	add.w	r6, r2, #20
 8005d4a:	429e      	cmp	r6, r3
 8005d4c:	6841      	ldr	r1, [r0, #4]
 8005d4e:	d94e      	bls.n	8005dee <_dtoa_r+0x316>
 8005d50:	4628      	mov	r0, r5
 8005d52:	f000 fce9 	bl	8006728 <_Balloc>
 8005d56:	9003      	str	r0, [sp, #12]
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	d14c      	bne.n	8005df6 <_dtoa_r+0x31e>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005d62:	4b17      	ldr	r3, [pc, #92]	; (8005dc0 <_dtoa_r+0x2e8>)
 8005d64:	e6cc      	b.n	8005b00 <_dtoa_r+0x28>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e7de      	b.n	8005d28 <_dtoa_r+0x250>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d6e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d70:	eb0a 0903 	add.w	r9, sl, r3
 8005d74:	f109 0301 	add.w	r3, r9, #1
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	9308      	str	r3, [sp, #32]
 8005d7c:	bfb8      	it	lt
 8005d7e:	2301      	movlt	r3, #1
 8005d80:	e7dd      	b.n	8005d3e <_dtoa_r+0x266>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e7f2      	b.n	8005d6c <_dtoa_r+0x294>
 8005d86:	bf00      	nop
 8005d88:	636f4361 	.word	0x636f4361
 8005d8c:	3fd287a7 	.word	0x3fd287a7
 8005d90:	8b60c8b3 	.word	0x8b60c8b3
 8005d94:	3fc68a28 	.word	0x3fc68a28
 8005d98:	509f79fb 	.word	0x509f79fb
 8005d9c:	3fd34413 	.word	0x3fd34413
 8005da0:	08007f4d 	.word	0x08007f4d
 8005da4:	08007f64 	.word	0x08007f64
 8005da8:	7ff00000 	.word	0x7ff00000
 8005dac:	08007f49 	.word	0x08007f49
 8005db0:	08007f40 	.word	0x08007f40
 8005db4:	08007ee1 	.word	0x08007ee1
 8005db8:	3ff80000 	.word	0x3ff80000
 8005dbc:	08008058 	.word	0x08008058
 8005dc0:	08007fbf 	.word	0x08007fbf
 8005dc4:	2401      	movs	r4, #1
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	940b      	str	r4, [sp, #44]	; 0x2c
 8005dca:	9322      	str	r3, [sp, #136]	; 0x88
 8005dcc:	f04f 39ff 	mov.w	r9, #4294967295
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	2312      	movs	r3, #18
 8005dd4:	f8cd 9020 	str.w	r9, [sp, #32]
 8005dd8:	9223      	str	r2, [sp, #140]	; 0x8c
 8005dda:	e7b0      	b.n	8005d3e <_dtoa_r+0x266>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	930b      	str	r3, [sp, #44]	; 0x2c
 8005de0:	e7f4      	b.n	8005dcc <_dtoa_r+0x2f4>
 8005de2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005de6:	464b      	mov	r3, r9
 8005de8:	f8cd 9020 	str.w	r9, [sp, #32]
 8005dec:	e7a7      	b.n	8005d3e <_dtoa_r+0x266>
 8005dee:	3101      	adds	r1, #1
 8005df0:	6041      	str	r1, [r0, #4]
 8005df2:	0052      	lsls	r2, r2, #1
 8005df4:	e7a7      	b.n	8005d46 <_dtoa_r+0x26e>
 8005df6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005df8:	9a03      	ldr	r2, [sp, #12]
 8005dfa:	601a      	str	r2, [r3, #0]
 8005dfc:	9b08      	ldr	r3, [sp, #32]
 8005dfe:	2b0e      	cmp	r3, #14
 8005e00:	f200 80a8 	bhi.w	8005f54 <_dtoa_r+0x47c>
 8005e04:	2c00      	cmp	r4, #0
 8005e06:	f000 80a5 	beq.w	8005f54 <_dtoa_r+0x47c>
 8005e0a:	f1ba 0f00 	cmp.w	sl, #0
 8005e0e:	dd34      	ble.n	8005e7a <_dtoa_r+0x3a2>
 8005e10:	4a9a      	ldr	r2, [pc, #616]	; (800607c <_dtoa_r+0x5a4>)
 8005e12:	f00a 030f 	and.w	r3, sl, #15
 8005e16:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005e1a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005e1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e22:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005e26:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005e2a:	d016      	beq.n	8005e5a <_dtoa_r+0x382>
 8005e2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e30:	4b93      	ldr	r3, [pc, #588]	; (8006080 <_dtoa_r+0x5a8>)
 8005e32:	2703      	movs	r7, #3
 8005e34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e38:	f7fa fc78 	bl	800072c <__aeabi_ddiv>
 8005e3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e40:	f004 040f 	and.w	r4, r4, #15
 8005e44:	4e8e      	ldr	r6, [pc, #568]	; (8006080 <_dtoa_r+0x5a8>)
 8005e46:	b954      	cbnz	r4, 8005e5e <_dtoa_r+0x386>
 8005e48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e50:	f7fa fc6c 	bl	800072c <__aeabi_ddiv>
 8005e54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e58:	e029      	b.n	8005eae <_dtoa_r+0x3d6>
 8005e5a:	2702      	movs	r7, #2
 8005e5c:	e7f2      	b.n	8005e44 <_dtoa_r+0x36c>
 8005e5e:	07e1      	lsls	r1, r4, #31
 8005e60:	d508      	bpl.n	8005e74 <_dtoa_r+0x39c>
 8005e62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e66:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e6a:	f7fa fb35 	bl	80004d8 <__aeabi_dmul>
 8005e6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e72:	3701      	adds	r7, #1
 8005e74:	1064      	asrs	r4, r4, #1
 8005e76:	3608      	adds	r6, #8
 8005e78:	e7e5      	b.n	8005e46 <_dtoa_r+0x36e>
 8005e7a:	f000 80a5 	beq.w	8005fc8 <_dtoa_r+0x4f0>
 8005e7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e82:	f1ca 0400 	rsb	r4, sl, #0
 8005e86:	4b7d      	ldr	r3, [pc, #500]	; (800607c <_dtoa_r+0x5a4>)
 8005e88:	f004 020f 	and.w	r2, r4, #15
 8005e8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	f7fa fb20 	bl	80004d8 <__aeabi_dmul>
 8005e98:	2702      	movs	r7, #2
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ea0:	4e77      	ldr	r6, [pc, #476]	; (8006080 <_dtoa_r+0x5a8>)
 8005ea2:	1124      	asrs	r4, r4, #4
 8005ea4:	2c00      	cmp	r4, #0
 8005ea6:	f040 8084 	bne.w	8005fb2 <_dtoa_r+0x4da>
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1d2      	bne.n	8005e54 <_dtoa_r+0x37c>
 8005eae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 808b 	beq.w	8005fcc <_dtoa_r+0x4f4>
 8005eb6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005eba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005ebe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	4b6f      	ldr	r3, [pc, #444]	; (8006084 <_dtoa_r+0x5ac>)
 8005ec6:	f7fa fd79 	bl	80009bc <__aeabi_dcmplt>
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	d07e      	beq.n	8005fcc <_dtoa_r+0x4f4>
 8005ece:	9b08      	ldr	r3, [sp, #32]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d07b      	beq.n	8005fcc <_dtoa_r+0x4f4>
 8005ed4:	f1b9 0f00 	cmp.w	r9, #0
 8005ed8:	dd38      	ble.n	8005f4c <_dtoa_r+0x474>
 8005eda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ede:	2200      	movs	r2, #0
 8005ee0:	4b69      	ldr	r3, [pc, #420]	; (8006088 <_dtoa_r+0x5b0>)
 8005ee2:	f7fa faf9 	bl	80004d8 <__aeabi_dmul>
 8005ee6:	464c      	mov	r4, r9
 8005ee8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005eec:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005ef0:	3701      	adds	r7, #1
 8005ef2:	4638      	mov	r0, r7
 8005ef4:	f7fa fa86 	bl	8000404 <__aeabi_i2d>
 8005ef8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005efc:	f7fa faec 	bl	80004d8 <__aeabi_dmul>
 8005f00:	2200      	movs	r2, #0
 8005f02:	4b62      	ldr	r3, [pc, #392]	; (800608c <_dtoa_r+0x5b4>)
 8005f04:	f7fa f932 	bl	800016c <__adddf3>
 8005f08:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005f0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f10:	9611      	str	r6, [sp, #68]	; 0x44
 8005f12:	2c00      	cmp	r4, #0
 8005f14:	d15d      	bne.n	8005fd2 <_dtoa_r+0x4fa>
 8005f16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	4b5c      	ldr	r3, [pc, #368]	; (8006090 <_dtoa_r+0x5b8>)
 8005f1e:	f7fa f923 	bl	8000168 <__aeabi_dsub>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f2a:	4633      	mov	r3, r6
 8005f2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f2e:	f7fa fd63 	bl	80009f8 <__aeabi_dcmpgt>
 8005f32:	2800      	cmp	r0, #0
 8005f34:	f040 829c 	bne.w	8006470 <_dtoa_r+0x998>
 8005f38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f3e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005f42:	f7fa fd3b 	bl	80009bc <__aeabi_dcmplt>
 8005f46:	2800      	cmp	r0, #0
 8005f48:	f040 8290 	bne.w	800646c <_dtoa_r+0x994>
 8005f4c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005f50:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005f54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f2c0 8152 	blt.w	8006200 <_dtoa_r+0x728>
 8005f5c:	f1ba 0f0e 	cmp.w	sl, #14
 8005f60:	f300 814e 	bgt.w	8006200 <_dtoa_r+0x728>
 8005f64:	4b45      	ldr	r3, [pc, #276]	; (800607c <_dtoa_r+0x5a4>)
 8005f66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005f6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f6e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005f72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f280 80db 	bge.w	8006130 <_dtoa_r+0x658>
 8005f7a:	9b08      	ldr	r3, [sp, #32]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f300 80d7 	bgt.w	8006130 <_dtoa_r+0x658>
 8005f82:	f040 8272 	bne.w	800646a <_dtoa_r+0x992>
 8005f86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	4b40      	ldr	r3, [pc, #256]	; (8006090 <_dtoa_r+0x5b8>)
 8005f8e:	f7fa faa3 	bl	80004d8 <__aeabi_dmul>
 8005f92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f96:	f7fa fd25 	bl	80009e4 <__aeabi_dcmpge>
 8005f9a:	9c08      	ldr	r4, [sp, #32]
 8005f9c:	4626      	mov	r6, r4
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	f040 8248 	bne.w	8006434 <_dtoa_r+0x95c>
 8005fa4:	2331      	movs	r3, #49	; 0x31
 8005fa6:	9f03      	ldr	r7, [sp, #12]
 8005fa8:	f10a 0a01 	add.w	sl, sl, #1
 8005fac:	f807 3b01 	strb.w	r3, [r7], #1
 8005fb0:	e244      	b.n	800643c <_dtoa_r+0x964>
 8005fb2:	07e2      	lsls	r2, r4, #31
 8005fb4:	d505      	bpl.n	8005fc2 <_dtoa_r+0x4ea>
 8005fb6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005fba:	f7fa fa8d 	bl	80004d8 <__aeabi_dmul>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	3701      	adds	r7, #1
 8005fc2:	1064      	asrs	r4, r4, #1
 8005fc4:	3608      	adds	r6, #8
 8005fc6:	e76d      	b.n	8005ea4 <_dtoa_r+0x3cc>
 8005fc8:	2702      	movs	r7, #2
 8005fca:	e770      	b.n	8005eae <_dtoa_r+0x3d6>
 8005fcc:	46d0      	mov	r8, sl
 8005fce:	9c08      	ldr	r4, [sp, #32]
 8005fd0:	e78f      	b.n	8005ef2 <_dtoa_r+0x41a>
 8005fd2:	9903      	ldr	r1, [sp, #12]
 8005fd4:	4b29      	ldr	r3, [pc, #164]	; (800607c <_dtoa_r+0x5a4>)
 8005fd6:	4421      	add	r1, r4
 8005fd8:	9112      	str	r1, [sp, #72]	; 0x48
 8005fda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fdc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005fe0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005fe4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005fe8:	2900      	cmp	r1, #0
 8005fea:	d055      	beq.n	8006098 <_dtoa_r+0x5c0>
 8005fec:	2000      	movs	r0, #0
 8005fee:	4929      	ldr	r1, [pc, #164]	; (8006094 <_dtoa_r+0x5bc>)
 8005ff0:	f7fa fb9c 	bl	800072c <__aeabi_ddiv>
 8005ff4:	463b      	mov	r3, r7
 8005ff6:	4632      	mov	r2, r6
 8005ff8:	f7fa f8b6 	bl	8000168 <__aeabi_dsub>
 8005ffc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006000:	9f03      	ldr	r7, [sp, #12]
 8006002:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006006:	f7fa fd17 	bl	8000a38 <__aeabi_d2iz>
 800600a:	4604      	mov	r4, r0
 800600c:	f7fa f9fa 	bl	8000404 <__aeabi_i2d>
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006018:	f7fa f8a6 	bl	8000168 <__aeabi_dsub>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	3430      	adds	r4, #48	; 0x30
 8006022:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006026:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800602a:	f807 4b01 	strb.w	r4, [r7], #1
 800602e:	f7fa fcc5 	bl	80009bc <__aeabi_dcmplt>
 8006032:	2800      	cmp	r0, #0
 8006034:	d174      	bne.n	8006120 <_dtoa_r+0x648>
 8006036:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800603a:	2000      	movs	r0, #0
 800603c:	4911      	ldr	r1, [pc, #68]	; (8006084 <_dtoa_r+0x5ac>)
 800603e:	f7fa f893 	bl	8000168 <__aeabi_dsub>
 8006042:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006046:	f7fa fcb9 	bl	80009bc <__aeabi_dcmplt>
 800604a:	2800      	cmp	r0, #0
 800604c:	f040 80b7 	bne.w	80061be <_dtoa_r+0x6e6>
 8006050:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006052:	429f      	cmp	r7, r3
 8006054:	f43f af7a 	beq.w	8005f4c <_dtoa_r+0x474>
 8006058:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800605c:	2200      	movs	r2, #0
 800605e:	4b0a      	ldr	r3, [pc, #40]	; (8006088 <_dtoa_r+0x5b0>)
 8006060:	f7fa fa3a 	bl	80004d8 <__aeabi_dmul>
 8006064:	2200      	movs	r2, #0
 8006066:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800606a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800606e:	4b06      	ldr	r3, [pc, #24]	; (8006088 <_dtoa_r+0x5b0>)
 8006070:	f7fa fa32 	bl	80004d8 <__aeabi_dmul>
 8006074:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006078:	e7c3      	b.n	8006002 <_dtoa_r+0x52a>
 800607a:	bf00      	nop
 800607c:	08008058 	.word	0x08008058
 8006080:	08008030 	.word	0x08008030
 8006084:	3ff00000 	.word	0x3ff00000
 8006088:	40240000 	.word	0x40240000
 800608c:	401c0000 	.word	0x401c0000
 8006090:	40140000 	.word	0x40140000
 8006094:	3fe00000 	.word	0x3fe00000
 8006098:	4630      	mov	r0, r6
 800609a:	4639      	mov	r1, r7
 800609c:	f7fa fa1c 	bl	80004d8 <__aeabi_dmul>
 80060a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80060a6:	9c03      	ldr	r4, [sp, #12]
 80060a8:	9314      	str	r3, [sp, #80]	; 0x50
 80060aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060ae:	f7fa fcc3 	bl	8000a38 <__aeabi_d2iz>
 80060b2:	9015      	str	r0, [sp, #84]	; 0x54
 80060b4:	f7fa f9a6 	bl	8000404 <__aeabi_i2d>
 80060b8:	4602      	mov	r2, r0
 80060ba:	460b      	mov	r3, r1
 80060bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060c0:	f7fa f852 	bl	8000168 <__aeabi_dsub>
 80060c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80060c6:	4606      	mov	r6, r0
 80060c8:	3330      	adds	r3, #48	; 0x30
 80060ca:	f804 3b01 	strb.w	r3, [r4], #1
 80060ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060d0:	460f      	mov	r7, r1
 80060d2:	429c      	cmp	r4, r3
 80060d4:	f04f 0200 	mov.w	r2, #0
 80060d8:	d124      	bne.n	8006124 <_dtoa_r+0x64c>
 80060da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060de:	4bb0      	ldr	r3, [pc, #704]	; (80063a0 <_dtoa_r+0x8c8>)
 80060e0:	f7fa f844 	bl	800016c <__adddf3>
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	4630      	mov	r0, r6
 80060ea:	4639      	mov	r1, r7
 80060ec:	f7fa fc84 	bl	80009f8 <__aeabi_dcmpgt>
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d163      	bne.n	80061bc <_dtoa_r+0x6e4>
 80060f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060f8:	2000      	movs	r0, #0
 80060fa:	49a9      	ldr	r1, [pc, #676]	; (80063a0 <_dtoa_r+0x8c8>)
 80060fc:	f7fa f834 	bl	8000168 <__aeabi_dsub>
 8006100:	4602      	mov	r2, r0
 8006102:	460b      	mov	r3, r1
 8006104:	4630      	mov	r0, r6
 8006106:	4639      	mov	r1, r7
 8006108:	f7fa fc58 	bl	80009bc <__aeabi_dcmplt>
 800610c:	2800      	cmp	r0, #0
 800610e:	f43f af1d 	beq.w	8005f4c <_dtoa_r+0x474>
 8006112:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006114:	1e7b      	subs	r3, r7, #1
 8006116:	9314      	str	r3, [sp, #80]	; 0x50
 8006118:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800611c:	2b30      	cmp	r3, #48	; 0x30
 800611e:	d0f8      	beq.n	8006112 <_dtoa_r+0x63a>
 8006120:	46c2      	mov	sl, r8
 8006122:	e03b      	b.n	800619c <_dtoa_r+0x6c4>
 8006124:	4b9f      	ldr	r3, [pc, #636]	; (80063a4 <_dtoa_r+0x8cc>)
 8006126:	f7fa f9d7 	bl	80004d8 <__aeabi_dmul>
 800612a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800612e:	e7bc      	b.n	80060aa <_dtoa_r+0x5d2>
 8006130:	9f03      	ldr	r7, [sp, #12]
 8006132:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006136:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800613a:	4640      	mov	r0, r8
 800613c:	4649      	mov	r1, r9
 800613e:	f7fa faf5 	bl	800072c <__aeabi_ddiv>
 8006142:	f7fa fc79 	bl	8000a38 <__aeabi_d2iz>
 8006146:	4604      	mov	r4, r0
 8006148:	f7fa f95c 	bl	8000404 <__aeabi_i2d>
 800614c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006150:	f7fa f9c2 	bl	80004d8 <__aeabi_dmul>
 8006154:	4602      	mov	r2, r0
 8006156:	460b      	mov	r3, r1
 8006158:	4640      	mov	r0, r8
 800615a:	4649      	mov	r1, r9
 800615c:	f7fa f804 	bl	8000168 <__aeabi_dsub>
 8006160:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006164:	f807 6b01 	strb.w	r6, [r7], #1
 8006168:	9e03      	ldr	r6, [sp, #12]
 800616a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800616e:	1bbe      	subs	r6, r7, r6
 8006170:	45b4      	cmp	ip, r6
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	d136      	bne.n	80061e6 <_dtoa_r+0x70e>
 8006178:	f7f9 fff8 	bl	800016c <__adddf3>
 800617c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006180:	4680      	mov	r8, r0
 8006182:	4689      	mov	r9, r1
 8006184:	f7fa fc38 	bl	80009f8 <__aeabi_dcmpgt>
 8006188:	bb58      	cbnz	r0, 80061e2 <_dtoa_r+0x70a>
 800618a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800618e:	4640      	mov	r0, r8
 8006190:	4649      	mov	r1, r9
 8006192:	f7fa fc09 	bl	80009a8 <__aeabi_dcmpeq>
 8006196:	b108      	cbz	r0, 800619c <_dtoa_r+0x6c4>
 8006198:	07e1      	lsls	r1, r4, #31
 800619a:	d422      	bmi.n	80061e2 <_dtoa_r+0x70a>
 800619c:	4628      	mov	r0, r5
 800619e:	4659      	mov	r1, fp
 80061a0:	f000 fb02 	bl	80067a8 <_Bfree>
 80061a4:	2300      	movs	r3, #0
 80061a6:	703b      	strb	r3, [r7, #0]
 80061a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80061aa:	f10a 0001 	add.w	r0, sl, #1
 80061ae:	6018      	str	r0, [r3, #0]
 80061b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f43f acde 	beq.w	8005b74 <_dtoa_r+0x9c>
 80061b8:	601f      	str	r7, [r3, #0]
 80061ba:	e4db      	b.n	8005b74 <_dtoa_r+0x9c>
 80061bc:	4627      	mov	r7, r4
 80061be:	463b      	mov	r3, r7
 80061c0:	461f      	mov	r7, r3
 80061c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061c6:	2a39      	cmp	r2, #57	; 0x39
 80061c8:	d107      	bne.n	80061da <_dtoa_r+0x702>
 80061ca:	9a03      	ldr	r2, [sp, #12]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d1f7      	bne.n	80061c0 <_dtoa_r+0x6e8>
 80061d0:	2230      	movs	r2, #48	; 0x30
 80061d2:	9903      	ldr	r1, [sp, #12]
 80061d4:	f108 0801 	add.w	r8, r8, #1
 80061d8:	700a      	strb	r2, [r1, #0]
 80061da:	781a      	ldrb	r2, [r3, #0]
 80061dc:	3201      	adds	r2, #1
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	e79e      	b.n	8006120 <_dtoa_r+0x648>
 80061e2:	46d0      	mov	r8, sl
 80061e4:	e7eb      	b.n	80061be <_dtoa_r+0x6e6>
 80061e6:	2200      	movs	r2, #0
 80061e8:	4b6e      	ldr	r3, [pc, #440]	; (80063a4 <_dtoa_r+0x8cc>)
 80061ea:	f7fa f975 	bl	80004d8 <__aeabi_dmul>
 80061ee:	2200      	movs	r2, #0
 80061f0:	2300      	movs	r3, #0
 80061f2:	4680      	mov	r8, r0
 80061f4:	4689      	mov	r9, r1
 80061f6:	f7fa fbd7 	bl	80009a8 <__aeabi_dcmpeq>
 80061fa:	2800      	cmp	r0, #0
 80061fc:	d09b      	beq.n	8006136 <_dtoa_r+0x65e>
 80061fe:	e7cd      	b.n	800619c <_dtoa_r+0x6c4>
 8006200:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006202:	2a00      	cmp	r2, #0
 8006204:	f000 80d0 	beq.w	80063a8 <_dtoa_r+0x8d0>
 8006208:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800620a:	2a01      	cmp	r2, #1
 800620c:	f300 80ae 	bgt.w	800636c <_dtoa_r+0x894>
 8006210:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006212:	2a00      	cmp	r2, #0
 8006214:	f000 80a6 	beq.w	8006364 <_dtoa_r+0x88c>
 8006218:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800621c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800621e:	9f06      	ldr	r7, [sp, #24]
 8006220:	9a06      	ldr	r2, [sp, #24]
 8006222:	2101      	movs	r1, #1
 8006224:	441a      	add	r2, r3
 8006226:	9206      	str	r2, [sp, #24]
 8006228:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800622a:	4628      	mov	r0, r5
 800622c:	441a      	add	r2, r3
 800622e:	9209      	str	r2, [sp, #36]	; 0x24
 8006230:	f000 fb70 	bl	8006914 <__i2b>
 8006234:	4606      	mov	r6, r0
 8006236:	2f00      	cmp	r7, #0
 8006238:	dd0c      	ble.n	8006254 <_dtoa_r+0x77c>
 800623a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800623c:	2b00      	cmp	r3, #0
 800623e:	dd09      	ble.n	8006254 <_dtoa_r+0x77c>
 8006240:	42bb      	cmp	r3, r7
 8006242:	bfa8      	it	ge
 8006244:	463b      	movge	r3, r7
 8006246:	9a06      	ldr	r2, [sp, #24]
 8006248:	1aff      	subs	r7, r7, r3
 800624a:	1ad2      	subs	r2, r2, r3
 800624c:	9206      	str	r2, [sp, #24]
 800624e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	9309      	str	r3, [sp, #36]	; 0x24
 8006254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006256:	b1f3      	cbz	r3, 8006296 <_dtoa_r+0x7be>
 8006258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800625a:	2b00      	cmp	r3, #0
 800625c:	f000 80a8 	beq.w	80063b0 <_dtoa_r+0x8d8>
 8006260:	2c00      	cmp	r4, #0
 8006262:	dd10      	ble.n	8006286 <_dtoa_r+0x7ae>
 8006264:	4631      	mov	r1, r6
 8006266:	4622      	mov	r2, r4
 8006268:	4628      	mov	r0, r5
 800626a:	f000 fc11 	bl	8006a90 <__pow5mult>
 800626e:	465a      	mov	r2, fp
 8006270:	4601      	mov	r1, r0
 8006272:	4606      	mov	r6, r0
 8006274:	4628      	mov	r0, r5
 8006276:	f000 fb63 	bl	8006940 <__multiply>
 800627a:	4680      	mov	r8, r0
 800627c:	4659      	mov	r1, fp
 800627e:	4628      	mov	r0, r5
 8006280:	f000 fa92 	bl	80067a8 <_Bfree>
 8006284:	46c3      	mov	fp, r8
 8006286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006288:	1b1a      	subs	r2, r3, r4
 800628a:	d004      	beq.n	8006296 <_dtoa_r+0x7be>
 800628c:	4659      	mov	r1, fp
 800628e:	4628      	mov	r0, r5
 8006290:	f000 fbfe 	bl	8006a90 <__pow5mult>
 8006294:	4683      	mov	fp, r0
 8006296:	2101      	movs	r1, #1
 8006298:	4628      	mov	r0, r5
 800629a:	f000 fb3b 	bl	8006914 <__i2b>
 800629e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062a0:	4604      	mov	r4, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f340 8086 	ble.w	80063b4 <_dtoa_r+0x8dc>
 80062a8:	461a      	mov	r2, r3
 80062aa:	4601      	mov	r1, r0
 80062ac:	4628      	mov	r0, r5
 80062ae:	f000 fbef 	bl	8006a90 <__pow5mult>
 80062b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062b4:	4604      	mov	r4, r0
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	dd7f      	ble.n	80063ba <_dtoa_r+0x8e2>
 80062ba:	f04f 0800 	mov.w	r8, #0
 80062be:	6923      	ldr	r3, [r4, #16]
 80062c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80062c4:	6918      	ldr	r0, [r3, #16]
 80062c6:	f000 fad7 	bl	8006878 <__hi0bits>
 80062ca:	f1c0 0020 	rsb	r0, r0, #32
 80062ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d0:	4418      	add	r0, r3
 80062d2:	f010 001f 	ands.w	r0, r0, #31
 80062d6:	f000 8092 	beq.w	80063fe <_dtoa_r+0x926>
 80062da:	f1c0 0320 	rsb	r3, r0, #32
 80062de:	2b04      	cmp	r3, #4
 80062e0:	f340 808a 	ble.w	80063f8 <_dtoa_r+0x920>
 80062e4:	f1c0 001c 	rsb	r0, r0, #28
 80062e8:	9b06      	ldr	r3, [sp, #24]
 80062ea:	4407      	add	r7, r0
 80062ec:	4403      	add	r3, r0
 80062ee:	9306      	str	r3, [sp, #24]
 80062f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f2:	4403      	add	r3, r0
 80062f4:	9309      	str	r3, [sp, #36]	; 0x24
 80062f6:	9b06      	ldr	r3, [sp, #24]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	dd05      	ble.n	8006308 <_dtoa_r+0x830>
 80062fc:	4659      	mov	r1, fp
 80062fe:	461a      	mov	r2, r3
 8006300:	4628      	mov	r0, r5
 8006302:	f000 fc1f 	bl	8006b44 <__lshift>
 8006306:	4683      	mov	fp, r0
 8006308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800630a:	2b00      	cmp	r3, #0
 800630c:	dd05      	ble.n	800631a <_dtoa_r+0x842>
 800630e:	4621      	mov	r1, r4
 8006310:	461a      	mov	r2, r3
 8006312:	4628      	mov	r0, r5
 8006314:	f000 fc16 	bl	8006b44 <__lshift>
 8006318:	4604      	mov	r4, r0
 800631a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800631c:	2b00      	cmp	r3, #0
 800631e:	d070      	beq.n	8006402 <_dtoa_r+0x92a>
 8006320:	4621      	mov	r1, r4
 8006322:	4658      	mov	r0, fp
 8006324:	f000 fc7e 	bl	8006c24 <__mcmp>
 8006328:	2800      	cmp	r0, #0
 800632a:	da6a      	bge.n	8006402 <_dtoa_r+0x92a>
 800632c:	2300      	movs	r3, #0
 800632e:	4659      	mov	r1, fp
 8006330:	220a      	movs	r2, #10
 8006332:	4628      	mov	r0, r5
 8006334:	f000 fa5a 	bl	80067ec <__multadd>
 8006338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800633a:	4683      	mov	fp, r0
 800633c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 8194 	beq.w	800666e <_dtoa_r+0xb96>
 8006346:	4631      	mov	r1, r6
 8006348:	2300      	movs	r3, #0
 800634a:	220a      	movs	r2, #10
 800634c:	4628      	mov	r0, r5
 800634e:	f000 fa4d 	bl	80067ec <__multadd>
 8006352:	f1b9 0f00 	cmp.w	r9, #0
 8006356:	4606      	mov	r6, r0
 8006358:	f300 8093 	bgt.w	8006482 <_dtoa_r+0x9aa>
 800635c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800635e:	2b02      	cmp	r3, #2
 8006360:	dc57      	bgt.n	8006412 <_dtoa_r+0x93a>
 8006362:	e08e      	b.n	8006482 <_dtoa_r+0x9aa>
 8006364:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006366:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800636a:	e757      	b.n	800621c <_dtoa_r+0x744>
 800636c:	9b08      	ldr	r3, [sp, #32]
 800636e:	1e5c      	subs	r4, r3, #1
 8006370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006372:	42a3      	cmp	r3, r4
 8006374:	bfb7      	itett	lt
 8006376:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006378:	1b1c      	subge	r4, r3, r4
 800637a:	1ae2      	sublt	r2, r4, r3
 800637c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800637e:	bfbe      	ittt	lt
 8006380:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006382:	189b      	addlt	r3, r3, r2
 8006384:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006386:	9b08      	ldr	r3, [sp, #32]
 8006388:	bfb8      	it	lt
 800638a:	2400      	movlt	r4, #0
 800638c:	2b00      	cmp	r3, #0
 800638e:	bfbb      	ittet	lt
 8006390:	9b06      	ldrlt	r3, [sp, #24]
 8006392:	9a08      	ldrlt	r2, [sp, #32]
 8006394:	9f06      	ldrge	r7, [sp, #24]
 8006396:	1a9f      	sublt	r7, r3, r2
 8006398:	bfac      	ite	ge
 800639a:	9b08      	ldrge	r3, [sp, #32]
 800639c:	2300      	movlt	r3, #0
 800639e:	e73f      	b.n	8006220 <_dtoa_r+0x748>
 80063a0:	3fe00000 	.word	0x3fe00000
 80063a4:	40240000 	.word	0x40240000
 80063a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80063aa:	9f06      	ldr	r7, [sp, #24]
 80063ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80063ae:	e742      	b.n	8006236 <_dtoa_r+0x75e>
 80063b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063b2:	e76b      	b.n	800628c <_dtoa_r+0x7b4>
 80063b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	dc19      	bgt.n	80063ee <_dtoa_r+0x916>
 80063ba:	9b04      	ldr	r3, [sp, #16]
 80063bc:	b9bb      	cbnz	r3, 80063ee <_dtoa_r+0x916>
 80063be:	9b05      	ldr	r3, [sp, #20]
 80063c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063c4:	b99b      	cbnz	r3, 80063ee <_dtoa_r+0x916>
 80063c6:	9b05      	ldr	r3, [sp, #20]
 80063c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063cc:	0d1b      	lsrs	r3, r3, #20
 80063ce:	051b      	lsls	r3, r3, #20
 80063d0:	b183      	cbz	r3, 80063f4 <_dtoa_r+0x91c>
 80063d2:	f04f 0801 	mov.w	r8, #1
 80063d6:	9b06      	ldr	r3, [sp, #24]
 80063d8:	3301      	adds	r3, #1
 80063da:	9306      	str	r3, [sp, #24]
 80063dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063de:	3301      	adds	r3, #1
 80063e0:	9309      	str	r3, [sp, #36]	; 0x24
 80063e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f47f af6a 	bne.w	80062be <_dtoa_r+0x7e6>
 80063ea:	2001      	movs	r0, #1
 80063ec:	e76f      	b.n	80062ce <_dtoa_r+0x7f6>
 80063ee:	f04f 0800 	mov.w	r8, #0
 80063f2:	e7f6      	b.n	80063e2 <_dtoa_r+0x90a>
 80063f4:	4698      	mov	r8, r3
 80063f6:	e7f4      	b.n	80063e2 <_dtoa_r+0x90a>
 80063f8:	f43f af7d 	beq.w	80062f6 <_dtoa_r+0x81e>
 80063fc:	4618      	mov	r0, r3
 80063fe:	301c      	adds	r0, #28
 8006400:	e772      	b.n	80062e8 <_dtoa_r+0x810>
 8006402:	9b08      	ldr	r3, [sp, #32]
 8006404:	2b00      	cmp	r3, #0
 8006406:	dc36      	bgt.n	8006476 <_dtoa_r+0x99e>
 8006408:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800640a:	2b02      	cmp	r3, #2
 800640c:	dd33      	ble.n	8006476 <_dtoa_r+0x99e>
 800640e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006412:	f1b9 0f00 	cmp.w	r9, #0
 8006416:	d10d      	bne.n	8006434 <_dtoa_r+0x95c>
 8006418:	4621      	mov	r1, r4
 800641a:	464b      	mov	r3, r9
 800641c:	2205      	movs	r2, #5
 800641e:	4628      	mov	r0, r5
 8006420:	f000 f9e4 	bl	80067ec <__multadd>
 8006424:	4601      	mov	r1, r0
 8006426:	4604      	mov	r4, r0
 8006428:	4658      	mov	r0, fp
 800642a:	f000 fbfb 	bl	8006c24 <__mcmp>
 800642e:	2800      	cmp	r0, #0
 8006430:	f73f adb8 	bgt.w	8005fa4 <_dtoa_r+0x4cc>
 8006434:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006436:	9f03      	ldr	r7, [sp, #12]
 8006438:	ea6f 0a03 	mvn.w	sl, r3
 800643c:	f04f 0800 	mov.w	r8, #0
 8006440:	4621      	mov	r1, r4
 8006442:	4628      	mov	r0, r5
 8006444:	f000 f9b0 	bl	80067a8 <_Bfree>
 8006448:	2e00      	cmp	r6, #0
 800644a:	f43f aea7 	beq.w	800619c <_dtoa_r+0x6c4>
 800644e:	f1b8 0f00 	cmp.w	r8, #0
 8006452:	d005      	beq.n	8006460 <_dtoa_r+0x988>
 8006454:	45b0      	cmp	r8, r6
 8006456:	d003      	beq.n	8006460 <_dtoa_r+0x988>
 8006458:	4641      	mov	r1, r8
 800645a:	4628      	mov	r0, r5
 800645c:	f000 f9a4 	bl	80067a8 <_Bfree>
 8006460:	4631      	mov	r1, r6
 8006462:	4628      	mov	r0, r5
 8006464:	f000 f9a0 	bl	80067a8 <_Bfree>
 8006468:	e698      	b.n	800619c <_dtoa_r+0x6c4>
 800646a:	2400      	movs	r4, #0
 800646c:	4626      	mov	r6, r4
 800646e:	e7e1      	b.n	8006434 <_dtoa_r+0x95c>
 8006470:	46c2      	mov	sl, r8
 8006472:	4626      	mov	r6, r4
 8006474:	e596      	b.n	8005fa4 <_dtoa_r+0x4cc>
 8006476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006478:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800647c:	2b00      	cmp	r3, #0
 800647e:	f000 80fd 	beq.w	800667c <_dtoa_r+0xba4>
 8006482:	2f00      	cmp	r7, #0
 8006484:	dd05      	ble.n	8006492 <_dtoa_r+0x9ba>
 8006486:	4631      	mov	r1, r6
 8006488:	463a      	mov	r2, r7
 800648a:	4628      	mov	r0, r5
 800648c:	f000 fb5a 	bl	8006b44 <__lshift>
 8006490:	4606      	mov	r6, r0
 8006492:	f1b8 0f00 	cmp.w	r8, #0
 8006496:	d05c      	beq.n	8006552 <_dtoa_r+0xa7a>
 8006498:	4628      	mov	r0, r5
 800649a:	6871      	ldr	r1, [r6, #4]
 800649c:	f000 f944 	bl	8006728 <_Balloc>
 80064a0:	4607      	mov	r7, r0
 80064a2:	b928      	cbnz	r0, 80064b0 <_dtoa_r+0x9d8>
 80064a4:	4602      	mov	r2, r0
 80064a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80064aa:	4b7f      	ldr	r3, [pc, #508]	; (80066a8 <_dtoa_r+0xbd0>)
 80064ac:	f7ff bb28 	b.w	8005b00 <_dtoa_r+0x28>
 80064b0:	6932      	ldr	r2, [r6, #16]
 80064b2:	f106 010c 	add.w	r1, r6, #12
 80064b6:	3202      	adds	r2, #2
 80064b8:	0092      	lsls	r2, r2, #2
 80064ba:	300c      	adds	r0, #12
 80064bc:	f000 f926 	bl	800670c <memcpy>
 80064c0:	2201      	movs	r2, #1
 80064c2:	4639      	mov	r1, r7
 80064c4:	4628      	mov	r0, r5
 80064c6:	f000 fb3d 	bl	8006b44 <__lshift>
 80064ca:	46b0      	mov	r8, r6
 80064cc:	4606      	mov	r6, r0
 80064ce:	9b03      	ldr	r3, [sp, #12]
 80064d0:	3301      	adds	r3, #1
 80064d2:	9308      	str	r3, [sp, #32]
 80064d4:	9b03      	ldr	r3, [sp, #12]
 80064d6:	444b      	add	r3, r9
 80064d8:	930a      	str	r3, [sp, #40]	; 0x28
 80064da:	9b04      	ldr	r3, [sp, #16]
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	9309      	str	r3, [sp, #36]	; 0x24
 80064e2:	9b08      	ldr	r3, [sp, #32]
 80064e4:	4621      	mov	r1, r4
 80064e6:	3b01      	subs	r3, #1
 80064e8:	4658      	mov	r0, fp
 80064ea:	9304      	str	r3, [sp, #16]
 80064ec:	f7ff fa66 	bl	80059bc <quorem>
 80064f0:	4603      	mov	r3, r0
 80064f2:	4641      	mov	r1, r8
 80064f4:	3330      	adds	r3, #48	; 0x30
 80064f6:	9006      	str	r0, [sp, #24]
 80064f8:	4658      	mov	r0, fp
 80064fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80064fc:	f000 fb92 	bl	8006c24 <__mcmp>
 8006500:	4632      	mov	r2, r6
 8006502:	4681      	mov	r9, r0
 8006504:	4621      	mov	r1, r4
 8006506:	4628      	mov	r0, r5
 8006508:	f000 fba8 	bl	8006c5c <__mdiff>
 800650c:	68c2      	ldr	r2, [r0, #12]
 800650e:	4607      	mov	r7, r0
 8006510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006512:	bb02      	cbnz	r2, 8006556 <_dtoa_r+0xa7e>
 8006514:	4601      	mov	r1, r0
 8006516:	4658      	mov	r0, fp
 8006518:	f000 fb84 	bl	8006c24 <__mcmp>
 800651c:	4602      	mov	r2, r0
 800651e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006520:	4639      	mov	r1, r7
 8006522:	4628      	mov	r0, r5
 8006524:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006528:	f000 f93e 	bl	80067a8 <_Bfree>
 800652c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800652e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006530:	9f08      	ldr	r7, [sp, #32]
 8006532:	ea43 0102 	orr.w	r1, r3, r2
 8006536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006538:	430b      	orrs	r3, r1
 800653a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800653c:	d10d      	bne.n	800655a <_dtoa_r+0xa82>
 800653e:	2b39      	cmp	r3, #57	; 0x39
 8006540:	d029      	beq.n	8006596 <_dtoa_r+0xabe>
 8006542:	f1b9 0f00 	cmp.w	r9, #0
 8006546:	dd01      	ble.n	800654c <_dtoa_r+0xa74>
 8006548:	9b06      	ldr	r3, [sp, #24]
 800654a:	3331      	adds	r3, #49	; 0x31
 800654c:	9a04      	ldr	r2, [sp, #16]
 800654e:	7013      	strb	r3, [r2, #0]
 8006550:	e776      	b.n	8006440 <_dtoa_r+0x968>
 8006552:	4630      	mov	r0, r6
 8006554:	e7b9      	b.n	80064ca <_dtoa_r+0x9f2>
 8006556:	2201      	movs	r2, #1
 8006558:	e7e2      	b.n	8006520 <_dtoa_r+0xa48>
 800655a:	f1b9 0f00 	cmp.w	r9, #0
 800655e:	db06      	blt.n	800656e <_dtoa_r+0xa96>
 8006560:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006562:	ea41 0909 	orr.w	r9, r1, r9
 8006566:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006568:	ea59 0101 	orrs.w	r1, r9, r1
 800656c:	d120      	bne.n	80065b0 <_dtoa_r+0xad8>
 800656e:	2a00      	cmp	r2, #0
 8006570:	ddec      	ble.n	800654c <_dtoa_r+0xa74>
 8006572:	4659      	mov	r1, fp
 8006574:	2201      	movs	r2, #1
 8006576:	4628      	mov	r0, r5
 8006578:	9308      	str	r3, [sp, #32]
 800657a:	f000 fae3 	bl	8006b44 <__lshift>
 800657e:	4621      	mov	r1, r4
 8006580:	4683      	mov	fp, r0
 8006582:	f000 fb4f 	bl	8006c24 <__mcmp>
 8006586:	2800      	cmp	r0, #0
 8006588:	9b08      	ldr	r3, [sp, #32]
 800658a:	dc02      	bgt.n	8006592 <_dtoa_r+0xaba>
 800658c:	d1de      	bne.n	800654c <_dtoa_r+0xa74>
 800658e:	07da      	lsls	r2, r3, #31
 8006590:	d5dc      	bpl.n	800654c <_dtoa_r+0xa74>
 8006592:	2b39      	cmp	r3, #57	; 0x39
 8006594:	d1d8      	bne.n	8006548 <_dtoa_r+0xa70>
 8006596:	2339      	movs	r3, #57	; 0x39
 8006598:	9a04      	ldr	r2, [sp, #16]
 800659a:	7013      	strb	r3, [r2, #0]
 800659c:	463b      	mov	r3, r7
 800659e:	461f      	mov	r7, r3
 80065a0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80065a4:	3b01      	subs	r3, #1
 80065a6:	2a39      	cmp	r2, #57	; 0x39
 80065a8:	d050      	beq.n	800664c <_dtoa_r+0xb74>
 80065aa:	3201      	adds	r2, #1
 80065ac:	701a      	strb	r2, [r3, #0]
 80065ae:	e747      	b.n	8006440 <_dtoa_r+0x968>
 80065b0:	2a00      	cmp	r2, #0
 80065b2:	dd03      	ble.n	80065bc <_dtoa_r+0xae4>
 80065b4:	2b39      	cmp	r3, #57	; 0x39
 80065b6:	d0ee      	beq.n	8006596 <_dtoa_r+0xabe>
 80065b8:	3301      	adds	r3, #1
 80065ba:	e7c7      	b.n	800654c <_dtoa_r+0xa74>
 80065bc:	9a08      	ldr	r2, [sp, #32]
 80065be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80065c0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80065c4:	428a      	cmp	r2, r1
 80065c6:	d02a      	beq.n	800661e <_dtoa_r+0xb46>
 80065c8:	4659      	mov	r1, fp
 80065ca:	2300      	movs	r3, #0
 80065cc:	220a      	movs	r2, #10
 80065ce:	4628      	mov	r0, r5
 80065d0:	f000 f90c 	bl	80067ec <__multadd>
 80065d4:	45b0      	cmp	r8, r6
 80065d6:	4683      	mov	fp, r0
 80065d8:	f04f 0300 	mov.w	r3, #0
 80065dc:	f04f 020a 	mov.w	r2, #10
 80065e0:	4641      	mov	r1, r8
 80065e2:	4628      	mov	r0, r5
 80065e4:	d107      	bne.n	80065f6 <_dtoa_r+0xb1e>
 80065e6:	f000 f901 	bl	80067ec <__multadd>
 80065ea:	4680      	mov	r8, r0
 80065ec:	4606      	mov	r6, r0
 80065ee:	9b08      	ldr	r3, [sp, #32]
 80065f0:	3301      	adds	r3, #1
 80065f2:	9308      	str	r3, [sp, #32]
 80065f4:	e775      	b.n	80064e2 <_dtoa_r+0xa0a>
 80065f6:	f000 f8f9 	bl	80067ec <__multadd>
 80065fa:	4631      	mov	r1, r6
 80065fc:	4680      	mov	r8, r0
 80065fe:	2300      	movs	r3, #0
 8006600:	220a      	movs	r2, #10
 8006602:	4628      	mov	r0, r5
 8006604:	f000 f8f2 	bl	80067ec <__multadd>
 8006608:	4606      	mov	r6, r0
 800660a:	e7f0      	b.n	80065ee <_dtoa_r+0xb16>
 800660c:	f1b9 0f00 	cmp.w	r9, #0
 8006610:	bfcc      	ite	gt
 8006612:	464f      	movgt	r7, r9
 8006614:	2701      	movle	r7, #1
 8006616:	f04f 0800 	mov.w	r8, #0
 800661a:	9a03      	ldr	r2, [sp, #12]
 800661c:	4417      	add	r7, r2
 800661e:	4659      	mov	r1, fp
 8006620:	2201      	movs	r2, #1
 8006622:	4628      	mov	r0, r5
 8006624:	9308      	str	r3, [sp, #32]
 8006626:	f000 fa8d 	bl	8006b44 <__lshift>
 800662a:	4621      	mov	r1, r4
 800662c:	4683      	mov	fp, r0
 800662e:	f000 faf9 	bl	8006c24 <__mcmp>
 8006632:	2800      	cmp	r0, #0
 8006634:	dcb2      	bgt.n	800659c <_dtoa_r+0xac4>
 8006636:	d102      	bne.n	800663e <_dtoa_r+0xb66>
 8006638:	9b08      	ldr	r3, [sp, #32]
 800663a:	07db      	lsls	r3, r3, #31
 800663c:	d4ae      	bmi.n	800659c <_dtoa_r+0xac4>
 800663e:	463b      	mov	r3, r7
 8006640:	461f      	mov	r7, r3
 8006642:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006646:	2a30      	cmp	r2, #48	; 0x30
 8006648:	d0fa      	beq.n	8006640 <_dtoa_r+0xb68>
 800664a:	e6f9      	b.n	8006440 <_dtoa_r+0x968>
 800664c:	9a03      	ldr	r2, [sp, #12]
 800664e:	429a      	cmp	r2, r3
 8006650:	d1a5      	bne.n	800659e <_dtoa_r+0xac6>
 8006652:	2331      	movs	r3, #49	; 0x31
 8006654:	f10a 0a01 	add.w	sl, sl, #1
 8006658:	e779      	b.n	800654e <_dtoa_r+0xa76>
 800665a:	4b14      	ldr	r3, [pc, #80]	; (80066ac <_dtoa_r+0xbd4>)
 800665c:	f7ff baa8 	b.w	8005bb0 <_dtoa_r+0xd8>
 8006660:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006662:	2b00      	cmp	r3, #0
 8006664:	f47f aa81 	bne.w	8005b6a <_dtoa_r+0x92>
 8006668:	4b11      	ldr	r3, [pc, #68]	; (80066b0 <_dtoa_r+0xbd8>)
 800666a:	f7ff baa1 	b.w	8005bb0 <_dtoa_r+0xd8>
 800666e:	f1b9 0f00 	cmp.w	r9, #0
 8006672:	dc03      	bgt.n	800667c <_dtoa_r+0xba4>
 8006674:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006676:	2b02      	cmp	r3, #2
 8006678:	f73f aecb 	bgt.w	8006412 <_dtoa_r+0x93a>
 800667c:	9f03      	ldr	r7, [sp, #12]
 800667e:	4621      	mov	r1, r4
 8006680:	4658      	mov	r0, fp
 8006682:	f7ff f99b 	bl	80059bc <quorem>
 8006686:	9a03      	ldr	r2, [sp, #12]
 8006688:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800668c:	f807 3b01 	strb.w	r3, [r7], #1
 8006690:	1aba      	subs	r2, r7, r2
 8006692:	4591      	cmp	r9, r2
 8006694:	ddba      	ble.n	800660c <_dtoa_r+0xb34>
 8006696:	4659      	mov	r1, fp
 8006698:	2300      	movs	r3, #0
 800669a:	220a      	movs	r2, #10
 800669c:	4628      	mov	r0, r5
 800669e:	f000 f8a5 	bl	80067ec <__multadd>
 80066a2:	4683      	mov	fp, r0
 80066a4:	e7eb      	b.n	800667e <_dtoa_r+0xba6>
 80066a6:	bf00      	nop
 80066a8:	08007fbf 	.word	0x08007fbf
 80066ac:	08007ee0 	.word	0x08007ee0
 80066b0:	08007f40 	.word	0x08007f40

080066b4 <fiprintf>:
 80066b4:	b40e      	push	{r1, r2, r3}
 80066b6:	b503      	push	{r0, r1, lr}
 80066b8:	4601      	mov	r1, r0
 80066ba:	ab03      	add	r3, sp, #12
 80066bc:	4805      	ldr	r0, [pc, #20]	; (80066d4 <fiprintf+0x20>)
 80066be:	f853 2b04 	ldr.w	r2, [r3], #4
 80066c2:	6800      	ldr	r0, [r0, #0]
 80066c4:	9301      	str	r3, [sp, #4]
 80066c6:	f000 fe25 	bl	8007314 <_vfiprintf_r>
 80066ca:	b002      	add	sp, #8
 80066cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80066d0:	b003      	add	sp, #12
 80066d2:	4770      	bx	lr
 80066d4:	2000001c 	.word	0x2000001c

080066d8 <_localeconv_r>:
 80066d8:	4800      	ldr	r0, [pc, #0]	; (80066dc <_localeconv_r+0x4>)
 80066da:	4770      	bx	lr
 80066dc:	20000170 	.word	0x20000170

080066e0 <malloc>:
 80066e0:	4b02      	ldr	r3, [pc, #8]	; (80066ec <malloc+0xc>)
 80066e2:	4601      	mov	r1, r0
 80066e4:	6818      	ldr	r0, [r3, #0]
 80066e6:	f000 bc1d 	b.w	8006f24 <_malloc_r>
 80066ea:	bf00      	nop
 80066ec:	2000001c 	.word	0x2000001c

080066f0 <memchr>:
 80066f0:	4603      	mov	r3, r0
 80066f2:	b510      	push	{r4, lr}
 80066f4:	b2c9      	uxtb	r1, r1
 80066f6:	4402      	add	r2, r0
 80066f8:	4293      	cmp	r3, r2
 80066fa:	4618      	mov	r0, r3
 80066fc:	d101      	bne.n	8006702 <memchr+0x12>
 80066fe:	2000      	movs	r0, #0
 8006700:	e003      	b.n	800670a <memchr+0x1a>
 8006702:	7804      	ldrb	r4, [r0, #0]
 8006704:	3301      	adds	r3, #1
 8006706:	428c      	cmp	r4, r1
 8006708:	d1f6      	bne.n	80066f8 <memchr+0x8>
 800670a:	bd10      	pop	{r4, pc}

0800670c <memcpy>:
 800670c:	440a      	add	r2, r1
 800670e:	4291      	cmp	r1, r2
 8006710:	f100 33ff 	add.w	r3, r0, #4294967295
 8006714:	d100      	bne.n	8006718 <memcpy+0xc>
 8006716:	4770      	bx	lr
 8006718:	b510      	push	{r4, lr}
 800671a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800671e:	4291      	cmp	r1, r2
 8006720:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006724:	d1f9      	bne.n	800671a <memcpy+0xe>
 8006726:	bd10      	pop	{r4, pc}

08006728 <_Balloc>:
 8006728:	b570      	push	{r4, r5, r6, lr}
 800672a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800672c:	4604      	mov	r4, r0
 800672e:	460d      	mov	r5, r1
 8006730:	b976      	cbnz	r6, 8006750 <_Balloc+0x28>
 8006732:	2010      	movs	r0, #16
 8006734:	f7ff ffd4 	bl	80066e0 <malloc>
 8006738:	4602      	mov	r2, r0
 800673a:	6260      	str	r0, [r4, #36]	; 0x24
 800673c:	b920      	cbnz	r0, 8006748 <_Balloc+0x20>
 800673e:	2166      	movs	r1, #102	; 0x66
 8006740:	4b17      	ldr	r3, [pc, #92]	; (80067a0 <_Balloc+0x78>)
 8006742:	4818      	ldr	r0, [pc, #96]	; (80067a4 <_Balloc+0x7c>)
 8006744:	f7ff f91c 	bl	8005980 <__assert_func>
 8006748:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800674c:	6006      	str	r6, [r0, #0]
 800674e:	60c6      	str	r6, [r0, #12]
 8006750:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006752:	68f3      	ldr	r3, [r6, #12]
 8006754:	b183      	cbz	r3, 8006778 <_Balloc+0x50>
 8006756:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800675e:	b9b8      	cbnz	r0, 8006790 <_Balloc+0x68>
 8006760:	2101      	movs	r1, #1
 8006762:	fa01 f605 	lsl.w	r6, r1, r5
 8006766:	1d72      	adds	r2, r6, #5
 8006768:	4620      	mov	r0, r4
 800676a:	0092      	lsls	r2, r2, #2
 800676c:	f000 fb5e 	bl	8006e2c <_calloc_r>
 8006770:	b160      	cbz	r0, 800678c <_Balloc+0x64>
 8006772:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006776:	e00e      	b.n	8006796 <_Balloc+0x6e>
 8006778:	2221      	movs	r2, #33	; 0x21
 800677a:	2104      	movs	r1, #4
 800677c:	4620      	mov	r0, r4
 800677e:	f000 fb55 	bl	8006e2c <_calloc_r>
 8006782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006784:	60f0      	str	r0, [r6, #12]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1e4      	bne.n	8006756 <_Balloc+0x2e>
 800678c:	2000      	movs	r0, #0
 800678e:	bd70      	pop	{r4, r5, r6, pc}
 8006790:	6802      	ldr	r2, [r0, #0]
 8006792:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006796:	2300      	movs	r3, #0
 8006798:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800679c:	e7f7      	b.n	800678e <_Balloc+0x66>
 800679e:	bf00      	nop
 80067a0:	08007f4d 	.word	0x08007f4d
 80067a4:	08007fd0 	.word	0x08007fd0

080067a8 <_Bfree>:
 80067a8:	b570      	push	{r4, r5, r6, lr}
 80067aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80067ac:	4605      	mov	r5, r0
 80067ae:	460c      	mov	r4, r1
 80067b0:	b976      	cbnz	r6, 80067d0 <_Bfree+0x28>
 80067b2:	2010      	movs	r0, #16
 80067b4:	f7ff ff94 	bl	80066e0 <malloc>
 80067b8:	4602      	mov	r2, r0
 80067ba:	6268      	str	r0, [r5, #36]	; 0x24
 80067bc:	b920      	cbnz	r0, 80067c8 <_Bfree+0x20>
 80067be:	218a      	movs	r1, #138	; 0x8a
 80067c0:	4b08      	ldr	r3, [pc, #32]	; (80067e4 <_Bfree+0x3c>)
 80067c2:	4809      	ldr	r0, [pc, #36]	; (80067e8 <_Bfree+0x40>)
 80067c4:	f7ff f8dc 	bl	8005980 <__assert_func>
 80067c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067cc:	6006      	str	r6, [r0, #0]
 80067ce:	60c6      	str	r6, [r0, #12]
 80067d0:	b13c      	cbz	r4, 80067e2 <_Bfree+0x3a>
 80067d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80067d4:	6862      	ldr	r2, [r4, #4]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067dc:	6021      	str	r1, [r4, #0]
 80067de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80067e2:	bd70      	pop	{r4, r5, r6, pc}
 80067e4:	08007f4d 	.word	0x08007f4d
 80067e8:	08007fd0 	.word	0x08007fd0

080067ec <__multadd>:
 80067ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067f0:	4607      	mov	r7, r0
 80067f2:	460c      	mov	r4, r1
 80067f4:	461e      	mov	r6, r3
 80067f6:	2000      	movs	r0, #0
 80067f8:	690d      	ldr	r5, [r1, #16]
 80067fa:	f101 0c14 	add.w	ip, r1, #20
 80067fe:	f8dc 3000 	ldr.w	r3, [ip]
 8006802:	3001      	adds	r0, #1
 8006804:	b299      	uxth	r1, r3
 8006806:	fb02 6101 	mla	r1, r2, r1, r6
 800680a:	0c1e      	lsrs	r6, r3, #16
 800680c:	0c0b      	lsrs	r3, r1, #16
 800680e:	fb02 3306 	mla	r3, r2, r6, r3
 8006812:	b289      	uxth	r1, r1
 8006814:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006818:	4285      	cmp	r5, r0
 800681a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800681e:	f84c 1b04 	str.w	r1, [ip], #4
 8006822:	dcec      	bgt.n	80067fe <__multadd+0x12>
 8006824:	b30e      	cbz	r6, 800686a <__multadd+0x7e>
 8006826:	68a3      	ldr	r3, [r4, #8]
 8006828:	42ab      	cmp	r3, r5
 800682a:	dc19      	bgt.n	8006860 <__multadd+0x74>
 800682c:	6861      	ldr	r1, [r4, #4]
 800682e:	4638      	mov	r0, r7
 8006830:	3101      	adds	r1, #1
 8006832:	f7ff ff79 	bl	8006728 <_Balloc>
 8006836:	4680      	mov	r8, r0
 8006838:	b928      	cbnz	r0, 8006846 <__multadd+0x5a>
 800683a:	4602      	mov	r2, r0
 800683c:	21b5      	movs	r1, #181	; 0xb5
 800683e:	4b0c      	ldr	r3, [pc, #48]	; (8006870 <__multadd+0x84>)
 8006840:	480c      	ldr	r0, [pc, #48]	; (8006874 <__multadd+0x88>)
 8006842:	f7ff f89d 	bl	8005980 <__assert_func>
 8006846:	6922      	ldr	r2, [r4, #16]
 8006848:	f104 010c 	add.w	r1, r4, #12
 800684c:	3202      	adds	r2, #2
 800684e:	0092      	lsls	r2, r2, #2
 8006850:	300c      	adds	r0, #12
 8006852:	f7ff ff5b 	bl	800670c <memcpy>
 8006856:	4621      	mov	r1, r4
 8006858:	4638      	mov	r0, r7
 800685a:	f7ff ffa5 	bl	80067a8 <_Bfree>
 800685e:	4644      	mov	r4, r8
 8006860:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006864:	3501      	adds	r5, #1
 8006866:	615e      	str	r6, [r3, #20]
 8006868:	6125      	str	r5, [r4, #16]
 800686a:	4620      	mov	r0, r4
 800686c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006870:	08007fbf 	.word	0x08007fbf
 8006874:	08007fd0 	.word	0x08007fd0

08006878 <__hi0bits>:
 8006878:	0c02      	lsrs	r2, r0, #16
 800687a:	0412      	lsls	r2, r2, #16
 800687c:	4603      	mov	r3, r0
 800687e:	b9ca      	cbnz	r2, 80068b4 <__hi0bits+0x3c>
 8006880:	0403      	lsls	r3, r0, #16
 8006882:	2010      	movs	r0, #16
 8006884:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006888:	bf04      	itt	eq
 800688a:	021b      	lsleq	r3, r3, #8
 800688c:	3008      	addeq	r0, #8
 800688e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006892:	bf04      	itt	eq
 8006894:	011b      	lsleq	r3, r3, #4
 8006896:	3004      	addeq	r0, #4
 8006898:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800689c:	bf04      	itt	eq
 800689e:	009b      	lsleq	r3, r3, #2
 80068a0:	3002      	addeq	r0, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	db05      	blt.n	80068b2 <__hi0bits+0x3a>
 80068a6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80068aa:	f100 0001 	add.w	r0, r0, #1
 80068ae:	bf08      	it	eq
 80068b0:	2020      	moveq	r0, #32
 80068b2:	4770      	bx	lr
 80068b4:	2000      	movs	r0, #0
 80068b6:	e7e5      	b.n	8006884 <__hi0bits+0xc>

080068b8 <__lo0bits>:
 80068b8:	6803      	ldr	r3, [r0, #0]
 80068ba:	4602      	mov	r2, r0
 80068bc:	f013 0007 	ands.w	r0, r3, #7
 80068c0:	d00b      	beq.n	80068da <__lo0bits+0x22>
 80068c2:	07d9      	lsls	r1, r3, #31
 80068c4:	d421      	bmi.n	800690a <__lo0bits+0x52>
 80068c6:	0798      	lsls	r0, r3, #30
 80068c8:	bf49      	itett	mi
 80068ca:	085b      	lsrmi	r3, r3, #1
 80068cc:	089b      	lsrpl	r3, r3, #2
 80068ce:	2001      	movmi	r0, #1
 80068d0:	6013      	strmi	r3, [r2, #0]
 80068d2:	bf5c      	itt	pl
 80068d4:	2002      	movpl	r0, #2
 80068d6:	6013      	strpl	r3, [r2, #0]
 80068d8:	4770      	bx	lr
 80068da:	b299      	uxth	r1, r3
 80068dc:	b909      	cbnz	r1, 80068e2 <__lo0bits+0x2a>
 80068de:	2010      	movs	r0, #16
 80068e0:	0c1b      	lsrs	r3, r3, #16
 80068e2:	b2d9      	uxtb	r1, r3
 80068e4:	b909      	cbnz	r1, 80068ea <__lo0bits+0x32>
 80068e6:	3008      	adds	r0, #8
 80068e8:	0a1b      	lsrs	r3, r3, #8
 80068ea:	0719      	lsls	r1, r3, #28
 80068ec:	bf04      	itt	eq
 80068ee:	091b      	lsreq	r3, r3, #4
 80068f0:	3004      	addeq	r0, #4
 80068f2:	0799      	lsls	r1, r3, #30
 80068f4:	bf04      	itt	eq
 80068f6:	089b      	lsreq	r3, r3, #2
 80068f8:	3002      	addeq	r0, #2
 80068fa:	07d9      	lsls	r1, r3, #31
 80068fc:	d403      	bmi.n	8006906 <__lo0bits+0x4e>
 80068fe:	085b      	lsrs	r3, r3, #1
 8006900:	f100 0001 	add.w	r0, r0, #1
 8006904:	d003      	beq.n	800690e <__lo0bits+0x56>
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	4770      	bx	lr
 800690a:	2000      	movs	r0, #0
 800690c:	4770      	bx	lr
 800690e:	2020      	movs	r0, #32
 8006910:	4770      	bx	lr
	...

08006914 <__i2b>:
 8006914:	b510      	push	{r4, lr}
 8006916:	460c      	mov	r4, r1
 8006918:	2101      	movs	r1, #1
 800691a:	f7ff ff05 	bl	8006728 <_Balloc>
 800691e:	4602      	mov	r2, r0
 8006920:	b928      	cbnz	r0, 800692e <__i2b+0x1a>
 8006922:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006926:	4b04      	ldr	r3, [pc, #16]	; (8006938 <__i2b+0x24>)
 8006928:	4804      	ldr	r0, [pc, #16]	; (800693c <__i2b+0x28>)
 800692a:	f7ff f829 	bl	8005980 <__assert_func>
 800692e:	2301      	movs	r3, #1
 8006930:	6144      	str	r4, [r0, #20]
 8006932:	6103      	str	r3, [r0, #16]
 8006934:	bd10      	pop	{r4, pc}
 8006936:	bf00      	nop
 8006938:	08007fbf 	.word	0x08007fbf
 800693c:	08007fd0 	.word	0x08007fd0

08006940 <__multiply>:
 8006940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006944:	4691      	mov	r9, r2
 8006946:	690a      	ldr	r2, [r1, #16]
 8006948:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800694c:	460c      	mov	r4, r1
 800694e:	429a      	cmp	r2, r3
 8006950:	bfbe      	ittt	lt
 8006952:	460b      	movlt	r3, r1
 8006954:	464c      	movlt	r4, r9
 8006956:	4699      	movlt	r9, r3
 8006958:	6927      	ldr	r7, [r4, #16]
 800695a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800695e:	68a3      	ldr	r3, [r4, #8]
 8006960:	6861      	ldr	r1, [r4, #4]
 8006962:	eb07 060a 	add.w	r6, r7, sl
 8006966:	42b3      	cmp	r3, r6
 8006968:	b085      	sub	sp, #20
 800696a:	bfb8      	it	lt
 800696c:	3101      	addlt	r1, #1
 800696e:	f7ff fedb 	bl	8006728 <_Balloc>
 8006972:	b930      	cbnz	r0, 8006982 <__multiply+0x42>
 8006974:	4602      	mov	r2, r0
 8006976:	f240 115d 	movw	r1, #349	; 0x15d
 800697a:	4b43      	ldr	r3, [pc, #268]	; (8006a88 <__multiply+0x148>)
 800697c:	4843      	ldr	r0, [pc, #268]	; (8006a8c <__multiply+0x14c>)
 800697e:	f7fe ffff 	bl	8005980 <__assert_func>
 8006982:	f100 0514 	add.w	r5, r0, #20
 8006986:	462b      	mov	r3, r5
 8006988:	2200      	movs	r2, #0
 800698a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800698e:	4543      	cmp	r3, r8
 8006990:	d321      	bcc.n	80069d6 <__multiply+0x96>
 8006992:	f104 0314 	add.w	r3, r4, #20
 8006996:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800699a:	f109 0314 	add.w	r3, r9, #20
 800699e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80069a2:	9202      	str	r2, [sp, #8]
 80069a4:	1b3a      	subs	r2, r7, r4
 80069a6:	3a15      	subs	r2, #21
 80069a8:	f022 0203 	bic.w	r2, r2, #3
 80069ac:	3204      	adds	r2, #4
 80069ae:	f104 0115 	add.w	r1, r4, #21
 80069b2:	428f      	cmp	r7, r1
 80069b4:	bf38      	it	cc
 80069b6:	2204      	movcc	r2, #4
 80069b8:	9201      	str	r2, [sp, #4]
 80069ba:	9a02      	ldr	r2, [sp, #8]
 80069bc:	9303      	str	r3, [sp, #12]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d80c      	bhi.n	80069dc <__multiply+0x9c>
 80069c2:	2e00      	cmp	r6, #0
 80069c4:	dd03      	ble.n	80069ce <__multiply+0x8e>
 80069c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d059      	beq.n	8006a82 <__multiply+0x142>
 80069ce:	6106      	str	r6, [r0, #16]
 80069d0:	b005      	add	sp, #20
 80069d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d6:	f843 2b04 	str.w	r2, [r3], #4
 80069da:	e7d8      	b.n	800698e <__multiply+0x4e>
 80069dc:	f8b3 a000 	ldrh.w	sl, [r3]
 80069e0:	f1ba 0f00 	cmp.w	sl, #0
 80069e4:	d023      	beq.n	8006a2e <__multiply+0xee>
 80069e6:	46a9      	mov	r9, r5
 80069e8:	f04f 0c00 	mov.w	ip, #0
 80069ec:	f104 0e14 	add.w	lr, r4, #20
 80069f0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80069f4:	f8d9 1000 	ldr.w	r1, [r9]
 80069f8:	fa1f fb82 	uxth.w	fp, r2
 80069fc:	b289      	uxth	r1, r1
 80069fe:	fb0a 110b 	mla	r1, sl, fp, r1
 8006a02:	4461      	add	r1, ip
 8006a04:	f8d9 c000 	ldr.w	ip, [r9]
 8006a08:	0c12      	lsrs	r2, r2, #16
 8006a0a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006a0e:	fb0a c202 	mla	r2, sl, r2, ip
 8006a12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006a16:	b289      	uxth	r1, r1
 8006a18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006a1c:	4577      	cmp	r7, lr
 8006a1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a22:	f849 1b04 	str.w	r1, [r9], #4
 8006a26:	d8e3      	bhi.n	80069f0 <__multiply+0xb0>
 8006a28:	9a01      	ldr	r2, [sp, #4]
 8006a2a:	f845 c002 	str.w	ip, [r5, r2]
 8006a2e:	9a03      	ldr	r2, [sp, #12]
 8006a30:	3304      	adds	r3, #4
 8006a32:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006a36:	f1b9 0f00 	cmp.w	r9, #0
 8006a3a:	d020      	beq.n	8006a7e <__multiply+0x13e>
 8006a3c:	46ae      	mov	lr, r5
 8006a3e:	f04f 0a00 	mov.w	sl, #0
 8006a42:	6829      	ldr	r1, [r5, #0]
 8006a44:	f104 0c14 	add.w	ip, r4, #20
 8006a48:	f8bc b000 	ldrh.w	fp, [ip]
 8006a4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006a50:	b289      	uxth	r1, r1
 8006a52:	fb09 220b 	mla	r2, r9, fp, r2
 8006a56:	4492      	add	sl, r2
 8006a58:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006a5c:	f84e 1b04 	str.w	r1, [lr], #4
 8006a60:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006a64:	f8be 1000 	ldrh.w	r1, [lr]
 8006a68:	0c12      	lsrs	r2, r2, #16
 8006a6a:	fb09 1102 	mla	r1, r9, r2, r1
 8006a6e:	4567      	cmp	r7, ip
 8006a70:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006a74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006a78:	d8e6      	bhi.n	8006a48 <__multiply+0x108>
 8006a7a:	9a01      	ldr	r2, [sp, #4]
 8006a7c:	50a9      	str	r1, [r5, r2]
 8006a7e:	3504      	adds	r5, #4
 8006a80:	e79b      	b.n	80069ba <__multiply+0x7a>
 8006a82:	3e01      	subs	r6, #1
 8006a84:	e79d      	b.n	80069c2 <__multiply+0x82>
 8006a86:	bf00      	nop
 8006a88:	08007fbf 	.word	0x08007fbf
 8006a8c:	08007fd0 	.word	0x08007fd0

08006a90 <__pow5mult>:
 8006a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a94:	4615      	mov	r5, r2
 8006a96:	f012 0203 	ands.w	r2, r2, #3
 8006a9a:	4606      	mov	r6, r0
 8006a9c:	460f      	mov	r7, r1
 8006a9e:	d007      	beq.n	8006ab0 <__pow5mult+0x20>
 8006aa0:	4c25      	ldr	r4, [pc, #148]	; (8006b38 <__pow5mult+0xa8>)
 8006aa2:	3a01      	subs	r2, #1
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006aaa:	f7ff fe9f 	bl	80067ec <__multadd>
 8006aae:	4607      	mov	r7, r0
 8006ab0:	10ad      	asrs	r5, r5, #2
 8006ab2:	d03d      	beq.n	8006b30 <__pow5mult+0xa0>
 8006ab4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006ab6:	b97c      	cbnz	r4, 8006ad8 <__pow5mult+0x48>
 8006ab8:	2010      	movs	r0, #16
 8006aba:	f7ff fe11 	bl	80066e0 <malloc>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	6270      	str	r0, [r6, #36]	; 0x24
 8006ac2:	b928      	cbnz	r0, 8006ad0 <__pow5mult+0x40>
 8006ac4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006ac8:	4b1c      	ldr	r3, [pc, #112]	; (8006b3c <__pow5mult+0xac>)
 8006aca:	481d      	ldr	r0, [pc, #116]	; (8006b40 <__pow5mult+0xb0>)
 8006acc:	f7fe ff58 	bl	8005980 <__assert_func>
 8006ad0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ad4:	6004      	str	r4, [r0, #0]
 8006ad6:	60c4      	str	r4, [r0, #12]
 8006ad8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006adc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ae0:	b94c      	cbnz	r4, 8006af6 <__pow5mult+0x66>
 8006ae2:	f240 2171 	movw	r1, #625	; 0x271
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	f7ff ff14 	bl	8006914 <__i2b>
 8006aec:	2300      	movs	r3, #0
 8006aee:	4604      	mov	r4, r0
 8006af0:	f8c8 0008 	str.w	r0, [r8, #8]
 8006af4:	6003      	str	r3, [r0, #0]
 8006af6:	f04f 0900 	mov.w	r9, #0
 8006afa:	07eb      	lsls	r3, r5, #31
 8006afc:	d50a      	bpl.n	8006b14 <__pow5mult+0x84>
 8006afe:	4639      	mov	r1, r7
 8006b00:	4622      	mov	r2, r4
 8006b02:	4630      	mov	r0, r6
 8006b04:	f7ff ff1c 	bl	8006940 <__multiply>
 8006b08:	4680      	mov	r8, r0
 8006b0a:	4639      	mov	r1, r7
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	f7ff fe4b 	bl	80067a8 <_Bfree>
 8006b12:	4647      	mov	r7, r8
 8006b14:	106d      	asrs	r5, r5, #1
 8006b16:	d00b      	beq.n	8006b30 <__pow5mult+0xa0>
 8006b18:	6820      	ldr	r0, [r4, #0]
 8006b1a:	b938      	cbnz	r0, 8006b2c <__pow5mult+0x9c>
 8006b1c:	4622      	mov	r2, r4
 8006b1e:	4621      	mov	r1, r4
 8006b20:	4630      	mov	r0, r6
 8006b22:	f7ff ff0d 	bl	8006940 <__multiply>
 8006b26:	6020      	str	r0, [r4, #0]
 8006b28:	f8c0 9000 	str.w	r9, [r0]
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	e7e4      	b.n	8006afa <__pow5mult+0x6a>
 8006b30:	4638      	mov	r0, r7
 8006b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b36:	bf00      	nop
 8006b38:	08008120 	.word	0x08008120
 8006b3c:	08007f4d 	.word	0x08007f4d
 8006b40:	08007fd0 	.word	0x08007fd0

08006b44 <__lshift>:
 8006b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b48:	460c      	mov	r4, r1
 8006b4a:	4607      	mov	r7, r0
 8006b4c:	4691      	mov	r9, r2
 8006b4e:	6923      	ldr	r3, [r4, #16]
 8006b50:	6849      	ldr	r1, [r1, #4]
 8006b52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b56:	68a3      	ldr	r3, [r4, #8]
 8006b58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b5c:	f108 0601 	add.w	r6, r8, #1
 8006b60:	42b3      	cmp	r3, r6
 8006b62:	db0b      	blt.n	8006b7c <__lshift+0x38>
 8006b64:	4638      	mov	r0, r7
 8006b66:	f7ff fddf 	bl	8006728 <_Balloc>
 8006b6a:	4605      	mov	r5, r0
 8006b6c:	b948      	cbnz	r0, 8006b82 <__lshift+0x3e>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006b74:	4b29      	ldr	r3, [pc, #164]	; (8006c1c <__lshift+0xd8>)
 8006b76:	482a      	ldr	r0, [pc, #168]	; (8006c20 <__lshift+0xdc>)
 8006b78:	f7fe ff02 	bl	8005980 <__assert_func>
 8006b7c:	3101      	adds	r1, #1
 8006b7e:	005b      	lsls	r3, r3, #1
 8006b80:	e7ee      	b.n	8006b60 <__lshift+0x1c>
 8006b82:	2300      	movs	r3, #0
 8006b84:	f100 0114 	add.w	r1, r0, #20
 8006b88:	f100 0210 	add.w	r2, r0, #16
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	4553      	cmp	r3, sl
 8006b90:	db37      	blt.n	8006c02 <__lshift+0xbe>
 8006b92:	6920      	ldr	r0, [r4, #16]
 8006b94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b98:	f104 0314 	add.w	r3, r4, #20
 8006b9c:	f019 091f 	ands.w	r9, r9, #31
 8006ba0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ba4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006ba8:	d02f      	beq.n	8006c0a <__lshift+0xc6>
 8006baa:	468a      	mov	sl, r1
 8006bac:	f04f 0c00 	mov.w	ip, #0
 8006bb0:	f1c9 0e20 	rsb	lr, r9, #32
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	fa02 f209 	lsl.w	r2, r2, r9
 8006bba:	ea42 020c 	orr.w	r2, r2, ip
 8006bbe:	f84a 2b04 	str.w	r2, [sl], #4
 8006bc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bc6:	4298      	cmp	r0, r3
 8006bc8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006bcc:	d8f2      	bhi.n	8006bb4 <__lshift+0x70>
 8006bce:	1b03      	subs	r3, r0, r4
 8006bd0:	3b15      	subs	r3, #21
 8006bd2:	f023 0303 	bic.w	r3, r3, #3
 8006bd6:	3304      	adds	r3, #4
 8006bd8:	f104 0215 	add.w	r2, r4, #21
 8006bdc:	4290      	cmp	r0, r2
 8006bde:	bf38      	it	cc
 8006be0:	2304      	movcc	r3, #4
 8006be2:	f841 c003 	str.w	ip, [r1, r3]
 8006be6:	f1bc 0f00 	cmp.w	ip, #0
 8006bea:	d001      	beq.n	8006bf0 <__lshift+0xac>
 8006bec:	f108 0602 	add.w	r6, r8, #2
 8006bf0:	3e01      	subs	r6, #1
 8006bf2:	4638      	mov	r0, r7
 8006bf4:	4621      	mov	r1, r4
 8006bf6:	612e      	str	r6, [r5, #16]
 8006bf8:	f7ff fdd6 	bl	80067a8 <_Bfree>
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c02:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c06:	3301      	adds	r3, #1
 8006c08:	e7c1      	b.n	8006b8e <__lshift+0x4a>
 8006c0a:	3904      	subs	r1, #4
 8006c0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c10:	4298      	cmp	r0, r3
 8006c12:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c16:	d8f9      	bhi.n	8006c0c <__lshift+0xc8>
 8006c18:	e7ea      	b.n	8006bf0 <__lshift+0xac>
 8006c1a:	bf00      	nop
 8006c1c:	08007fbf 	.word	0x08007fbf
 8006c20:	08007fd0 	.word	0x08007fd0

08006c24 <__mcmp>:
 8006c24:	4603      	mov	r3, r0
 8006c26:	690a      	ldr	r2, [r1, #16]
 8006c28:	6900      	ldr	r0, [r0, #16]
 8006c2a:	b530      	push	{r4, r5, lr}
 8006c2c:	1a80      	subs	r0, r0, r2
 8006c2e:	d10d      	bne.n	8006c4c <__mcmp+0x28>
 8006c30:	3314      	adds	r3, #20
 8006c32:	3114      	adds	r1, #20
 8006c34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006c38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006c3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006c40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006c44:	4295      	cmp	r5, r2
 8006c46:	d002      	beq.n	8006c4e <__mcmp+0x2a>
 8006c48:	d304      	bcc.n	8006c54 <__mcmp+0x30>
 8006c4a:	2001      	movs	r0, #1
 8006c4c:	bd30      	pop	{r4, r5, pc}
 8006c4e:	42a3      	cmp	r3, r4
 8006c50:	d3f4      	bcc.n	8006c3c <__mcmp+0x18>
 8006c52:	e7fb      	b.n	8006c4c <__mcmp+0x28>
 8006c54:	f04f 30ff 	mov.w	r0, #4294967295
 8006c58:	e7f8      	b.n	8006c4c <__mcmp+0x28>
	...

08006c5c <__mdiff>:
 8006c5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c60:	460d      	mov	r5, r1
 8006c62:	4607      	mov	r7, r0
 8006c64:	4611      	mov	r1, r2
 8006c66:	4628      	mov	r0, r5
 8006c68:	4614      	mov	r4, r2
 8006c6a:	f7ff ffdb 	bl	8006c24 <__mcmp>
 8006c6e:	1e06      	subs	r6, r0, #0
 8006c70:	d111      	bne.n	8006c96 <__mdiff+0x3a>
 8006c72:	4631      	mov	r1, r6
 8006c74:	4638      	mov	r0, r7
 8006c76:	f7ff fd57 	bl	8006728 <_Balloc>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	b928      	cbnz	r0, 8006c8a <__mdiff+0x2e>
 8006c7e:	f240 2132 	movw	r1, #562	; 0x232
 8006c82:	4b3a      	ldr	r3, [pc, #232]	; (8006d6c <__mdiff+0x110>)
 8006c84:	483a      	ldr	r0, [pc, #232]	; (8006d70 <__mdiff+0x114>)
 8006c86:	f7fe fe7b 	bl	8005980 <__assert_func>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006c90:	4610      	mov	r0, r2
 8006c92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c96:	bfa4      	itt	ge
 8006c98:	4623      	movge	r3, r4
 8006c9a:	462c      	movge	r4, r5
 8006c9c:	4638      	mov	r0, r7
 8006c9e:	6861      	ldr	r1, [r4, #4]
 8006ca0:	bfa6      	itte	ge
 8006ca2:	461d      	movge	r5, r3
 8006ca4:	2600      	movge	r6, #0
 8006ca6:	2601      	movlt	r6, #1
 8006ca8:	f7ff fd3e 	bl	8006728 <_Balloc>
 8006cac:	4602      	mov	r2, r0
 8006cae:	b918      	cbnz	r0, 8006cb8 <__mdiff+0x5c>
 8006cb0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006cb4:	4b2d      	ldr	r3, [pc, #180]	; (8006d6c <__mdiff+0x110>)
 8006cb6:	e7e5      	b.n	8006c84 <__mdiff+0x28>
 8006cb8:	f102 0814 	add.w	r8, r2, #20
 8006cbc:	46c2      	mov	sl, r8
 8006cbe:	f04f 0c00 	mov.w	ip, #0
 8006cc2:	6927      	ldr	r7, [r4, #16]
 8006cc4:	60c6      	str	r6, [r0, #12]
 8006cc6:	692e      	ldr	r6, [r5, #16]
 8006cc8:	f104 0014 	add.w	r0, r4, #20
 8006ccc:	f105 0914 	add.w	r9, r5, #20
 8006cd0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006cd4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006cd8:	3410      	adds	r4, #16
 8006cda:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006cde:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ce2:	fa1f f18b 	uxth.w	r1, fp
 8006ce6:	448c      	add	ip, r1
 8006ce8:	b299      	uxth	r1, r3
 8006cea:	0c1b      	lsrs	r3, r3, #16
 8006cec:	ebac 0101 	sub.w	r1, ip, r1
 8006cf0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006cf4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006cf8:	b289      	uxth	r1, r1
 8006cfa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006cfe:	454e      	cmp	r6, r9
 8006d00:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006d04:	f84a 3b04 	str.w	r3, [sl], #4
 8006d08:	d8e7      	bhi.n	8006cda <__mdiff+0x7e>
 8006d0a:	1b73      	subs	r3, r6, r5
 8006d0c:	3b15      	subs	r3, #21
 8006d0e:	f023 0303 	bic.w	r3, r3, #3
 8006d12:	3515      	adds	r5, #21
 8006d14:	3304      	adds	r3, #4
 8006d16:	42ae      	cmp	r6, r5
 8006d18:	bf38      	it	cc
 8006d1a:	2304      	movcc	r3, #4
 8006d1c:	4418      	add	r0, r3
 8006d1e:	4443      	add	r3, r8
 8006d20:	461e      	mov	r6, r3
 8006d22:	4605      	mov	r5, r0
 8006d24:	4575      	cmp	r5, lr
 8006d26:	d30e      	bcc.n	8006d46 <__mdiff+0xea>
 8006d28:	f10e 0103 	add.w	r1, lr, #3
 8006d2c:	1a09      	subs	r1, r1, r0
 8006d2e:	f021 0103 	bic.w	r1, r1, #3
 8006d32:	3803      	subs	r0, #3
 8006d34:	4586      	cmp	lr, r0
 8006d36:	bf38      	it	cc
 8006d38:	2100      	movcc	r1, #0
 8006d3a:	4419      	add	r1, r3
 8006d3c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006d40:	b18b      	cbz	r3, 8006d66 <__mdiff+0x10a>
 8006d42:	6117      	str	r7, [r2, #16]
 8006d44:	e7a4      	b.n	8006c90 <__mdiff+0x34>
 8006d46:	f855 8b04 	ldr.w	r8, [r5], #4
 8006d4a:	fa1f f188 	uxth.w	r1, r8
 8006d4e:	4461      	add	r1, ip
 8006d50:	140c      	asrs	r4, r1, #16
 8006d52:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006d56:	b289      	uxth	r1, r1
 8006d58:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006d5c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006d60:	f846 1b04 	str.w	r1, [r6], #4
 8006d64:	e7de      	b.n	8006d24 <__mdiff+0xc8>
 8006d66:	3f01      	subs	r7, #1
 8006d68:	e7e8      	b.n	8006d3c <__mdiff+0xe0>
 8006d6a:	bf00      	nop
 8006d6c:	08007fbf 	.word	0x08007fbf
 8006d70:	08007fd0 	.word	0x08007fd0

08006d74 <__d2b>:
 8006d74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006d78:	2101      	movs	r1, #1
 8006d7a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006d7e:	4690      	mov	r8, r2
 8006d80:	461d      	mov	r5, r3
 8006d82:	f7ff fcd1 	bl	8006728 <_Balloc>
 8006d86:	4604      	mov	r4, r0
 8006d88:	b930      	cbnz	r0, 8006d98 <__d2b+0x24>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	f240 310a 	movw	r1, #778	; 0x30a
 8006d90:	4b24      	ldr	r3, [pc, #144]	; (8006e24 <__d2b+0xb0>)
 8006d92:	4825      	ldr	r0, [pc, #148]	; (8006e28 <__d2b+0xb4>)
 8006d94:	f7fe fdf4 	bl	8005980 <__assert_func>
 8006d98:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006d9c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006da0:	bb2d      	cbnz	r5, 8006dee <__d2b+0x7a>
 8006da2:	9301      	str	r3, [sp, #4]
 8006da4:	f1b8 0300 	subs.w	r3, r8, #0
 8006da8:	d026      	beq.n	8006df8 <__d2b+0x84>
 8006daa:	4668      	mov	r0, sp
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	f7ff fd83 	bl	80068b8 <__lo0bits>
 8006db2:	9900      	ldr	r1, [sp, #0]
 8006db4:	b1f0      	cbz	r0, 8006df4 <__d2b+0x80>
 8006db6:	9a01      	ldr	r2, [sp, #4]
 8006db8:	f1c0 0320 	rsb	r3, r0, #32
 8006dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc0:	430b      	orrs	r3, r1
 8006dc2:	40c2      	lsrs	r2, r0
 8006dc4:	6163      	str	r3, [r4, #20]
 8006dc6:	9201      	str	r2, [sp, #4]
 8006dc8:	9b01      	ldr	r3, [sp, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	bf14      	ite	ne
 8006dce:	2102      	movne	r1, #2
 8006dd0:	2101      	moveq	r1, #1
 8006dd2:	61a3      	str	r3, [r4, #24]
 8006dd4:	6121      	str	r1, [r4, #16]
 8006dd6:	b1c5      	cbz	r5, 8006e0a <__d2b+0x96>
 8006dd8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006ddc:	4405      	add	r5, r0
 8006dde:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006de2:	603d      	str	r5, [r7, #0]
 8006de4:	6030      	str	r0, [r6, #0]
 8006de6:	4620      	mov	r0, r4
 8006de8:	b002      	add	sp, #8
 8006dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006df2:	e7d6      	b.n	8006da2 <__d2b+0x2e>
 8006df4:	6161      	str	r1, [r4, #20]
 8006df6:	e7e7      	b.n	8006dc8 <__d2b+0x54>
 8006df8:	a801      	add	r0, sp, #4
 8006dfa:	f7ff fd5d 	bl	80068b8 <__lo0bits>
 8006dfe:	2101      	movs	r1, #1
 8006e00:	9b01      	ldr	r3, [sp, #4]
 8006e02:	6121      	str	r1, [r4, #16]
 8006e04:	6163      	str	r3, [r4, #20]
 8006e06:	3020      	adds	r0, #32
 8006e08:	e7e5      	b.n	8006dd6 <__d2b+0x62>
 8006e0a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006e0e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006e12:	6038      	str	r0, [r7, #0]
 8006e14:	6918      	ldr	r0, [r3, #16]
 8006e16:	f7ff fd2f 	bl	8006878 <__hi0bits>
 8006e1a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006e1e:	6031      	str	r1, [r6, #0]
 8006e20:	e7e1      	b.n	8006de6 <__d2b+0x72>
 8006e22:	bf00      	nop
 8006e24:	08007fbf 	.word	0x08007fbf
 8006e28:	08007fd0 	.word	0x08007fd0

08006e2c <_calloc_r>:
 8006e2c:	b570      	push	{r4, r5, r6, lr}
 8006e2e:	fba1 5402 	umull	r5, r4, r1, r2
 8006e32:	b934      	cbnz	r4, 8006e42 <_calloc_r+0x16>
 8006e34:	4629      	mov	r1, r5
 8006e36:	f000 f875 	bl	8006f24 <_malloc_r>
 8006e3a:	4606      	mov	r6, r0
 8006e3c:	b928      	cbnz	r0, 8006e4a <_calloc_r+0x1e>
 8006e3e:	4630      	mov	r0, r6
 8006e40:	bd70      	pop	{r4, r5, r6, pc}
 8006e42:	220c      	movs	r2, #12
 8006e44:	2600      	movs	r6, #0
 8006e46:	6002      	str	r2, [r0, #0]
 8006e48:	e7f9      	b.n	8006e3e <_calloc_r+0x12>
 8006e4a:	462a      	mov	r2, r5
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	f7fe f90f 	bl	8005070 <memset>
 8006e52:	e7f4      	b.n	8006e3e <_calloc_r+0x12>

08006e54 <_free_r>:
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	4605      	mov	r5, r0
 8006e58:	2900      	cmp	r1, #0
 8006e5a:	d040      	beq.n	8006ede <_free_r+0x8a>
 8006e5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e60:	1f0c      	subs	r4, r1, #4
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	bfb8      	it	lt
 8006e66:	18e4      	addlt	r4, r4, r3
 8006e68:	f000 fea4 	bl	8007bb4 <__malloc_lock>
 8006e6c:	4a1c      	ldr	r2, [pc, #112]	; (8006ee0 <_free_r+0x8c>)
 8006e6e:	6813      	ldr	r3, [r2, #0]
 8006e70:	b933      	cbnz	r3, 8006e80 <_free_r+0x2c>
 8006e72:	6063      	str	r3, [r4, #4]
 8006e74:	6014      	str	r4, [r2, #0]
 8006e76:	4628      	mov	r0, r5
 8006e78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e7c:	f000 bea0 	b.w	8007bc0 <__malloc_unlock>
 8006e80:	42a3      	cmp	r3, r4
 8006e82:	d908      	bls.n	8006e96 <_free_r+0x42>
 8006e84:	6820      	ldr	r0, [r4, #0]
 8006e86:	1821      	adds	r1, r4, r0
 8006e88:	428b      	cmp	r3, r1
 8006e8a:	bf01      	itttt	eq
 8006e8c:	6819      	ldreq	r1, [r3, #0]
 8006e8e:	685b      	ldreq	r3, [r3, #4]
 8006e90:	1809      	addeq	r1, r1, r0
 8006e92:	6021      	streq	r1, [r4, #0]
 8006e94:	e7ed      	b.n	8006e72 <_free_r+0x1e>
 8006e96:	461a      	mov	r2, r3
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	b10b      	cbz	r3, 8006ea0 <_free_r+0x4c>
 8006e9c:	42a3      	cmp	r3, r4
 8006e9e:	d9fa      	bls.n	8006e96 <_free_r+0x42>
 8006ea0:	6811      	ldr	r1, [r2, #0]
 8006ea2:	1850      	adds	r0, r2, r1
 8006ea4:	42a0      	cmp	r0, r4
 8006ea6:	d10b      	bne.n	8006ec0 <_free_r+0x6c>
 8006ea8:	6820      	ldr	r0, [r4, #0]
 8006eaa:	4401      	add	r1, r0
 8006eac:	1850      	adds	r0, r2, r1
 8006eae:	4283      	cmp	r3, r0
 8006eb0:	6011      	str	r1, [r2, #0]
 8006eb2:	d1e0      	bne.n	8006e76 <_free_r+0x22>
 8006eb4:	6818      	ldr	r0, [r3, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	4401      	add	r1, r0
 8006eba:	6011      	str	r1, [r2, #0]
 8006ebc:	6053      	str	r3, [r2, #4]
 8006ebe:	e7da      	b.n	8006e76 <_free_r+0x22>
 8006ec0:	d902      	bls.n	8006ec8 <_free_r+0x74>
 8006ec2:	230c      	movs	r3, #12
 8006ec4:	602b      	str	r3, [r5, #0]
 8006ec6:	e7d6      	b.n	8006e76 <_free_r+0x22>
 8006ec8:	6820      	ldr	r0, [r4, #0]
 8006eca:	1821      	adds	r1, r4, r0
 8006ecc:	428b      	cmp	r3, r1
 8006ece:	bf01      	itttt	eq
 8006ed0:	6819      	ldreq	r1, [r3, #0]
 8006ed2:	685b      	ldreq	r3, [r3, #4]
 8006ed4:	1809      	addeq	r1, r1, r0
 8006ed6:	6021      	streq	r1, [r4, #0]
 8006ed8:	6063      	str	r3, [r4, #4]
 8006eda:	6054      	str	r4, [r2, #4]
 8006edc:	e7cb      	b.n	8006e76 <_free_r+0x22>
 8006ede:	bd38      	pop	{r3, r4, r5, pc}
 8006ee0:	200003cc 	.word	0x200003cc

08006ee4 <sbrk_aligned>:
 8006ee4:	b570      	push	{r4, r5, r6, lr}
 8006ee6:	4e0e      	ldr	r6, [pc, #56]	; (8006f20 <sbrk_aligned+0x3c>)
 8006ee8:	460c      	mov	r4, r1
 8006eea:	6831      	ldr	r1, [r6, #0]
 8006eec:	4605      	mov	r5, r0
 8006eee:	b911      	cbnz	r1, 8006ef6 <sbrk_aligned+0x12>
 8006ef0:	f000 fb40 	bl	8007574 <_sbrk_r>
 8006ef4:	6030      	str	r0, [r6, #0]
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	4628      	mov	r0, r5
 8006efa:	f000 fb3b 	bl	8007574 <_sbrk_r>
 8006efe:	1c43      	adds	r3, r0, #1
 8006f00:	d00a      	beq.n	8006f18 <sbrk_aligned+0x34>
 8006f02:	1cc4      	adds	r4, r0, #3
 8006f04:	f024 0403 	bic.w	r4, r4, #3
 8006f08:	42a0      	cmp	r0, r4
 8006f0a:	d007      	beq.n	8006f1c <sbrk_aligned+0x38>
 8006f0c:	1a21      	subs	r1, r4, r0
 8006f0e:	4628      	mov	r0, r5
 8006f10:	f000 fb30 	bl	8007574 <_sbrk_r>
 8006f14:	3001      	adds	r0, #1
 8006f16:	d101      	bne.n	8006f1c <sbrk_aligned+0x38>
 8006f18:	f04f 34ff 	mov.w	r4, #4294967295
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	bd70      	pop	{r4, r5, r6, pc}
 8006f20:	200003d0 	.word	0x200003d0

08006f24 <_malloc_r>:
 8006f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f28:	1ccd      	adds	r5, r1, #3
 8006f2a:	f025 0503 	bic.w	r5, r5, #3
 8006f2e:	3508      	adds	r5, #8
 8006f30:	2d0c      	cmp	r5, #12
 8006f32:	bf38      	it	cc
 8006f34:	250c      	movcc	r5, #12
 8006f36:	2d00      	cmp	r5, #0
 8006f38:	4607      	mov	r7, r0
 8006f3a:	db01      	blt.n	8006f40 <_malloc_r+0x1c>
 8006f3c:	42a9      	cmp	r1, r5
 8006f3e:	d905      	bls.n	8006f4c <_malloc_r+0x28>
 8006f40:	230c      	movs	r3, #12
 8006f42:	2600      	movs	r6, #0
 8006f44:	603b      	str	r3, [r7, #0]
 8006f46:	4630      	mov	r0, r6
 8006f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f4c:	4e2e      	ldr	r6, [pc, #184]	; (8007008 <_malloc_r+0xe4>)
 8006f4e:	f000 fe31 	bl	8007bb4 <__malloc_lock>
 8006f52:	6833      	ldr	r3, [r6, #0]
 8006f54:	461c      	mov	r4, r3
 8006f56:	bb34      	cbnz	r4, 8006fa6 <_malloc_r+0x82>
 8006f58:	4629      	mov	r1, r5
 8006f5a:	4638      	mov	r0, r7
 8006f5c:	f7ff ffc2 	bl	8006ee4 <sbrk_aligned>
 8006f60:	1c43      	adds	r3, r0, #1
 8006f62:	4604      	mov	r4, r0
 8006f64:	d14d      	bne.n	8007002 <_malloc_r+0xde>
 8006f66:	6834      	ldr	r4, [r6, #0]
 8006f68:	4626      	mov	r6, r4
 8006f6a:	2e00      	cmp	r6, #0
 8006f6c:	d140      	bne.n	8006ff0 <_malloc_r+0xcc>
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	4631      	mov	r1, r6
 8006f72:	4638      	mov	r0, r7
 8006f74:	eb04 0803 	add.w	r8, r4, r3
 8006f78:	f000 fafc 	bl	8007574 <_sbrk_r>
 8006f7c:	4580      	cmp	r8, r0
 8006f7e:	d13a      	bne.n	8006ff6 <_malloc_r+0xd2>
 8006f80:	6821      	ldr	r1, [r4, #0]
 8006f82:	3503      	adds	r5, #3
 8006f84:	1a6d      	subs	r5, r5, r1
 8006f86:	f025 0503 	bic.w	r5, r5, #3
 8006f8a:	3508      	adds	r5, #8
 8006f8c:	2d0c      	cmp	r5, #12
 8006f8e:	bf38      	it	cc
 8006f90:	250c      	movcc	r5, #12
 8006f92:	4638      	mov	r0, r7
 8006f94:	4629      	mov	r1, r5
 8006f96:	f7ff ffa5 	bl	8006ee4 <sbrk_aligned>
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	d02b      	beq.n	8006ff6 <_malloc_r+0xd2>
 8006f9e:	6823      	ldr	r3, [r4, #0]
 8006fa0:	442b      	add	r3, r5
 8006fa2:	6023      	str	r3, [r4, #0]
 8006fa4:	e00e      	b.n	8006fc4 <_malloc_r+0xa0>
 8006fa6:	6822      	ldr	r2, [r4, #0]
 8006fa8:	1b52      	subs	r2, r2, r5
 8006faa:	d41e      	bmi.n	8006fea <_malloc_r+0xc6>
 8006fac:	2a0b      	cmp	r2, #11
 8006fae:	d916      	bls.n	8006fde <_malloc_r+0xba>
 8006fb0:	1961      	adds	r1, r4, r5
 8006fb2:	42a3      	cmp	r3, r4
 8006fb4:	6025      	str	r5, [r4, #0]
 8006fb6:	bf18      	it	ne
 8006fb8:	6059      	strne	r1, [r3, #4]
 8006fba:	6863      	ldr	r3, [r4, #4]
 8006fbc:	bf08      	it	eq
 8006fbe:	6031      	streq	r1, [r6, #0]
 8006fc0:	5162      	str	r2, [r4, r5]
 8006fc2:	604b      	str	r3, [r1, #4]
 8006fc4:	4638      	mov	r0, r7
 8006fc6:	f104 060b 	add.w	r6, r4, #11
 8006fca:	f000 fdf9 	bl	8007bc0 <__malloc_unlock>
 8006fce:	f026 0607 	bic.w	r6, r6, #7
 8006fd2:	1d23      	adds	r3, r4, #4
 8006fd4:	1af2      	subs	r2, r6, r3
 8006fd6:	d0b6      	beq.n	8006f46 <_malloc_r+0x22>
 8006fd8:	1b9b      	subs	r3, r3, r6
 8006fda:	50a3      	str	r3, [r4, r2]
 8006fdc:	e7b3      	b.n	8006f46 <_malloc_r+0x22>
 8006fde:	6862      	ldr	r2, [r4, #4]
 8006fe0:	42a3      	cmp	r3, r4
 8006fe2:	bf0c      	ite	eq
 8006fe4:	6032      	streq	r2, [r6, #0]
 8006fe6:	605a      	strne	r2, [r3, #4]
 8006fe8:	e7ec      	b.n	8006fc4 <_malloc_r+0xa0>
 8006fea:	4623      	mov	r3, r4
 8006fec:	6864      	ldr	r4, [r4, #4]
 8006fee:	e7b2      	b.n	8006f56 <_malloc_r+0x32>
 8006ff0:	4634      	mov	r4, r6
 8006ff2:	6876      	ldr	r6, [r6, #4]
 8006ff4:	e7b9      	b.n	8006f6a <_malloc_r+0x46>
 8006ff6:	230c      	movs	r3, #12
 8006ff8:	4638      	mov	r0, r7
 8006ffa:	603b      	str	r3, [r7, #0]
 8006ffc:	f000 fde0 	bl	8007bc0 <__malloc_unlock>
 8007000:	e7a1      	b.n	8006f46 <_malloc_r+0x22>
 8007002:	6025      	str	r5, [r4, #0]
 8007004:	e7de      	b.n	8006fc4 <_malloc_r+0xa0>
 8007006:	bf00      	nop
 8007008:	200003cc 	.word	0x200003cc

0800700c <__ssputs_r>:
 800700c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007010:	688e      	ldr	r6, [r1, #8]
 8007012:	4682      	mov	sl, r0
 8007014:	429e      	cmp	r6, r3
 8007016:	460c      	mov	r4, r1
 8007018:	4690      	mov	r8, r2
 800701a:	461f      	mov	r7, r3
 800701c:	d838      	bhi.n	8007090 <__ssputs_r+0x84>
 800701e:	898a      	ldrh	r2, [r1, #12]
 8007020:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007024:	d032      	beq.n	800708c <__ssputs_r+0x80>
 8007026:	6825      	ldr	r5, [r4, #0]
 8007028:	6909      	ldr	r1, [r1, #16]
 800702a:	3301      	adds	r3, #1
 800702c:	eba5 0901 	sub.w	r9, r5, r1
 8007030:	6965      	ldr	r5, [r4, #20]
 8007032:	444b      	add	r3, r9
 8007034:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007038:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800703c:	106d      	asrs	r5, r5, #1
 800703e:	429d      	cmp	r5, r3
 8007040:	bf38      	it	cc
 8007042:	461d      	movcc	r5, r3
 8007044:	0553      	lsls	r3, r2, #21
 8007046:	d531      	bpl.n	80070ac <__ssputs_r+0xa0>
 8007048:	4629      	mov	r1, r5
 800704a:	f7ff ff6b 	bl	8006f24 <_malloc_r>
 800704e:	4606      	mov	r6, r0
 8007050:	b950      	cbnz	r0, 8007068 <__ssputs_r+0x5c>
 8007052:	230c      	movs	r3, #12
 8007054:	f04f 30ff 	mov.w	r0, #4294967295
 8007058:	f8ca 3000 	str.w	r3, [sl]
 800705c:	89a3      	ldrh	r3, [r4, #12]
 800705e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007062:	81a3      	strh	r3, [r4, #12]
 8007064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007068:	464a      	mov	r2, r9
 800706a:	6921      	ldr	r1, [r4, #16]
 800706c:	f7ff fb4e 	bl	800670c <memcpy>
 8007070:	89a3      	ldrh	r3, [r4, #12]
 8007072:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800707a:	81a3      	strh	r3, [r4, #12]
 800707c:	6126      	str	r6, [r4, #16]
 800707e:	444e      	add	r6, r9
 8007080:	6026      	str	r6, [r4, #0]
 8007082:	463e      	mov	r6, r7
 8007084:	6165      	str	r5, [r4, #20]
 8007086:	eba5 0509 	sub.w	r5, r5, r9
 800708a:	60a5      	str	r5, [r4, #8]
 800708c:	42be      	cmp	r6, r7
 800708e:	d900      	bls.n	8007092 <__ssputs_r+0x86>
 8007090:	463e      	mov	r6, r7
 8007092:	4632      	mov	r2, r6
 8007094:	4641      	mov	r1, r8
 8007096:	6820      	ldr	r0, [r4, #0]
 8007098:	f000 fd72 	bl	8007b80 <memmove>
 800709c:	68a3      	ldr	r3, [r4, #8]
 800709e:	2000      	movs	r0, #0
 80070a0:	1b9b      	subs	r3, r3, r6
 80070a2:	60a3      	str	r3, [r4, #8]
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	4433      	add	r3, r6
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	e7db      	b.n	8007064 <__ssputs_r+0x58>
 80070ac:	462a      	mov	r2, r5
 80070ae:	f000 fd8d 	bl	8007bcc <_realloc_r>
 80070b2:	4606      	mov	r6, r0
 80070b4:	2800      	cmp	r0, #0
 80070b6:	d1e1      	bne.n	800707c <__ssputs_r+0x70>
 80070b8:	4650      	mov	r0, sl
 80070ba:	6921      	ldr	r1, [r4, #16]
 80070bc:	f7ff feca 	bl	8006e54 <_free_r>
 80070c0:	e7c7      	b.n	8007052 <__ssputs_r+0x46>
	...

080070c4 <_svfiprintf_r>:
 80070c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c8:	4698      	mov	r8, r3
 80070ca:	898b      	ldrh	r3, [r1, #12]
 80070cc:	4607      	mov	r7, r0
 80070ce:	061b      	lsls	r3, r3, #24
 80070d0:	460d      	mov	r5, r1
 80070d2:	4614      	mov	r4, r2
 80070d4:	b09d      	sub	sp, #116	; 0x74
 80070d6:	d50e      	bpl.n	80070f6 <_svfiprintf_r+0x32>
 80070d8:	690b      	ldr	r3, [r1, #16]
 80070da:	b963      	cbnz	r3, 80070f6 <_svfiprintf_r+0x32>
 80070dc:	2140      	movs	r1, #64	; 0x40
 80070de:	f7ff ff21 	bl	8006f24 <_malloc_r>
 80070e2:	6028      	str	r0, [r5, #0]
 80070e4:	6128      	str	r0, [r5, #16]
 80070e6:	b920      	cbnz	r0, 80070f2 <_svfiprintf_r+0x2e>
 80070e8:	230c      	movs	r3, #12
 80070ea:	603b      	str	r3, [r7, #0]
 80070ec:	f04f 30ff 	mov.w	r0, #4294967295
 80070f0:	e0d1      	b.n	8007296 <_svfiprintf_r+0x1d2>
 80070f2:	2340      	movs	r3, #64	; 0x40
 80070f4:	616b      	str	r3, [r5, #20]
 80070f6:	2300      	movs	r3, #0
 80070f8:	9309      	str	r3, [sp, #36]	; 0x24
 80070fa:	2320      	movs	r3, #32
 80070fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007100:	2330      	movs	r3, #48	; 0x30
 8007102:	f04f 0901 	mov.w	r9, #1
 8007106:	f8cd 800c 	str.w	r8, [sp, #12]
 800710a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80072b0 <_svfiprintf_r+0x1ec>
 800710e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007112:	4623      	mov	r3, r4
 8007114:	469a      	mov	sl, r3
 8007116:	f813 2b01 	ldrb.w	r2, [r3], #1
 800711a:	b10a      	cbz	r2, 8007120 <_svfiprintf_r+0x5c>
 800711c:	2a25      	cmp	r2, #37	; 0x25
 800711e:	d1f9      	bne.n	8007114 <_svfiprintf_r+0x50>
 8007120:	ebba 0b04 	subs.w	fp, sl, r4
 8007124:	d00b      	beq.n	800713e <_svfiprintf_r+0x7a>
 8007126:	465b      	mov	r3, fp
 8007128:	4622      	mov	r2, r4
 800712a:	4629      	mov	r1, r5
 800712c:	4638      	mov	r0, r7
 800712e:	f7ff ff6d 	bl	800700c <__ssputs_r>
 8007132:	3001      	adds	r0, #1
 8007134:	f000 80aa 	beq.w	800728c <_svfiprintf_r+0x1c8>
 8007138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800713a:	445a      	add	r2, fp
 800713c:	9209      	str	r2, [sp, #36]	; 0x24
 800713e:	f89a 3000 	ldrb.w	r3, [sl]
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 80a2 	beq.w	800728c <_svfiprintf_r+0x1c8>
 8007148:	2300      	movs	r3, #0
 800714a:	f04f 32ff 	mov.w	r2, #4294967295
 800714e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007152:	f10a 0a01 	add.w	sl, sl, #1
 8007156:	9304      	str	r3, [sp, #16]
 8007158:	9307      	str	r3, [sp, #28]
 800715a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800715e:	931a      	str	r3, [sp, #104]	; 0x68
 8007160:	4654      	mov	r4, sl
 8007162:	2205      	movs	r2, #5
 8007164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007168:	4851      	ldr	r0, [pc, #324]	; (80072b0 <_svfiprintf_r+0x1ec>)
 800716a:	f7ff fac1 	bl	80066f0 <memchr>
 800716e:	9a04      	ldr	r2, [sp, #16]
 8007170:	b9d8      	cbnz	r0, 80071aa <_svfiprintf_r+0xe6>
 8007172:	06d0      	lsls	r0, r2, #27
 8007174:	bf44      	itt	mi
 8007176:	2320      	movmi	r3, #32
 8007178:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800717c:	0711      	lsls	r1, r2, #28
 800717e:	bf44      	itt	mi
 8007180:	232b      	movmi	r3, #43	; 0x2b
 8007182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007186:	f89a 3000 	ldrb.w	r3, [sl]
 800718a:	2b2a      	cmp	r3, #42	; 0x2a
 800718c:	d015      	beq.n	80071ba <_svfiprintf_r+0xf6>
 800718e:	4654      	mov	r4, sl
 8007190:	2000      	movs	r0, #0
 8007192:	f04f 0c0a 	mov.w	ip, #10
 8007196:	9a07      	ldr	r2, [sp, #28]
 8007198:	4621      	mov	r1, r4
 800719a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800719e:	3b30      	subs	r3, #48	; 0x30
 80071a0:	2b09      	cmp	r3, #9
 80071a2:	d94e      	bls.n	8007242 <_svfiprintf_r+0x17e>
 80071a4:	b1b0      	cbz	r0, 80071d4 <_svfiprintf_r+0x110>
 80071a6:	9207      	str	r2, [sp, #28]
 80071a8:	e014      	b.n	80071d4 <_svfiprintf_r+0x110>
 80071aa:	eba0 0308 	sub.w	r3, r0, r8
 80071ae:	fa09 f303 	lsl.w	r3, r9, r3
 80071b2:	4313      	orrs	r3, r2
 80071b4:	46a2      	mov	sl, r4
 80071b6:	9304      	str	r3, [sp, #16]
 80071b8:	e7d2      	b.n	8007160 <_svfiprintf_r+0x9c>
 80071ba:	9b03      	ldr	r3, [sp, #12]
 80071bc:	1d19      	adds	r1, r3, #4
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	9103      	str	r1, [sp, #12]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	bfbb      	ittet	lt
 80071c6:	425b      	neglt	r3, r3
 80071c8:	f042 0202 	orrlt.w	r2, r2, #2
 80071cc:	9307      	strge	r3, [sp, #28]
 80071ce:	9307      	strlt	r3, [sp, #28]
 80071d0:	bfb8      	it	lt
 80071d2:	9204      	strlt	r2, [sp, #16]
 80071d4:	7823      	ldrb	r3, [r4, #0]
 80071d6:	2b2e      	cmp	r3, #46	; 0x2e
 80071d8:	d10c      	bne.n	80071f4 <_svfiprintf_r+0x130>
 80071da:	7863      	ldrb	r3, [r4, #1]
 80071dc:	2b2a      	cmp	r3, #42	; 0x2a
 80071de:	d135      	bne.n	800724c <_svfiprintf_r+0x188>
 80071e0:	9b03      	ldr	r3, [sp, #12]
 80071e2:	3402      	adds	r4, #2
 80071e4:	1d1a      	adds	r2, r3, #4
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	9203      	str	r2, [sp, #12]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	bfb8      	it	lt
 80071ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80071f2:	9305      	str	r3, [sp, #20]
 80071f4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80072b4 <_svfiprintf_r+0x1f0>
 80071f8:	2203      	movs	r2, #3
 80071fa:	4650      	mov	r0, sl
 80071fc:	7821      	ldrb	r1, [r4, #0]
 80071fe:	f7ff fa77 	bl	80066f0 <memchr>
 8007202:	b140      	cbz	r0, 8007216 <_svfiprintf_r+0x152>
 8007204:	2340      	movs	r3, #64	; 0x40
 8007206:	eba0 000a 	sub.w	r0, r0, sl
 800720a:	fa03 f000 	lsl.w	r0, r3, r0
 800720e:	9b04      	ldr	r3, [sp, #16]
 8007210:	3401      	adds	r4, #1
 8007212:	4303      	orrs	r3, r0
 8007214:	9304      	str	r3, [sp, #16]
 8007216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800721a:	2206      	movs	r2, #6
 800721c:	4826      	ldr	r0, [pc, #152]	; (80072b8 <_svfiprintf_r+0x1f4>)
 800721e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007222:	f7ff fa65 	bl	80066f0 <memchr>
 8007226:	2800      	cmp	r0, #0
 8007228:	d038      	beq.n	800729c <_svfiprintf_r+0x1d8>
 800722a:	4b24      	ldr	r3, [pc, #144]	; (80072bc <_svfiprintf_r+0x1f8>)
 800722c:	bb1b      	cbnz	r3, 8007276 <_svfiprintf_r+0x1b2>
 800722e:	9b03      	ldr	r3, [sp, #12]
 8007230:	3307      	adds	r3, #7
 8007232:	f023 0307 	bic.w	r3, r3, #7
 8007236:	3308      	adds	r3, #8
 8007238:	9303      	str	r3, [sp, #12]
 800723a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800723c:	4433      	add	r3, r6
 800723e:	9309      	str	r3, [sp, #36]	; 0x24
 8007240:	e767      	b.n	8007112 <_svfiprintf_r+0x4e>
 8007242:	460c      	mov	r4, r1
 8007244:	2001      	movs	r0, #1
 8007246:	fb0c 3202 	mla	r2, ip, r2, r3
 800724a:	e7a5      	b.n	8007198 <_svfiprintf_r+0xd4>
 800724c:	2300      	movs	r3, #0
 800724e:	f04f 0c0a 	mov.w	ip, #10
 8007252:	4619      	mov	r1, r3
 8007254:	3401      	adds	r4, #1
 8007256:	9305      	str	r3, [sp, #20]
 8007258:	4620      	mov	r0, r4
 800725a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800725e:	3a30      	subs	r2, #48	; 0x30
 8007260:	2a09      	cmp	r2, #9
 8007262:	d903      	bls.n	800726c <_svfiprintf_r+0x1a8>
 8007264:	2b00      	cmp	r3, #0
 8007266:	d0c5      	beq.n	80071f4 <_svfiprintf_r+0x130>
 8007268:	9105      	str	r1, [sp, #20]
 800726a:	e7c3      	b.n	80071f4 <_svfiprintf_r+0x130>
 800726c:	4604      	mov	r4, r0
 800726e:	2301      	movs	r3, #1
 8007270:	fb0c 2101 	mla	r1, ip, r1, r2
 8007274:	e7f0      	b.n	8007258 <_svfiprintf_r+0x194>
 8007276:	ab03      	add	r3, sp, #12
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	462a      	mov	r2, r5
 800727c:	4638      	mov	r0, r7
 800727e:	4b10      	ldr	r3, [pc, #64]	; (80072c0 <_svfiprintf_r+0x1fc>)
 8007280:	a904      	add	r1, sp, #16
 8007282:	f7fd ff9b 	bl	80051bc <_printf_float>
 8007286:	1c42      	adds	r2, r0, #1
 8007288:	4606      	mov	r6, r0
 800728a:	d1d6      	bne.n	800723a <_svfiprintf_r+0x176>
 800728c:	89ab      	ldrh	r3, [r5, #12]
 800728e:	065b      	lsls	r3, r3, #25
 8007290:	f53f af2c 	bmi.w	80070ec <_svfiprintf_r+0x28>
 8007294:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007296:	b01d      	add	sp, #116	; 0x74
 8007298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800729c:	ab03      	add	r3, sp, #12
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	462a      	mov	r2, r5
 80072a2:	4638      	mov	r0, r7
 80072a4:	4b06      	ldr	r3, [pc, #24]	; (80072c0 <_svfiprintf_r+0x1fc>)
 80072a6:	a904      	add	r1, sp, #16
 80072a8:	f7fe fa24 	bl	80056f4 <_printf_i>
 80072ac:	e7eb      	b.n	8007286 <_svfiprintf_r+0x1c2>
 80072ae:	bf00      	nop
 80072b0:	0800812c 	.word	0x0800812c
 80072b4:	08008132 	.word	0x08008132
 80072b8:	08008136 	.word	0x08008136
 80072bc:	080051bd 	.word	0x080051bd
 80072c0:	0800700d 	.word	0x0800700d

080072c4 <__sfputc_r>:
 80072c4:	6893      	ldr	r3, [r2, #8]
 80072c6:	b410      	push	{r4}
 80072c8:	3b01      	subs	r3, #1
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	6093      	str	r3, [r2, #8]
 80072ce:	da07      	bge.n	80072e0 <__sfputc_r+0x1c>
 80072d0:	6994      	ldr	r4, [r2, #24]
 80072d2:	42a3      	cmp	r3, r4
 80072d4:	db01      	blt.n	80072da <__sfputc_r+0x16>
 80072d6:	290a      	cmp	r1, #10
 80072d8:	d102      	bne.n	80072e0 <__sfputc_r+0x1c>
 80072da:	bc10      	pop	{r4}
 80072dc:	f000 b95a 	b.w	8007594 <__swbuf_r>
 80072e0:	6813      	ldr	r3, [r2, #0]
 80072e2:	1c58      	adds	r0, r3, #1
 80072e4:	6010      	str	r0, [r2, #0]
 80072e6:	7019      	strb	r1, [r3, #0]
 80072e8:	4608      	mov	r0, r1
 80072ea:	bc10      	pop	{r4}
 80072ec:	4770      	bx	lr

080072ee <__sfputs_r>:
 80072ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f0:	4606      	mov	r6, r0
 80072f2:	460f      	mov	r7, r1
 80072f4:	4614      	mov	r4, r2
 80072f6:	18d5      	adds	r5, r2, r3
 80072f8:	42ac      	cmp	r4, r5
 80072fa:	d101      	bne.n	8007300 <__sfputs_r+0x12>
 80072fc:	2000      	movs	r0, #0
 80072fe:	e007      	b.n	8007310 <__sfputs_r+0x22>
 8007300:	463a      	mov	r2, r7
 8007302:	4630      	mov	r0, r6
 8007304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007308:	f7ff ffdc 	bl	80072c4 <__sfputc_r>
 800730c:	1c43      	adds	r3, r0, #1
 800730e:	d1f3      	bne.n	80072f8 <__sfputs_r+0xa>
 8007310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007314 <_vfiprintf_r>:
 8007314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007318:	460d      	mov	r5, r1
 800731a:	4614      	mov	r4, r2
 800731c:	4698      	mov	r8, r3
 800731e:	4606      	mov	r6, r0
 8007320:	b09d      	sub	sp, #116	; 0x74
 8007322:	b118      	cbz	r0, 800732c <_vfiprintf_r+0x18>
 8007324:	6983      	ldr	r3, [r0, #24]
 8007326:	b90b      	cbnz	r3, 800732c <_vfiprintf_r+0x18>
 8007328:	f000 fb12 	bl	8007950 <__sinit>
 800732c:	4b89      	ldr	r3, [pc, #548]	; (8007554 <_vfiprintf_r+0x240>)
 800732e:	429d      	cmp	r5, r3
 8007330:	d11b      	bne.n	800736a <_vfiprintf_r+0x56>
 8007332:	6875      	ldr	r5, [r6, #4]
 8007334:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007336:	07d9      	lsls	r1, r3, #31
 8007338:	d405      	bmi.n	8007346 <_vfiprintf_r+0x32>
 800733a:	89ab      	ldrh	r3, [r5, #12]
 800733c:	059a      	lsls	r2, r3, #22
 800733e:	d402      	bmi.n	8007346 <_vfiprintf_r+0x32>
 8007340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007342:	f000 fba3 	bl	8007a8c <__retarget_lock_acquire_recursive>
 8007346:	89ab      	ldrh	r3, [r5, #12]
 8007348:	071b      	lsls	r3, r3, #28
 800734a:	d501      	bpl.n	8007350 <_vfiprintf_r+0x3c>
 800734c:	692b      	ldr	r3, [r5, #16]
 800734e:	b9eb      	cbnz	r3, 800738c <_vfiprintf_r+0x78>
 8007350:	4629      	mov	r1, r5
 8007352:	4630      	mov	r0, r6
 8007354:	f000 f970 	bl	8007638 <__swsetup_r>
 8007358:	b1c0      	cbz	r0, 800738c <_vfiprintf_r+0x78>
 800735a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800735c:	07dc      	lsls	r4, r3, #31
 800735e:	d50e      	bpl.n	800737e <_vfiprintf_r+0x6a>
 8007360:	f04f 30ff 	mov.w	r0, #4294967295
 8007364:	b01d      	add	sp, #116	; 0x74
 8007366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800736a:	4b7b      	ldr	r3, [pc, #492]	; (8007558 <_vfiprintf_r+0x244>)
 800736c:	429d      	cmp	r5, r3
 800736e:	d101      	bne.n	8007374 <_vfiprintf_r+0x60>
 8007370:	68b5      	ldr	r5, [r6, #8]
 8007372:	e7df      	b.n	8007334 <_vfiprintf_r+0x20>
 8007374:	4b79      	ldr	r3, [pc, #484]	; (800755c <_vfiprintf_r+0x248>)
 8007376:	429d      	cmp	r5, r3
 8007378:	bf08      	it	eq
 800737a:	68f5      	ldreq	r5, [r6, #12]
 800737c:	e7da      	b.n	8007334 <_vfiprintf_r+0x20>
 800737e:	89ab      	ldrh	r3, [r5, #12]
 8007380:	0598      	lsls	r0, r3, #22
 8007382:	d4ed      	bmi.n	8007360 <_vfiprintf_r+0x4c>
 8007384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007386:	f000 fb82 	bl	8007a8e <__retarget_lock_release_recursive>
 800738a:	e7e9      	b.n	8007360 <_vfiprintf_r+0x4c>
 800738c:	2300      	movs	r3, #0
 800738e:	9309      	str	r3, [sp, #36]	; 0x24
 8007390:	2320      	movs	r3, #32
 8007392:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007396:	2330      	movs	r3, #48	; 0x30
 8007398:	f04f 0901 	mov.w	r9, #1
 800739c:	f8cd 800c 	str.w	r8, [sp, #12]
 80073a0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007560 <_vfiprintf_r+0x24c>
 80073a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073a8:	4623      	mov	r3, r4
 80073aa:	469a      	mov	sl, r3
 80073ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073b0:	b10a      	cbz	r2, 80073b6 <_vfiprintf_r+0xa2>
 80073b2:	2a25      	cmp	r2, #37	; 0x25
 80073b4:	d1f9      	bne.n	80073aa <_vfiprintf_r+0x96>
 80073b6:	ebba 0b04 	subs.w	fp, sl, r4
 80073ba:	d00b      	beq.n	80073d4 <_vfiprintf_r+0xc0>
 80073bc:	465b      	mov	r3, fp
 80073be:	4622      	mov	r2, r4
 80073c0:	4629      	mov	r1, r5
 80073c2:	4630      	mov	r0, r6
 80073c4:	f7ff ff93 	bl	80072ee <__sfputs_r>
 80073c8:	3001      	adds	r0, #1
 80073ca:	f000 80aa 	beq.w	8007522 <_vfiprintf_r+0x20e>
 80073ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073d0:	445a      	add	r2, fp
 80073d2:	9209      	str	r2, [sp, #36]	; 0x24
 80073d4:	f89a 3000 	ldrb.w	r3, [sl]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 80a2 	beq.w	8007522 <_vfiprintf_r+0x20e>
 80073de:	2300      	movs	r3, #0
 80073e0:	f04f 32ff 	mov.w	r2, #4294967295
 80073e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073e8:	f10a 0a01 	add.w	sl, sl, #1
 80073ec:	9304      	str	r3, [sp, #16]
 80073ee:	9307      	str	r3, [sp, #28]
 80073f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073f4:	931a      	str	r3, [sp, #104]	; 0x68
 80073f6:	4654      	mov	r4, sl
 80073f8:	2205      	movs	r2, #5
 80073fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073fe:	4858      	ldr	r0, [pc, #352]	; (8007560 <_vfiprintf_r+0x24c>)
 8007400:	f7ff f976 	bl	80066f0 <memchr>
 8007404:	9a04      	ldr	r2, [sp, #16]
 8007406:	b9d8      	cbnz	r0, 8007440 <_vfiprintf_r+0x12c>
 8007408:	06d1      	lsls	r1, r2, #27
 800740a:	bf44      	itt	mi
 800740c:	2320      	movmi	r3, #32
 800740e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007412:	0713      	lsls	r3, r2, #28
 8007414:	bf44      	itt	mi
 8007416:	232b      	movmi	r3, #43	; 0x2b
 8007418:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800741c:	f89a 3000 	ldrb.w	r3, [sl]
 8007420:	2b2a      	cmp	r3, #42	; 0x2a
 8007422:	d015      	beq.n	8007450 <_vfiprintf_r+0x13c>
 8007424:	4654      	mov	r4, sl
 8007426:	2000      	movs	r0, #0
 8007428:	f04f 0c0a 	mov.w	ip, #10
 800742c:	9a07      	ldr	r2, [sp, #28]
 800742e:	4621      	mov	r1, r4
 8007430:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007434:	3b30      	subs	r3, #48	; 0x30
 8007436:	2b09      	cmp	r3, #9
 8007438:	d94e      	bls.n	80074d8 <_vfiprintf_r+0x1c4>
 800743a:	b1b0      	cbz	r0, 800746a <_vfiprintf_r+0x156>
 800743c:	9207      	str	r2, [sp, #28]
 800743e:	e014      	b.n	800746a <_vfiprintf_r+0x156>
 8007440:	eba0 0308 	sub.w	r3, r0, r8
 8007444:	fa09 f303 	lsl.w	r3, r9, r3
 8007448:	4313      	orrs	r3, r2
 800744a:	46a2      	mov	sl, r4
 800744c:	9304      	str	r3, [sp, #16]
 800744e:	e7d2      	b.n	80073f6 <_vfiprintf_r+0xe2>
 8007450:	9b03      	ldr	r3, [sp, #12]
 8007452:	1d19      	adds	r1, r3, #4
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	9103      	str	r1, [sp, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	bfbb      	ittet	lt
 800745c:	425b      	neglt	r3, r3
 800745e:	f042 0202 	orrlt.w	r2, r2, #2
 8007462:	9307      	strge	r3, [sp, #28]
 8007464:	9307      	strlt	r3, [sp, #28]
 8007466:	bfb8      	it	lt
 8007468:	9204      	strlt	r2, [sp, #16]
 800746a:	7823      	ldrb	r3, [r4, #0]
 800746c:	2b2e      	cmp	r3, #46	; 0x2e
 800746e:	d10c      	bne.n	800748a <_vfiprintf_r+0x176>
 8007470:	7863      	ldrb	r3, [r4, #1]
 8007472:	2b2a      	cmp	r3, #42	; 0x2a
 8007474:	d135      	bne.n	80074e2 <_vfiprintf_r+0x1ce>
 8007476:	9b03      	ldr	r3, [sp, #12]
 8007478:	3402      	adds	r4, #2
 800747a:	1d1a      	adds	r2, r3, #4
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	9203      	str	r2, [sp, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	bfb8      	it	lt
 8007484:	f04f 33ff 	movlt.w	r3, #4294967295
 8007488:	9305      	str	r3, [sp, #20]
 800748a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007564 <_vfiprintf_r+0x250>
 800748e:	2203      	movs	r2, #3
 8007490:	4650      	mov	r0, sl
 8007492:	7821      	ldrb	r1, [r4, #0]
 8007494:	f7ff f92c 	bl	80066f0 <memchr>
 8007498:	b140      	cbz	r0, 80074ac <_vfiprintf_r+0x198>
 800749a:	2340      	movs	r3, #64	; 0x40
 800749c:	eba0 000a 	sub.w	r0, r0, sl
 80074a0:	fa03 f000 	lsl.w	r0, r3, r0
 80074a4:	9b04      	ldr	r3, [sp, #16]
 80074a6:	3401      	adds	r4, #1
 80074a8:	4303      	orrs	r3, r0
 80074aa:	9304      	str	r3, [sp, #16]
 80074ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074b0:	2206      	movs	r2, #6
 80074b2:	482d      	ldr	r0, [pc, #180]	; (8007568 <_vfiprintf_r+0x254>)
 80074b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074b8:	f7ff f91a 	bl	80066f0 <memchr>
 80074bc:	2800      	cmp	r0, #0
 80074be:	d03f      	beq.n	8007540 <_vfiprintf_r+0x22c>
 80074c0:	4b2a      	ldr	r3, [pc, #168]	; (800756c <_vfiprintf_r+0x258>)
 80074c2:	bb1b      	cbnz	r3, 800750c <_vfiprintf_r+0x1f8>
 80074c4:	9b03      	ldr	r3, [sp, #12]
 80074c6:	3307      	adds	r3, #7
 80074c8:	f023 0307 	bic.w	r3, r3, #7
 80074cc:	3308      	adds	r3, #8
 80074ce:	9303      	str	r3, [sp, #12]
 80074d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d2:	443b      	add	r3, r7
 80074d4:	9309      	str	r3, [sp, #36]	; 0x24
 80074d6:	e767      	b.n	80073a8 <_vfiprintf_r+0x94>
 80074d8:	460c      	mov	r4, r1
 80074da:	2001      	movs	r0, #1
 80074dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80074e0:	e7a5      	b.n	800742e <_vfiprintf_r+0x11a>
 80074e2:	2300      	movs	r3, #0
 80074e4:	f04f 0c0a 	mov.w	ip, #10
 80074e8:	4619      	mov	r1, r3
 80074ea:	3401      	adds	r4, #1
 80074ec:	9305      	str	r3, [sp, #20]
 80074ee:	4620      	mov	r0, r4
 80074f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074f4:	3a30      	subs	r2, #48	; 0x30
 80074f6:	2a09      	cmp	r2, #9
 80074f8:	d903      	bls.n	8007502 <_vfiprintf_r+0x1ee>
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0c5      	beq.n	800748a <_vfiprintf_r+0x176>
 80074fe:	9105      	str	r1, [sp, #20]
 8007500:	e7c3      	b.n	800748a <_vfiprintf_r+0x176>
 8007502:	4604      	mov	r4, r0
 8007504:	2301      	movs	r3, #1
 8007506:	fb0c 2101 	mla	r1, ip, r1, r2
 800750a:	e7f0      	b.n	80074ee <_vfiprintf_r+0x1da>
 800750c:	ab03      	add	r3, sp, #12
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	462a      	mov	r2, r5
 8007512:	4630      	mov	r0, r6
 8007514:	4b16      	ldr	r3, [pc, #88]	; (8007570 <_vfiprintf_r+0x25c>)
 8007516:	a904      	add	r1, sp, #16
 8007518:	f7fd fe50 	bl	80051bc <_printf_float>
 800751c:	4607      	mov	r7, r0
 800751e:	1c78      	adds	r0, r7, #1
 8007520:	d1d6      	bne.n	80074d0 <_vfiprintf_r+0x1bc>
 8007522:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007524:	07d9      	lsls	r1, r3, #31
 8007526:	d405      	bmi.n	8007534 <_vfiprintf_r+0x220>
 8007528:	89ab      	ldrh	r3, [r5, #12]
 800752a:	059a      	lsls	r2, r3, #22
 800752c:	d402      	bmi.n	8007534 <_vfiprintf_r+0x220>
 800752e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007530:	f000 faad 	bl	8007a8e <__retarget_lock_release_recursive>
 8007534:	89ab      	ldrh	r3, [r5, #12]
 8007536:	065b      	lsls	r3, r3, #25
 8007538:	f53f af12 	bmi.w	8007360 <_vfiprintf_r+0x4c>
 800753c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800753e:	e711      	b.n	8007364 <_vfiprintf_r+0x50>
 8007540:	ab03      	add	r3, sp, #12
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	462a      	mov	r2, r5
 8007546:	4630      	mov	r0, r6
 8007548:	4b09      	ldr	r3, [pc, #36]	; (8007570 <_vfiprintf_r+0x25c>)
 800754a:	a904      	add	r1, sp, #16
 800754c:	f7fe f8d2 	bl	80056f4 <_printf_i>
 8007550:	e7e4      	b.n	800751c <_vfiprintf_r+0x208>
 8007552:	bf00      	nop
 8007554:	08008160 	.word	0x08008160
 8007558:	08008180 	.word	0x08008180
 800755c:	08008140 	.word	0x08008140
 8007560:	0800812c 	.word	0x0800812c
 8007564:	08008132 	.word	0x08008132
 8007568:	08008136 	.word	0x08008136
 800756c:	080051bd 	.word	0x080051bd
 8007570:	080072ef 	.word	0x080072ef

08007574 <_sbrk_r>:
 8007574:	b538      	push	{r3, r4, r5, lr}
 8007576:	2300      	movs	r3, #0
 8007578:	4d05      	ldr	r5, [pc, #20]	; (8007590 <_sbrk_r+0x1c>)
 800757a:	4604      	mov	r4, r0
 800757c:	4608      	mov	r0, r1
 800757e:	602b      	str	r3, [r5, #0]
 8007580:	f7fa fdba 	bl	80020f8 <_sbrk>
 8007584:	1c43      	adds	r3, r0, #1
 8007586:	d102      	bne.n	800758e <_sbrk_r+0x1a>
 8007588:	682b      	ldr	r3, [r5, #0]
 800758a:	b103      	cbz	r3, 800758e <_sbrk_r+0x1a>
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	bd38      	pop	{r3, r4, r5, pc}
 8007590:	200003d4 	.word	0x200003d4

08007594 <__swbuf_r>:
 8007594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007596:	460e      	mov	r6, r1
 8007598:	4614      	mov	r4, r2
 800759a:	4605      	mov	r5, r0
 800759c:	b118      	cbz	r0, 80075a6 <__swbuf_r+0x12>
 800759e:	6983      	ldr	r3, [r0, #24]
 80075a0:	b90b      	cbnz	r3, 80075a6 <__swbuf_r+0x12>
 80075a2:	f000 f9d5 	bl	8007950 <__sinit>
 80075a6:	4b21      	ldr	r3, [pc, #132]	; (800762c <__swbuf_r+0x98>)
 80075a8:	429c      	cmp	r4, r3
 80075aa:	d12b      	bne.n	8007604 <__swbuf_r+0x70>
 80075ac:	686c      	ldr	r4, [r5, #4]
 80075ae:	69a3      	ldr	r3, [r4, #24]
 80075b0:	60a3      	str	r3, [r4, #8]
 80075b2:	89a3      	ldrh	r3, [r4, #12]
 80075b4:	071a      	lsls	r2, r3, #28
 80075b6:	d52f      	bpl.n	8007618 <__swbuf_r+0x84>
 80075b8:	6923      	ldr	r3, [r4, #16]
 80075ba:	b36b      	cbz	r3, 8007618 <__swbuf_r+0x84>
 80075bc:	6923      	ldr	r3, [r4, #16]
 80075be:	6820      	ldr	r0, [r4, #0]
 80075c0:	b2f6      	uxtb	r6, r6
 80075c2:	1ac0      	subs	r0, r0, r3
 80075c4:	6963      	ldr	r3, [r4, #20]
 80075c6:	4637      	mov	r7, r6
 80075c8:	4283      	cmp	r3, r0
 80075ca:	dc04      	bgt.n	80075d6 <__swbuf_r+0x42>
 80075cc:	4621      	mov	r1, r4
 80075ce:	4628      	mov	r0, r5
 80075d0:	f000 f92a 	bl	8007828 <_fflush_r>
 80075d4:	bb30      	cbnz	r0, 8007624 <__swbuf_r+0x90>
 80075d6:	68a3      	ldr	r3, [r4, #8]
 80075d8:	3001      	adds	r0, #1
 80075da:	3b01      	subs	r3, #1
 80075dc:	60a3      	str	r3, [r4, #8]
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	1c5a      	adds	r2, r3, #1
 80075e2:	6022      	str	r2, [r4, #0]
 80075e4:	701e      	strb	r6, [r3, #0]
 80075e6:	6963      	ldr	r3, [r4, #20]
 80075e8:	4283      	cmp	r3, r0
 80075ea:	d004      	beq.n	80075f6 <__swbuf_r+0x62>
 80075ec:	89a3      	ldrh	r3, [r4, #12]
 80075ee:	07db      	lsls	r3, r3, #31
 80075f0:	d506      	bpl.n	8007600 <__swbuf_r+0x6c>
 80075f2:	2e0a      	cmp	r6, #10
 80075f4:	d104      	bne.n	8007600 <__swbuf_r+0x6c>
 80075f6:	4621      	mov	r1, r4
 80075f8:	4628      	mov	r0, r5
 80075fa:	f000 f915 	bl	8007828 <_fflush_r>
 80075fe:	b988      	cbnz	r0, 8007624 <__swbuf_r+0x90>
 8007600:	4638      	mov	r0, r7
 8007602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007604:	4b0a      	ldr	r3, [pc, #40]	; (8007630 <__swbuf_r+0x9c>)
 8007606:	429c      	cmp	r4, r3
 8007608:	d101      	bne.n	800760e <__swbuf_r+0x7a>
 800760a:	68ac      	ldr	r4, [r5, #8]
 800760c:	e7cf      	b.n	80075ae <__swbuf_r+0x1a>
 800760e:	4b09      	ldr	r3, [pc, #36]	; (8007634 <__swbuf_r+0xa0>)
 8007610:	429c      	cmp	r4, r3
 8007612:	bf08      	it	eq
 8007614:	68ec      	ldreq	r4, [r5, #12]
 8007616:	e7ca      	b.n	80075ae <__swbuf_r+0x1a>
 8007618:	4621      	mov	r1, r4
 800761a:	4628      	mov	r0, r5
 800761c:	f000 f80c 	bl	8007638 <__swsetup_r>
 8007620:	2800      	cmp	r0, #0
 8007622:	d0cb      	beq.n	80075bc <__swbuf_r+0x28>
 8007624:	f04f 37ff 	mov.w	r7, #4294967295
 8007628:	e7ea      	b.n	8007600 <__swbuf_r+0x6c>
 800762a:	bf00      	nop
 800762c:	08008160 	.word	0x08008160
 8007630:	08008180 	.word	0x08008180
 8007634:	08008140 	.word	0x08008140

08007638 <__swsetup_r>:
 8007638:	4b32      	ldr	r3, [pc, #200]	; (8007704 <__swsetup_r+0xcc>)
 800763a:	b570      	push	{r4, r5, r6, lr}
 800763c:	681d      	ldr	r5, [r3, #0]
 800763e:	4606      	mov	r6, r0
 8007640:	460c      	mov	r4, r1
 8007642:	b125      	cbz	r5, 800764e <__swsetup_r+0x16>
 8007644:	69ab      	ldr	r3, [r5, #24]
 8007646:	b913      	cbnz	r3, 800764e <__swsetup_r+0x16>
 8007648:	4628      	mov	r0, r5
 800764a:	f000 f981 	bl	8007950 <__sinit>
 800764e:	4b2e      	ldr	r3, [pc, #184]	; (8007708 <__swsetup_r+0xd0>)
 8007650:	429c      	cmp	r4, r3
 8007652:	d10f      	bne.n	8007674 <__swsetup_r+0x3c>
 8007654:	686c      	ldr	r4, [r5, #4]
 8007656:	89a3      	ldrh	r3, [r4, #12]
 8007658:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800765c:	0719      	lsls	r1, r3, #28
 800765e:	d42c      	bmi.n	80076ba <__swsetup_r+0x82>
 8007660:	06dd      	lsls	r5, r3, #27
 8007662:	d411      	bmi.n	8007688 <__swsetup_r+0x50>
 8007664:	2309      	movs	r3, #9
 8007666:	6033      	str	r3, [r6, #0]
 8007668:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800766c:	f04f 30ff 	mov.w	r0, #4294967295
 8007670:	81a3      	strh	r3, [r4, #12]
 8007672:	e03e      	b.n	80076f2 <__swsetup_r+0xba>
 8007674:	4b25      	ldr	r3, [pc, #148]	; (800770c <__swsetup_r+0xd4>)
 8007676:	429c      	cmp	r4, r3
 8007678:	d101      	bne.n	800767e <__swsetup_r+0x46>
 800767a:	68ac      	ldr	r4, [r5, #8]
 800767c:	e7eb      	b.n	8007656 <__swsetup_r+0x1e>
 800767e:	4b24      	ldr	r3, [pc, #144]	; (8007710 <__swsetup_r+0xd8>)
 8007680:	429c      	cmp	r4, r3
 8007682:	bf08      	it	eq
 8007684:	68ec      	ldreq	r4, [r5, #12]
 8007686:	e7e6      	b.n	8007656 <__swsetup_r+0x1e>
 8007688:	0758      	lsls	r0, r3, #29
 800768a:	d512      	bpl.n	80076b2 <__swsetup_r+0x7a>
 800768c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800768e:	b141      	cbz	r1, 80076a2 <__swsetup_r+0x6a>
 8007690:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007694:	4299      	cmp	r1, r3
 8007696:	d002      	beq.n	800769e <__swsetup_r+0x66>
 8007698:	4630      	mov	r0, r6
 800769a:	f7ff fbdb 	bl	8006e54 <_free_r>
 800769e:	2300      	movs	r3, #0
 80076a0:	6363      	str	r3, [r4, #52]	; 0x34
 80076a2:	89a3      	ldrh	r3, [r4, #12]
 80076a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80076a8:	81a3      	strh	r3, [r4, #12]
 80076aa:	2300      	movs	r3, #0
 80076ac:	6063      	str	r3, [r4, #4]
 80076ae:	6923      	ldr	r3, [r4, #16]
 80076b0:	6023      	str	r3, [r4, #0]
 80076b2:	89a3      	ldrh	r3, [r4, #12]
 80076b4:	f043 0308 	orr.w	r3, r3, #8
 80076b8:	81a3      	strh	r3, [r4, #12]
 80076ba:	6923      	ldr	r3, [r4, #16]
 80076bc:	b94b      	cbnz	r3, 80076d2 <__swsetup_r+0x9a>
 80076be:	89a3      	ldrh	r3, [r4, #12]
 80076c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80076c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076c8:	d003      	beq.n	80076d2 <__swsetup_r+0x9a>
 80076ca:	4621      	mov	r1, r4
 80076cc:	4630      	mov	r0, r6
 80076ce:	f000 fa05 	bl	8007adc <__smakebuf_r>
 80076d2:	89a0      	ldrh	r0, [r4, #12]
 80076d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076d8:	f010 0301 	ands.w	r3, r0, #1
 80076dc:	d00a      	beq.n	80076f4 <__swsetup_r+0xbc>
 80076de:	2300      	movs	r3, #0
 80076e0:	60a3      	str	r3, [r4, #8]
 80076e2:	6963      	ldr	r3, [r4, #20]
 80076e4:	425b      	negs	r3, r3
 80076e6:	61a3      	str	r3, [r4, #24]
 80076e8:	6923      	ldr	r3, [r4, #16]
 80076ea:	b943      	cbnz	r3, 80076fe <__swsetup_r+0xc6>
 80076ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076f0:	d1ba      	bne.n	8007668 <__swsetup_r+0x30>
 80076f2:	bd70      	pop	{r4, r5, r6, pc}
 80076f4:	0781      	lsls	r1, r0, #30
 80076f6:	bf58      	it	pl
 80076f8:	6963      	ldrpl	r3, [r4, #20]
 80076fa:	60a3      	str	r3, [r4, #8]
 80076fc:	e7f4      	b.n	80076e8 <__swsetup_r+0xb0>
 80076fe:	2000      	movs	r0, #0
 8007700:	e7f7      	b.n	80076f2 <__swsetup_r+0xba>
 8007702:	bf00      	nop
 8007704:	2000001c 	.word	0x2000001c
 8007708:	08008160 	.word	0x08008160
 800770c:	08008180 	.word	0x08008180
 8007710:	08008140 	.word	0x08008140

08007714 <abort>:
 8007714:	2006      	movs	r0, #6
 8007716:	b508      	push	{r3, lr}
 8007718:	f000 fab0 	bl	8007c7c <raise>
 800771c:	2001      	movs	r0, #1
 800771e:	f7fa fc78 	bl	8002012 <_exit>
	...

08007724 <__sflush_r>:
 8007724:	898a      	ldrh	r2, [r1, #12]
 8007726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007728:	4605      	mov	r5, r0
 800772a:	0710      	lsls	r0, r2, #28
 800772c:	460c      	mov	r4, r1
 800772e:	d457      	bmi.n	80077e0 <__sflush_r+0xbc>
 8007730:	684b      	ldr	r3, [r1, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	dc04      	bgt.n	8007740 <__sflush_r+0x1c>
 8007736:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007738:	2b00      	cmp	r3, #0
 800773a:	dc01      	bgt.n	8007740 <__sflush_r+0x1c>
 800773c:	2000      	movs	r0, #0
 800773e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007740:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007742:	2e00      	cmp	r6, #0
 8007744:	d0fa      	beq.n	800773c <__sflush_r+0x18>
 8007746:	2300      	movs	r3, #0
 8007748:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800774c:	682f      	ldr	r7, [r5, #0]
 800774e:	602b      	str	r3, [r5, #0]
 8007750:	d032      	beq.n	80077b8 <__sflush_r+0x94>
 8007752:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007754:	89a3      	ldrh	r3, [r4, #12]
 8007756:	075a      	lsls	r2, r3, #29
 8007758:	d505      	bpl.n	8007766 <__sflush_r+0x42>
 800775a:	6863      	ldr	r3, [r4, #4]
 800775c:	1ac0      	subs	r0, r0, r3
 800775e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007760:	b10b      	cbz	r3, 8007766 <__sflush_r+0x42>
 8007762:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007764:	1ac0      	subs	r0, r0, r3
 8007766:	2300      	movs	r3, #0
 8007768:	4602      	mov	r2, r0
 800776a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800776c:	4628      	mov	r0, r5
 800776e:	6a21      	ldr	r1, [r4, #32]
 8007770:	47b0      	blx	r6
 8007772:	1c43      	adds	r3, r0, #1
 8007774:	89a3      	ldrh	r3, [r4, #12]
 8007776:	d106      	bne.n	8007786 <__sflush_r+0x62>
 8007778:	6829      	ldr	r1, [r5, #0]
 800777a:	291d      	cmp	r1, #29
 800777c:	d82c      	bhi.n	80077d8 <__sflush_r+0xb4>
 800777e:	4a29      	ldr	r2, [pc, #164]	; (8007824 <__sflush_r+0x100>)
 8007780:	40ca      	lsrs	r2, r1
 8007782:	07d6      	lsls	r6, r2, #31
 8007784:	d528      	bpl.n	80077d8 <__sflush_r+0xb4>
 8007786:	2200      	movs	r2, #0
 8007788:	6062      	str	r2, [r4, #4]
 800778a:	6922      	ldr	r2, [r4, #16]
 800778c:	04d9      	lsls	r1, r3, #19
 800778e:	6022      	str	r2, [r4, #0]
 8007790:	d504      	bpl.n	800779c <__sflush_r+0x78>
 8007792:	1c42      	adds	r2, r0, #1
 8007794:	d101      	bne.n	800779a <__sflush_r+0x76>
 8007796:	682b      	ldr	r3, [r5, #0]
 8007798:	b903      	cbnz	r3, 800779c <__sflush_r+0x78>
 800779a:	6560      	str	r0, [r4, #84]	; 0x54
 800779c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800779e:	602f      	str	r7, [r5, #0]
 80077a0:	2900      	cmp	r1, #0
 80077a2:	d0cb      	beq.n	800773c <__sflush_r+0x18>
 80077a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077a8:	4299      	cmp	r1, r3
 80077aa:	d002      	beq.n	80077b2 <__sflush_r+0x8e>
 80077ac:	4628      	mov	r0, r5
 80077ae:	f7ff fb51 	bl	8006e54 <_free_r>
 80077b2:	2000      	movs	r0, #0
 80077b4:	6360      	str	r0, [r4, #52]	; 0x34
 80077b6:	e7c2      	b.n	800773e <__sflush_r+0x1a>
 80077b8:	6a21      	ldr	r1, [r4, #32]
 80077ba:	2301      	movs	r3, #1
 80077bc:	4628      	mov	r0, r5
 80077be:	47b0      	blx	r6
 80077c0:	1c41      	adds	r1, r0, #1
 80077c2:	d1c7      	bne.n	8007754 <__sflush_r+0x30>
 80077c4:	682b      	ldr	r3, [r5, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d0c4      	beq.n	8007754 <__sflush_r+0x30>
 80077ca:	2b1d      	cmp	r3, #29
 80077cc:	d001      	beq.n	80077d2 <__sflush_r+0xae>
 80077ce:	2b16      	cmp	r3, #22
 80077d0:	d101      	bne.n	80077d6 <__sflush_r+0xb2>
 80077d2:	602f      	str	r7, [r5, #0]
 80077d4:	e7b2      	b.n	800773c <__sflush_r+0x18>
 80077d6:	89a3      	ldrh	r3, [r4, #12]
 80077d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077dc:	81a3      	strh	r3, [r4, #12]
 80077de:	e7ae      	b.n	800773e <__sflush_r+0x1a>
 80077e0:	690f      	ldr	r7, [r1, #16]
 80077e2:	2f00      	cmp	r7, #0
 80077e4:	d0aa      	beq.n	800773c <__sflush_r+0x18>
 80077e6:	0793      	lsls	r3, r2, #30
 80077e8:	bf18      	it	ne
 80077ea:	2300      	movne	r3, #0
 80077ec:	680e      	ldr	r6, [r1, #0]
 80077ee:	bf08      	it	eq
 80077f0:	694b      	ldreq	r3, [r1, #20]
 80077f2:	1bf6      	subs	r6, r6, r7
 80077f4:	600f      	str	r7, [r1, #0]
 80077f6:	608b      	str	r3, [r1, #8]
 80077f8:	2e00      	cmp	r6, #0
 80077fa:	dd9f      	ble.n	800773c <__sflush_r+0x18>
 80077fc:	4633      	mov	r3, r6
 80077fe:	463a      	mov	r2, r7
 8007800:	4628      	mov	r0, r5
 8007802:	6a21      	ldr	r1, [r4, #32]
 8007804:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007808:	47e0      	blx	ip
 800780a:	2800      	cmp	r0, #0
 800780c:	dc06      	bgt.n	800781c <__sflush_r+0xf8>
 800780e:	89a3      	ldrh	r3, [r4, #12]
 8007810:	f04f 30ff 	mov.w	r0, #4294967295
 8007814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007818:	81a3      	strh	r3, [r4, #12]
 800781a:	e790      	b.n	800773e <__sflush_r+0x1a>
 800781c:	4407      	add	r7, r0
 800781e:	1a36      	subs	r6, r6, r0
 8007820:	e7ea      	b.n	80077f8 <__sflush_r+0xd4>
 8007822:	bf00      	nop
 8007824:	20400001 	.word	0x20400001

08007828 <_fflush_r>:
 8007828:	b538      	push	{r3, r4, r5, lr}
 800782a:	690b      	ldr	r3, [r1, #16]
 800782c:	4605      	mov	r5, r0
 800782e:	460c      	mov	r4, r1
 8007830:	b913      	cbnz	r3, 8007838 <_fflush_r+0x10>
 8007832:	2500      	movs	r5, #0
 8007834:	4628      	mov	r0, r5
 8007836:	bd38      	pop	{r3, r4, r5, pc}
 8007838:	b118      	cbz	r0, 8007842 <_fflush_r+0x1a>
 800783a:	6983      	ldr	r3, [r0, #24]
 800783c:	b90b      	cbnz	r3, 8007842 <_fflush_r+0x1a>
 800783e:	f000 f887 	bl	8007950 <__sinit>
 8007842:	4b14      	ldr	r3, [pc, #80]	; (8007894 <_fflush_r+0x6c>)
 8007844:	429c      	cmp	r4, r3
 8007846:	d11b      	bne.n	8007880 <_fflush_r+0x58>
 8007848:	686c      	ldr	r4, [r5, #4]
 800784a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d0ef      	beq.n	8007832 <_fflush_r+0xa>
 8007852:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007854:	07d0      	lsls	r0, r2, #31
 8007856:	d404      	bmi.n	8007862 <_fflush_r+0x3a>
 8007858:	0599      	lsls	r1, r3, #22
 800785a:	d402      	bmi.n	8007862 <_fflush_r+0x3a>
 800785c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800785e:	f000 f915 	bl	8007a8c <__retarget_lock_acquire_recursive>
 8007862:	4628      	mov	r0, r5
 8007864:	4621      	mov	r1, r4
 8007866:	f7ff ff5d 	bl	8007724 <__sflush_r>
 800786a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800786c:	4605      	mov	r5, r0
 800786e:	07da      	lsls	r2, r3, #31
 8007870:	d4e0      	bmi.n	8007834 <_fflush_r+0xc>
 8007872:	89a3      	ldrh	r3, [r4, #12]
 8007874:	059b      	lsls	r3, r3, #22
 8007876:	d4dd      	bmi.n	8007834 <_fflush_r+0xc>
 8007878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800787a:	f000 f908 	bl	8007a8e <__retarget_lock_release_recursive>
 800787e:	e7d9      	b.n	8007834 <_fflush_r+0xc>
 8007880:	4b05      	ldr	r3, [pc, #20]	; (8007898 <_fflush_r+0x70>)
 8007882:	429c      	cmp	r4, r3
 8007884:	d101      	bne.n	800788a <_fflush_r+0x62>
 8007886:	68ac      	ldr	r4, [r5, #8]
 8007888:	e7df      	b.n	800784a <_fflush_r+0x22>
 800788a:	4b04      	ldr	r3, [pc, #16]	; (800789c <_fflush_r+0x74>)
 800788c:	429c      	cmp	r4, r3
 800788e:	bf08      	it	eq
 8007890:	68ec      	ldreq	r4, [r5, #12]
 8007892:	e7da      	b.n	800784a <_fflush_r+0x22>
 8007894:	08008160 	.word	0x08008160
 8007898:	08008180 	.word	0x08008180
 800789c:	08008140 	.word	0x08008140

080078a0 <std>:
 80078a0:	2300      	movs	r3, #0
 80078a2:	b510      	push	{r4, lr}
 80078a4:	4604      	mov	r4, r0
 80078a6:	e9c0 3300 	strd	r3, r3, [r0]
 80078aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078ae:	6083      	str	r3, [r0, #8]
 80078b0:	8181      	strh	r1, [r0, #12]
 80078b2:	6643      	str	r3, [r0, #100]	; 0x64
 80078b4:	81c2      	strh	r2, [r0, #14]
 80078b6:	6183      	str	r3, [r0, #24]
 80078b8:	4619      	mov	r1, r3
 80078ba:	2208      	movs	r2, #8
 80078bc:	305c      	adds	r0, #92	; 0x5c
 80078be:	f7fd fbd7 	bl	8005070 <memset>
 80078c2:	4b05      	ldr	r3, [pc, #20]	; (80078d8 <std+0x38>)
 80078c4:	6224      	str	r4, [r4, #32]
 80078c6:	6263      	str	r3, [r4, #36]	; 0x24
 80078c8:	4b04      	ldr	r3, [pc, #16]	; (80078dc <std+0x3c>)
 80078ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80078cc:	4b04      	ldr	r3, [pc, #16]	; (80078e0 <std+0x40>)
 80078ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078d0:	4b04      	ldr	r3, [pc, #16]	; (80078e4 <std+0x44>)
 80078d2:	6323      	str	r3, [r4, #48]	; 0x30
 80078d4:	bd10      	pop	{r4, pc}
 80078d6:	bf00      	nop
 80078d8:	08007cb5 	.word	0x08007cb5
 80078dc:	08007cd7 	.word	0x08007cd7
 80078e0:	08007d0f 	.word	0x08007d0f
 80078e4:	08007d33 	.word	0x08007d33

080078e8 <_cleanup_r>:
 80078e8:	4901      	ldr	r1, [pc, #4]	; (80078f0 <_cleanup_r+0x8>)
 80078ea:	f000 b8af 	b.w	8007a4c <_fwalk_reent>
 80078ee:	bf00      	nop
 80078f0:	08007829 	.word	0x08007829

080078f4 <__sfmoreglue>:
 80078f4:	2268      	movs	r2, #104	; 0x68
 80078f6:	b570      	push	{r4, r5, r6, lr}
 80078f8:	1e4d      	subs	r5, r1, #1
 80078fa:	4355      	muls	r5, r2
 80078fc:	460e      	mov	r6, r1
 80078fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007902:	f7ff fb0f 	bl	8006f24 <_malloc_r>
 8007906:	4604      	mov	r4, r0
 8007908:	b140      	cbz	r0, 800791c <__sfmoreglue+0x28>
 800790a:	2100      	movs	r1, #0
 800790c:	e9c0 1600 	strd	r1, r6, [r0]
 8007910:	300c      	adds	r0, #12
 8007912:	60a0      	str	r0, [r4, #8]
 8007914:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007918:	f7fd fbaa 	bl	8005070 <memset>
 800791c:	4620      	mov	r0, r4
 800791e:	bd70      	pop	{r4, r5, r6, pc}

08007920 <__sfp_lock_acquire>:
 8007920:	4801      	ldr	r0, [pc, #4]	; (8007928 <__sfp_lock_acquire+0x8>)
 8007922:	f000 b8b3 	b.w	8007a8c <__retarget_lock_acquire_recursive>
 8007926:	bf00      	nop
 8007928:	200003d9 	.word	0x200003d9

0800792c <__sfp_lock_release>:
 800792c:	4801      	ldr	r0, [pc, #4]	; (8007934 <__sfp_lock_release+0x8>)
 800792e:	f000 b8ae 	b.w	8007a8e <__retarget_lock_release_recursive>
 8007932:	bf00      	nop
 8007934:	200003d9 	.word	0x200003d9

08007938 <__sinit_lock_acquire>:
 8007938:	4801      	ldr	r0, [pc, #4]	; (8007940 <__sinit_lock_acquire+0x8>)
 800793a:	f000 b8a7 	b.w	8007a8c <__retarget_lock_acquire_recursive>
 800793e:	bf00      	nop
 8007940:	200003da 	.word	0x200003da

08007944 <__sinit_lock_release>:
 8007944:	4801      	ldr	r0, [pc, #4]	; (800794c <__sinit_lock_release+0x8>)
 8007946:	f000 b8a2 	b.w	8007a8e <__retarget_lock_release_recursive>
 800794a:	bf00      	nop
 800794c:	200003da 	.word	0x200003da

08007950 <__sinit>:
 8007950:	b510      	push	{r4, lr}
 8007952:	4604      	mov	r4, r0
 8007954:	f7ff fff0 	bl	8007938 <__sinit_lock_acquire>
 8007958:	69a3      	ldr	r3, [r4, #24]
 800795a:	b11b      	cbz	r3, 8007964 <__sinit+0x14>
 800795c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007960:	f7ff bff0 	b.w	8007944 <__sinit_lock_release>
 8007964:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007968:	6523      	str	r3, [r4, #80]	; 0x50
 800796a:	4b13      	ldr	r3, [pc, #76]	; (80079b8 <__sinit+0x68>)
 800796c:	4a13      	ldr	r2, [pc, #76]	; (80079bc <__sinit+0x6c>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	62a2      	str	r2, [r4, #40]	; 0x28
 8007972:	42a3      	cmp	r3, r4
 8007974:	bf08      	it	eq
 8007976:	2301      	moveq	r3, #1
 8007978:	4620      	mov	r0, r4
 800797a:	bf08      	it	eq
 800797c:	61a3      	streq	r3, [r4, #24]
 800797e:	f000 f81f 	bl	80079c0 <__sfp>
 8007982:	6060      	str	r0, [r4, #4]
 8007984:	4620      	mov	r0, r4
 8007986:	f000 f81b 	bl	80079c0 <__sfp>
 800798a:	60a0      	str	r0, [r4, #8]
 800798c:	4620      	mov	r0, r4
 800798e:	f000 f817 	bl	80079c0 <__sfp>
 8007992:	2200      	movs	r2, #0
 8007994:	2104      	movs	r1, #4
 8007996:	60e0      	str	r0, [r4, #12]
 8007998:	6860      	ldr	r0, [r4, #4]
 800799a:	f7ff ff81 	bl	80078a0 <std>
 800799e:	2201      	movs	r2, #1
 80079a0:	2109      	movs	r1, #9
 80079a2:	68a0      	ldr	r0, [r4, #8]
 80079a4:	f7ff ff7c 	bl	80078a0 <std>
 80079a8:	2202      	movs	r2, #2
 80079aa:	2112      	movs	r1, #18
 80079ac:	68e0      	ldr	r0, [r4, #12]
 80079ae:	f7ff ff77 	bl	80078a0 <std>
 80079b2:	2301      	movs	r3, #1
 80079b4:	61a3      	str	r3, [r4, #24]
 80079b6:	e7d1      	b.n	800795c <__sinit+0xc>
 80079b8:	08007ecc 	.word	0x08007ecc
 80079bc:	080078e9 	.word	0x080078e9

080079c0 <__sfp>:
 80079c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c2:	4607      	mov	r7, r0
 80079c4:	f7ff ffac 	bl	8007920 <__sfp_lock_acquire>
 80079c8:	4b1e      	ldr	r3, [pc, #120]	; (8007a44 <__sfp+0x84>)
 80079ca:	681e      	ldr	r6, [r3, #0]
 80079cc:	69b3      	ldr	r3, [r6, #24]
 80079ce:	b913      	cbnz	r3, 80079d6 <__sfp+0x16>
 80079d0:	4630      	mov	r0, r6
 80079d2:	f7ff ffbd 	bl	8007950 <__sinit>
 80079d6:	3648      	adds	r6, #72	; 0x48
 80079d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80079dc:	3b01      	subs	r3, #1
 80079de:	d503      	bpl.n	80079e8 <__sfp+0x28>
 80079e0:	6833      	ldr	r3, [r6, #0]
 80079e2:	b30b      	cbz	r3, 8007a28 <__sfp+0x68>
 80079e4:	6836      	ldr	r6, [r6, #0]
 80079e6:	e7f7      	b.n	80079d8 <__sfp+0x18>
 80079e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80079ec:	b9d5      	cbnz	r5, 8007a24 <__sfp+0x64>
 80079ee:	4b16      	ldr	r3, [pc, #88]	; (8007a48 <__sfp+0x88>)
 80079f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80079f4:	60e3      	str	r3, [r4, #12]
 80079f6:	6665      	str	r5, [r4, #100]	; 0x64
 80079f8:	f000 f847 	bl	8007a8a <__retarget_lock_init_recursive>
 80079fc:	f7ff ff96 	bl	800792c <__sfp_lock_release>
 8007a00:	2208      	movs	r2, #8
 8007a02:	4629      	mov	r1, r5
 8007a04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a0c:	6025      	str	r5, [r4, #0]
 8007a0e:	61a5      	str	r5, [r4, #24]
 8007a10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a14:	f7fd fb2c 	bl	8005070 <memset>
 8007a18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a20:	4620      	mov	r0, r4
 8007a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a24:	3468      	adds	r4, #104	; 0x68
 8007a26:	e7d9      	b.n	80079dc <__sfp+0x1c>
 8007a28:	2104      	movs	r1, #4
 8007a2a:	4638      	mov	r0, r7
 8007a2c:	f7ff ff62 	bl	80078f4 <__sfmoreglue>
 8007a30:	4604      	mov	r4, r0
 8007a32:	6030      	str	r0, [r6, #0]
 8007a34:	2800      	cmp	r0, #0
 8007a36:	d1d5      	bne.n	80079e4 <__sfp+0x24>
 8007a38:	f7ff ff78 	bl	800792c <__sfp_lock_release>
 8007a3c:	230c      	movs	r3, #12
 8007a3e:	603b      	str	r3, [r7, #0]
 8007a40:	e7ee      	b.n	8007a20 <__sfp+0x60>
 8007a42:	bf00      	nop
 8007a44:	08007ecc 	.word	0x08007ecc
 8007a48:	ffff0001 	.word	0xffff0001

08007a4c <_fwalk_reent>:
 8007a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a50:	4606      	mov	r6, r0
 8007a52:	4688      	mov	r8, r1
 8007a54:	2700      	movs	r7, #0
 8007a56:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a5e:	f1b9 0901 	subs.w	r9, r9, #1
 8007a62:	d505      	bpl.n	8007a70 <_fwalk_reent+0x24>
 8007a64:	6824      	ldr	r4, [r4, #0]
 8007a66:	2c00      	cmp	r4, #0
 8007a68:	d1f7      	bne.n	8007a5a <_fwalk_reent+0xe>
 8007a6a:	4638      	mov	r0, r7
 8007a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a70:	89ab      	ldrh	r3, [r5, #12]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d907      	bls.n	8007a86 <_fwalk_reent+0x3a>
 8007a76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	d003      	beq.n	8007a86 <_fwalk_reent+0x3a>
 8007a7e:	4629      	mov	r1, r5
 8007a80:	4630      	mov	r0, r6
 8007a82:	47c0      	blx	r8
 8007a84:	4307      	orrs	r7, r0
 8007a86:	3568      	adds	r5, #104	; 0x68
 8007a88:	e7e9      	b.n	8007a5e <_fwalk_reent+0x12>

08007a8a <__retarget_lock_init_recursive>:
 8007a8a:	4770      	bx	lr

08007a8c <__retarget_lock_acquire_recursive>:
 8007a8c:	4770      	bx	lr

08007a8e <__retarget_lock_release_recursive>:
 8007a8e:	4770      	bx	lr

08007a90 <__swhatbuf_r>:
 8007a90:	b570      	push	{r4, r5, r6, lr}
 8007a92:	460e      	mov	r6, r1
 8007a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a98:	4614      	mov	r4, r2
 8007a9a:	2900      	cmp	r1, #0
 8007a9c:	461d      	mov	r5, r3
 8007a9e:	b096      	sub	sp, #88	; 0x58
 8007aa0:	da08      	bge.n	8007ab4 <__swhatbuf_r+0x24>
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007aa8:	602a      	str	r2, [r5, #0]
 8007aaa:	061a      	lsls	r2, r3, #24
 8007aac:	d410      	bmi.n	8007ad0 <__swhatbuf_r+0x40>
 8007aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ab2:	e00e      	b.n	8007ad2 <__swhatbuf_r+0x42>
 8007ab4:	466a      	mov	r2, sp
 8007ab6:	f000 f96f 	bl	8007d98 <_fstat_r>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	dbf1      	blt.n	8007aa2 <__swhatbuf_r+0x12>
 8007abe:	9a01      	ldr	r2, [sp, #4]
 8007ac0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ac4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ac8:	425a      	negs	r2, r3
 8007aca:	415a      	adcs	r2, r3
 8007acc:	602a      	str	r2, [r5, #0]
 8007ace:	e7ee      	b.n	8007aae <__swhatbuf_r+0x1e>
 8007ad0:	2340      	movs	r3, #64	; 0x40
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	b016      	add	sp, #88	; 0x58
 8007ad8:	bd70      	pop	{r4, r5, r6, pc}
	...

08007adc <__smakebuf_r>:
 8007adc:	898b      	ldrh	r3, [r1, #12]
 8007ade:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ae0:	079d      	lsls	r5, r3, #30
 8007ae2:	4606      	mov	r6, r0
 8007ae4:	460c      	mov	r4, r1
 8007ae6:	d507      	bpl.n	8007af8 <__smakebuf_r+0x1c>
 8007ae8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007aec:	6023      	str	r3, [r4, #0]
 8007aee:	6123      	str	r3, [r4, #16]
 8007af0:	2301      	movs	r3, #1
 8007af2:	6163      	str	r3, [r4, #20]
 8007af4:	b002      	add	sp, #8
 8007af6:	bd70      	pop	{r4, r5, r6, pc}
 8007af8:	466a      	mov	r2, sp
 8007afa:	ab01      	add	r3, sp, #4
 8007afc:	f7ff ffc8 	bl	8007a90 <__swhatbuf_r>
 8007b00:	9900      	ldr	r1, [sp, #0]
 8007b02:	4605      	mov	r5, r0
 8007b04:	4630      	mov	r0, r6
 8007b06:	f7ff fa0d 	bl	8006f24 <_malloc_r>
 8007b0a:	b948      	cbnz	r0, 8007b20 <__smakebuf_r+0x44>
 8007b0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b10:	059a      	lsls	r2, r3, #22
 8007b12:	d4ef      	bmi.n	8007af4 <__smakebuf_r+0x18>
 8007b14:	f023 0303 	bic.w	r3, r3, #3
 8007b18:	f043 0302 	orr.w	r3, r3, #2
 8007b1c:	81a3      	strh	r3, [r4, #12]
 8007b1e:	e7e3      	b.n	8007ae8 <__smakebuf_r+0xc>
 8007b20:	4b0d      	ldr	r3, [pc, #52]	; (8007b58 <__smakebuf_r+0x7c>)
 8007b22:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b24:	89a3      	ldrh	r3, [r4, #12]
 8007b26:	6020      	str	r0, [r4, #0]
 8007b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b2c:	81a3      	strh	r3, [r4, #12]
 8007b2e:	9b00      	ldr	r3, [sp, #0]
 8007b30:	6120      	str	r0, [r4, #16]
 8007b32:	6163      	str	r3, [r4, #20]
 8007b34:	9b01      	ldr	r3, [sp, #4]
 8007b36:	b15b      	cbz	r3, 8007b50 <__smakebuf_r+0x74>
 8007b38:	4630      	mov	r0, r6
 8007b3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b3e:	f000 f93d 	bl	8007dbc <_isatty_r>
 8007b42:	b128      	cbz	r0, 8007b50 <__smakebuf_r+0x74>
 8007b44:	89a3      	ldrh	r3, [r4, #12]
 8007b46:	f023 0303 	bic.w	r3, r3, #3
 8007b4a:	f043 0301 	orr.w	r3, r3, #1
 8007b4e:	81a3      	strh	r3, [r4, #12]
 8007b50:	89a0      	ldrh	r0, [r4, #12]
 8007b52:	4305      	orrs	r5, r0
 8007b54:	81a5      	strh	r5, [r4, #12]
 8007b56:	e7cd      	b.n	8007af4 <__smakebuf_r+0x18>
 8007b58:	080078e9 	.word	0x080078e9

08007b5c <__ascii_mbtowc>:
 8007b5c:	b082      	sub	sp, #8
 8007b5e:	b901      	cbnz	r1, 8007b62 <__ascii_mbtowc+0x6>
 8007b60:	a901      	add	r1, sp, #4
 8007b62:	b142      	cbz	r2, 8007b76 <__ascii_mbtowc+0x1a>
 8007b64:	b14b      	cbz	r3, 8007b7a <__ascii_mbtowc+0x1e>
 8007b66:	7813      	ldrb	r3, [r2, #0]
 8007b68:	600b      	str	r3, [r1, #0]
 8007b6a:	7812      	ldrb	r2, [r2, #0]
 8007b6c:	1e10      	subs	r0, r2, #0
 8007b6e:	bf18      	it	ne
 8007b70:	2001      	movne	r0, #1
 8007b72:	b002      	add	sp, #8
 8007b74:	4770      	bx	lr
 8007b76:	4610      	mov	r0, r2
 8007b78:	e7fb      	b.n	8007b72 <__ascii_mbtowc+0x16>
 8007b7a:	f06f 0001 	mvn.w	r0, #1
 8007b7e:	e7f8      	b.n	8007b72 <__ascii_mbtowc+0x16>

08007b80 <memmove>:
 8007b80:	4288      	cmp	r0, r1
 8007b82:	b510      	push	{r4, lr}
 8007b84:	eb01 0402 	add.w	r4, r1, r2
 8007b88:	d902      	bls.n	8007b90 <memmove+0x10>
 8007b8a:	4284      	cmp	r4, r0
 8007b8c:	4623      	mov	r3, r4
 8007b8e:	d807      	bhi.n	8007ba0 <memmove+0x20>
 8007b90:	1e43      	subs	r3, r0, #1
 8007b92:	42a1      	cmp	r1, r4
 8007b94:	d008      	beq.n	8007ba8 <memmove+0x28>
 8007b96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b9e:	e7f8      	b.n	8007b92 <memmove+0x12>
 8007ba0:	4601      	mov	r1, r0
 8007ba2:	4402      	add	r2, r0
 8007ba4:	428a      	cmp	r2, r1
 8007ba6:	d100      	bne.n	8007baa <memmove+0x2a>
 8007ba8:	bd10      	pop	{r4, pc}
 8007baa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bb2:	e7f7      	b.n	8007ba4 <memmove+0x24>

08007bb4 <__malloc_lock>:
 8007bb4:	4801      	ldr	r0, [pc, #4]	; (8007bbc <__malloc_lock+0x8>)
 8007bb6:	f7ff bf69 	b.w	8007a8c <__retarget_lock_acquire_recursive>
 8007bba:	bf00      	nop
 8007bbc:	200003d8 	.word	0x200003d8

08007bc0 <__malloc_unlock>:
 8007bc0:	4801      	ldr	r0, [pc, #4]	; (8007bc8 <__malloc_unlock+0x8>)
 8007bc2:	f7ff bf64 	b.w	8007a8e <__retarget_lock_release_recursive>
 8007bc6:	bf00      	nop
 8007bc8:	200003d8 	.word	0x200003d8

08007bcc <_realloc_r>:
 8007bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd0:	4680      	mov	r8, r0
 8007bd2:	4614      	mov	r4, r2
 8007bd4:	460e      	mov	r6, r1
 8007bd6:	b921      	cbnz	r1, 8007be2 <_realloc_r+0x16>
 8007bd8:	4611      	mov	r1, r2
 8007bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bde:	f7ff b9a1 	b.w	8006f24 <_malloc_r>
 8007be2:	b92a      	cbnz	r2, 8007bf0 <_realloc_r+0x24>
 8007be4:	f7ff f936 	bl	8006e54 <_free_r>
 8007be8:	4625      	mov	r5, r4
 8007bea:	4628      	mov	r0, r5
 8007bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bf0:	f000 f906 	bl	8007e00 <_malloc_usable_size_r>
 8007bf4:	4284      	cmp	r4, r0
 8007bf6:	4607      	mov	r7, r0
 8007bf8:	d802      	bhi.n	8007c00 <_realloc_r+0x34>
 8007bfa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007bfe:	d812      	bhi.n	8007c26 <_realloc_r+0x5a>
 8007c00:	4621      	mov	r1, r4
 8007c02:	4640      	mov	r0, r8
 8007c04:	f7ff f98e 	bl	8006f24 <_malloc_r>
 8007c08:	4605      	mov	r5, r0
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	d0ed      	beq.n	8007bea <_realloc_r+0x1e>
 8007c0e:	42bc      	cmp	r4, r7
 8007c10:	4622      	mov	r2, r4
 8007c12:	4631      	mov	r1, r6
 8007c14:	bf28      	it	cs
 8007c16:	463a      	movcs	r2, r7
 8007c18:	f7fe fd78 	bl	800670c <memcpy>
 8007c1c:	4631      	mov	r1, r6
 8007c1e:	4640      	mov	r0, r8
 8007c20:	f7ff f918 	bl	8006e54 <_free_r>
 8007c24:	e7e1      	b.n	8007bea <_realloc_r+0x1e>
 8007c26:	4635      	mov	r5, r6
 8007c28:	e7df      	b.n	8007bea <_realloc_r+0x1e>

08007c2a <_raise_r>:
 8007c2a:	291f      	cmp	r1, #31
 8007c2c:	b538      	push	{r3, r4, r5, lr}
 8007c2e:	4604      	mov	r4, r0
 8007c30:	460d      	mov	r5, r1
 8007c32:	d904      	bls.n	8007c3e <_raise_r+0x14>
 8007c34:	2316      	movs	r3, #22
 8007c36:	6003      	str	r3, [r0, #0]
 8007c38:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3c:	bd38      	pop	{r3, r4, r5, pc}
 8007c3e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007c40:	b112      	cbz	r2, 8007c48 <_raise_r+0x1e>
 8007c42:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c46:	b94b      	cbnz	r3, 8007c5c <_raise_r+0x32>
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f000 f831 	bl	8007cb0 <_getpid_r>
 8007c4e:	462a      	mov	r2, r5
 8007c50:	4601      	mov	r1, r0
 8007c52:	4620      	mov	r0, r4
 8007c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c58:	f000 b818 	b.w	8007c8c <_kill_r>
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d00a      	beq.n	8007c76 <_raise_r+0x4c>
 8007c60:	1c59      	adds	r1, r3, #1
 8007c62:	d103      	bne.n	8007c6c <_raise_r+0x42>
 8007c64:	2316      	movs	r3, #22
 8007c66:	6003      	str	r3, [r0, #0]
 8007c68:	2001      	movs	r0, #1
 8007c6a:	e7e7      	b.n	8007c3c <_raise_r+0x12>
 8007c6c:	2400      	movs	r4, #0
 8007c6e:	4628      	mov	r0, r5
 8007c70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c74:	4798      	blx	r3
 8007c76:	2000      	movs	r0, #0
 8007c78:	e7e0      	b.n	8007c3c <_raise_r+0x12>
	...

08007c7c <raise>:
 8007c7c:	4b02      	ldr	r3, [pc, #8]	; (8007c88 <raise+0xc>)
 8007c7e:	4601      	mov	r1, r0
 8007c80:	6818      	ldr	r0, [r3, #0]
 8007c82:	f7ff bfd2 	b.w	8007c2a <_raise_r>
 8007c86:	bf00      	nop
 8007c88:	2000001c 	.word	0x2000001c

08007c8c <_kill_r>:
 8007c8c:	b538      	push	{r3, r4, r5, lr}
 8007c8e:	2300      	movs	r3, #0
 8007c90:	4d06      	ldr	r5, [pc, #24]	; (8007cac <_kill_r+0x20>)
 8007c92:	4604      	mov	r4, r0
 8007c94:	4608      	mov	r0, r1
 8007c96:	4611      	mov	r1, r2
 8007c98:	602b      	str	r3, [r5, #0]
 8007c9a:	f7fa f9aa 	bl	8001ff2 <_kill>
 8007c9e:	1c43      	adds	r3, r0, #1
 8007ca0:	d102      	bne.n	8007ca8 <_kill_r+0x1c>
 8007ca2:	682b      	ldr	r3, [r5, #0]
 8007ca4:	b103      	cbz	r3, 8007ca8 <_kill_r+0x1c>
 8007ca6:	6023      	str	r3, [r4, #0]
 8007ca8:	bd38      	pop	{r3, r4, r5, pc}
 8007caa:	bf00      	nop
 8007cac:	200003d4 	.word	0x200003d4

08007cb0 <_getpid_r>:
 8007cb0:	f7fa b998 	b.w	8001fe4 <_getpid>

08007cb4 <__sread>:
 8007cb4:	b510      	push	{r4, lr}
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cbc:	f000 f8a8 	bl	8007e10 <_read_r>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	bfab      	itete	ge
 8007cc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8007cc8:	181b      	addge	r3, r3, r0
 8007cca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cce:	bfac      	ite	ge
 8007cd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007cd2:	81a3      	strhlt	r3, [r4, #12]
 8007cd4:	bd10      	pop	{r4, pc}

08007cd6 <__swrite>:
 8007cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cda:	461f      	mov	r7, r3
 8007cdc:	898b      	ldrh	r3, [r1, #12]
 8007cde:	4605      	mov	r5, r0
 8007ce0:	05db      	lsls	r3, r3, #23
 8007ce2:	460c      	mov	r4, r1
 8007ce4:	4616      	mov	r6, r2
 8007ce6:	d505      	bpl.n	8007cf4 <__swrite+0x1e>
 8007ce8:	2302      	movs	r3, #2
 8007cea:	2200      	movs	r2, #0
 8007cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf0:	f000 f874 	bl	8007ddc <_lseek_r>
 8007cf4:	89a3      	ldrh	r3, [r4, #12]
 8007cf6:	4632      	mov	r2, r6
 8007cf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cfc:	81a3      	strh	r3, [r4, #12]
 8007cfe:	4628      	mov	r0, r5
 8007d00:	463b      	mov	r3, r7
 8007d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d0a:	f000 b823 	b.w	8007d54 <_write_r>

08007d0e <__sseek>:
 8007d0e:	b510      	push	{r4, lr}
 8007d10:	460c      	mov	r4, r1
 8007d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d16:	f000 f861 	bl	8007ddc <_lseek_r>
 8007d1a:	1c43      	adds	r3, r0, #1
 8007d1c:	89a3      	ldrh	r3, [r4, #12]
 8007d1e:	bf15      	itete	ne
 8007d20:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d2a:	81a3      	strheq	r3, [r4, #12]
 8007d2c:	bf18      	it	ne
 8007d2e:	81a3      	strhne	r3, [r4, #12]
 8007d30:	bd10      	pop	{r4, pc}

08007d32 <__sclose>:
 8007d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d36:	f000 b81f 	b.w	8007d78 <_close_r>

08007d3a <__ascii_wctomb>:
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	4608      	mov	r0, r1
 8007d3e:	b141      	cbz	r1, 8007d52 <__ascii_wctomb+0x18>
 8007d40:	2aff      	cmp	r2, #255	; 0xff
 8007d42:	d904      	bls.n	8007d4e <__ascii_wctomb+0x14>
 8007d44:	228a      	movs	r2, #138	; 0x8a
 8007d46:	f04f 30ff 	mov.w	r0, #4294967295
 8007d4a:	601a      	str	r2, [r3, #0]
 8007d4c:	4770      	bx	lr
 8007d4e:	2001      	movs	r0, #1
 8007d50:	700a      	strb	r2, [r1, #0]
 8007d52:	4770      	bx	lr

08007d54 <_write_r>:
 8007d54:	b538      	push	{r3, r4, r5, lr}
 8007d56:	4604      	mov	r4, r0
 8007d58:	4608      	mov	r0, r1
 8007d5a:	4611      	mov	r1, r2
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	4d05      	ldr	r5, [pc, #20]	; (8007d74 <_write_r+0x20>)
 8007d60:	602a      	str	r2, [r5, #0]
 8007d62:	461a      	mov	r2, r3
 8007d64:	f7fa f97c 	bl	8002060 <_write>
 8007d68:	1c43      	adds	r3, r0, #1
 8007d6a:	d102      	bne.n	8007d72 <_write_r+0x1e>
 8007d6c:	682b      	ldr	r3, [r5, #0]
 8007d6e:	b103      	cbz	r3, 8007d72 <_write_r+0x1e>
 8007d70:	6023      	str	r3, [r4, #0]
 8007d72:	bd38      	pop	{r3, r4, r5, pc}
 8007d74:	200003d4 	.word	0x200003d4

08007d78 <_close_r>:
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	4d05      	ldr	r5, [pc, #20]	; (8007d94 <_close_r+0x1c>)
 8007d7e:	4604      	mov	r4, r0
 8007d80:	4608      	mov	r0, r1
 8007d82:	602b      	str	r3, [r5, #0]
 8007d84:	f7fa f988 	bl	8002098 <_close>
 8007d88:	1c43      	adds	r3, r0, #1
 8007d8a:	d102      	bne.n	8007d92 <_close_r+0x1a>
 8007d8c:	682b      	ldr	r3, [r5, #0]
 8007d8e:	b103      	cbz	r3, 8007d92 <_close_r+0x1a>
 8007d90:	6023      	str	r3, [r4, #0]
 8007d92:	bd38      	pop	{r3, r4, r5, pc}
 8007d94:	200003d4 	.word	0x200003d4

08007d98 <_fstat_r>:
 8007d98:	b538      	push	{r3, r4, r5, lr}
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	4d06      	ldr	r5, [pc, #24]	; (8007db8 <_fstat_r+0x20>)
 8007d9e:	4604      	mov	r4, r0
 8007da0:	4608      	mov	r0, r1
 8007da2:	4611      	mov	r1, r2
 8007da4:	602b      	str	r3, [r5, #0]
 8007da6:	f7fa f982 	bl	80020ae <_fstat>
 8007daa:	1c43      	adds	r3, r0, #1
 8007dac:	d102      	bne.n	8007db4 <_fstat_r+0x1c>
 8007dae:	682b      	ldr	r3, [r5, #0]
 8007db0:	b103      	cbz	r3, 8007db4 <_fstat_r+0x1c>
 8007db2:	6023      	str	r3, [r4, #0]
 8007db4:	bd38      	pop	{r3, r4, r5, pc}
 8007db6:	bf00      	nop
 8007db8:	200003d4 	.word	0x200003d4

08007dbc <_isatty_r>:
 8007dbc:	b538      	push	{r3, r4, r5, lr}
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	4d05      	ldr	r5, [pc, #20]	; (8007dd8 <_isatty_r+0x1c>)
 8007dc2:	4604      	mov	r4, r0
 8007dc4:	4608      	mov	r0, r1
 8007dc6:	602b      	str	r3, [r5, #0]
 8007dc8:	f7fa f980 	bl	80020cc <_isatty>
 8007dcc:	1c43      	adds	r3, r0, #1
 8007dce:	d102      	bne.n	8007dd6 <_isatty_r+0x1a>
 8007dd0:	682b      	ldr	r3, [r5, #0]
 8007dd2:	b103      	cbz	r3, 8007dd6 <_isatty_r+0x1a>
 8007dd4:	6023      	str	r3, [r4, #0]
 8007dd6:	bd38      	pop	{r3, r4, r5, pc}
 8007dd8:	200003d4 	.word	0x200003d4

08007ddc <_lseek_r>:
 8007ddc:	b538      	push	{r3, r4, r5, lr}
 8007dde:	4604      	mov	r4, r0
 8007de0:	4608      	mov	r0, r1
 8007de2:	4611      	mov	r1, r2
 8007de4:	2200      	movs	r2, #0
 8007de6:	4d05      	ldr	r5, [pc, #20]	; (8007dfc <_lseek_r+0x20>)
 8007de8:	602a      	str	r2, [r5, #0]
 8007dea:	461a      	mov	r2, r3
 8007dec:	f7fa f978 	bl	80020e0 <_lseek>
 8007df0:	1c43      	adds	r3, r0, #1
 8007df2:	d102      	bne.n	8007dfa <_lseek_r+0x1e>
 8007df4:	682b      	ldr	r3, [r5, #0]
 8007df6:	b103      	cbz	r3, 8007dfa <_lseek_r+0x1e>
 8007df8:	6023      	str	r3, [r4, #0]
 8007dfa:	bd38      	pop	{r3, r4, r5, pc}
 8007dfc:	200003d4 	.word	0x200003d4

08007e00 <_malloc_usable_size_r>:
 8007e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e04:	1f18      	subs	r0, r3, #4
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	bfbc      	itt	lt
 8007e0a:	580b      	ldrlt	r3, [r1, r0]
 8007e0c:	18c0      	addlt	r0, r0, r3
 8007e0e:	4770      	bx	lr

08007e10 <_read_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	4604      	mov	r4, r0
 8007e14:	4608      	mov	r0, r1
 8007e16:	4611      	mov	r1, r2
 8007e18:	2200      	movs	r2, #0
 8007e1a:	4d05      	ldr	r5, [pc, #20]	; (8007e30 <_read_r+0x20>)
 8007e1c:	602a      	str	r2, [r5, #0]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	f7fa f901 	bl	8002026 <_read>
 8007e24:	1c43      	adds	r3, r0, #1
 8007e26:	d102      	bne.n	8007e2e <_read_r+0x1e>
 8007e28:	682b      	ldr	r3, [r5, #0]
 8007e2a:	b103      	cbz	r3, 8007e2e <_read_r+0x1e>
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	bd38      	pop	{r3, r4, r5, pc}
 8007e30:	200003d4 	.word	0x200003d4

08007e34 <_init>:
 8007e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e36:	bf00      	nop
 8007e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e3a:	bc08      	pop	{r3}
 8007e3c:	469e      	mov	lr, r3
 8007e3e:	4770      	bx	lr

08007e40 <_fini>:
 8007e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e42:	bf00      	nop
 8007e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e46:	bc08      	pop	{r3}
 8007e48:	469e      	mov	lr, r3
 8007e4a:	4770      	bx	lr
